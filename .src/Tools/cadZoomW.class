' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco

' this is the Main Job, either we are doing this or other job
Inherits ToolsBase
Create Static
Public Const Gender As String = "ZoomW"

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
  ' Modes:
  '       0 = Move, all points in the element must be selected, or click on it.
  '       1 = Stretch, selection may be partial, each element is called to see if the support stretching

  Me.Mode = _Mode
  Me.PoiChecking = False

End

Public Function MouseDown(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseDown

  If Mouse.Left Then
    Me.SelStartX = mouseX
    Me.SelStartY = mouseY
    Me.SelEndX = Me.SelStartX
    Me.SelEndy = Me.SelStartY

    Me.SelStartXr = appmain.CurrentDrawing.Xreal(mouseX)
    Me.SelStartYr = appmain.CurrentDrawing.Yreal(mouseY)

    Me.Active = True
  End If

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseUp

  Me.SelEndX = mousex
  Me.SelEndy = mouseY
  Me.Active = False

  ' corrijo para start<end
  If Me.SelStartX > Me.SelEndX Then Swap Me.SelStartX, Me.SelEndX
  If Me.SelStartY < Me.SelEndy Then Swap Me.SelStartY, Me.SelEndy                     ' this is FLIPPED

  ' Paso a coordenadas reales
  Me.SelStartXr = appmain.CurrentDrawing.Xreal(Me.SelStartX)
  Me.SelStartYr = appmain.CurrentDrawing.Yreal(Me.SelStartY)
  Me.SelEndXr = appmain.CurrentDrawing.Xreal(Me.SelEndX)
  Me.SelEndyr = appmain.CurrentDrawing.Yreal(Me.SelEndy)

  ' veo si el rectangulo es suficientemente grande como para representar una seleccion por rectangulo
  If (Me.SelEndX - Me.SelStartX + (-Me.SelEndy + Me.SelStartY)) < 10 Then ' es un rectangulo minusculo

    clsDrawingAids.ErrorMessage = ("Window is too small")

  Else
    ' engaÃ±amos a estas vars

    appmain.CurrentDrawing.Xmayor = Me.SelEndXr
    appmain.CurrentDrawing.Xmenor = Me.SelStartXr

    appmain.CurrentDrawing.Ymayor = Me.SelEndYr
    appmain.CurrentDrawing.Ymenor = Me.SelStartYr

    cadZoomE.Start(, 1)
    Me.Finish

  End If

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

  Me.SelEndX = mousex

  Me.SelEndy = mouseY

  Me.SelEndXr = appmain.CurrentDrawing.Xreal(mouseX)
  Me.SelEndYr = appmain.CurrentDrawing.Yreal(mouseY)

  appmain.redraw

End

Public Sub Draw() ' esta rutina es llamada por FCAD en el evento DrawingArea_Draw
  ' por ultimo, y para que se vea arriba, la seleccion

  If Not Me.Active Then Return

  Dim xyStart, xyEnd As Float[]

  GLplus.Rectangle2D(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr,,,,, Color.DarkBlue, 1, 0, 2)

End

Public Sub Finish()

  gcd.clsJob = gcd.clsJobPrevious
  gcd.clsJobPrevious = Me

  clsDrawingAids.CleanTexts

  Me.Active = False

  gcd.ToolActive = True

End
