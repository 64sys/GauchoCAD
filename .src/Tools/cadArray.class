' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Copies entities n x m times or polar n times
' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "Array"

Public Nx As Integer
Public Ny As Integer
Public Dx As Float
Public Dy As Float

Public Np As Integer
Public Dp As Float

' Add more if needed

Public Function Start(Optional ElemToBuild As Variant, Optional _mode As Integer = 0) As Boolean
  ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

  ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
  Me.PointsDone = 0
  Me.PointsTotal = 2                 ' orto: Punto base + Nx + Dx + Ny + Dy   , polar = Punto base + N + angulo

  ny = 1
  nx = 1
  np = 1
  dx = 0
  dy = 0
  dp = 0

  Me.mode = _mode
  DrawingAids.HelperTrabajo = ("Array") & " "

  ' chequeamos si hubo seleccion previa
  Me.SelectionCount = clsEntities.GetSelectionCount()

  If Me.SelectionCount = 0 Then                                     ' we have no elements in the selection

    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Select entities")

    gcd.clsJobPrevious = Me
    gcd.clsJob = clsDefaultJob

  Else
    '    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Base point")
    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Orthogonal or polar") & " [o]"
    Inc Me.PointsDone
    DrawingAids.HelperTrabajo = DrawingAids.HelperTrabajo & Str(Me.SelectionCount) & ("elements")

  Endif

  Me.Active = True
  gcd.ToolActive = True

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseUp

  If Me.PointsDone = 0 Then
    ' punto real base
    Me.SelStartXr = gcd.Near(gcd.Xreal(mouseX))
    Me.SelStartYr = gcd.Near(gcd.Yreal(mouseY))
    Inc Me.PointsDone

    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Orthogonal or polar") & " [o]"

  End If

End

Public Function KeyText(EnteredText As String) ' esta rutina es llamada por FCAD en el evento FCAD_KeyPress cuando recibe una texto + <Enter>

  If Me.PointsDone = 1 Then                     ' estamos esperando que nos responda si quere Ortogonal o Polar

    If (EnteredText = "") Or (Left$(UCase$(EnteredText), 1) = "O") Then                        ' enter es Ortogonal

      Me.mode = 1
      Inc Me.PointsDone
      DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Columns") & " [1]"
    Else If Left$(UCase$(EnteredText), 1) = "P" Then
      Me.mode = 2
      Inc Me.PointsDone
      DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Repetitions") & " [1]"
    Else

      DrawingAids.ErrorMessage = ("Bad input")
    End If

  Else If Me.PointsDone = 2 Then

    If Me.mode = 1 Then                             ' ortog->Nx
      Try Nx = CInt(EnteredText)
      If Nx = 0 Then nx = 1
      Inc Me.PointsDone
      DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Distance") & " X=[0]"
    Else                                         ' polar -> N
      Try Np = CInt(EnteredText)
      If np = 0 Then np = 1
      Inc Me.PointsDone
      DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Angle") & " [45]"
    End If

  Else If Me.PointsDone = 3 Then

    If Me.mode = 1 Then                             ' ortog->Dx
      Try Dx = CFloat(EnteredText)
      Inc Me.PointsDone
      DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Rows") & " [1]"
    Else                                         ' polar -> N
      Try Dp = CFloat(EnteredText) * Pi / 180
      Me.Finish

    End If
  Else If Me.PointsDone = 4 Then

    ' ortog->Ny
    Try Ny = CInt(EnteredText)
    If Ny = 0 Then ny = 1
    Inc Me.PointsDone
    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Distance") & " Y=[0]"

  Else If Me.PointsDone = 5 Then

    ' ortog->Dy
    Try Dy = CFloat(EnteredText)
    Inc Me.PointsDone
    Me.Finish

  End If

  ' catch
  gcd.redraw
  DrawingAids.ErrorMessage = ("Bad input")

End

Public Sub Finish()

  Dim Rx, Ry, i As Integer, o As Entity, newO As Entity

  If Me.mode = 1 And Me.PointsDone = 6 Then               ' me.mode orto finished correctly

    For Rx = 0 To Nx - 1

      For rY = 0 To Ny - 1

        If rx = 0 And ry = 0 Then Continue  ' evitamos duplicar la entidad inicial

        For Each o In gcd.CurrentDrawing.oSelected

          newO = clsEntities.ClonEntity(o)               ' devuelve una entidad en exactamente la misma posicion

          newO.ClassHandler.translate(newO, dx * rx, dy * ry)
          newO.ClassHandler.Finish(newo)
          gcd.CurrentDrawing.oEntities.Add(newO, newO.Handle)

        Next
      Next

    Next

  End If

  If Me.mode = 2 And Me.PointsDone = 3 Then               ' me.mode polar finished correctly

    Dim Nuevos As Float[]
    For rY = 2 To Np

      For Each o In gcd.CurrentDrawing.oEntities
        newO = clsEntities.ClonEntity(o)               ' devuelve una entidad en exactamente la misma posicion
        newO.classhandler.translate(newO, -Me.SelStartXr, -Me.SelStartYr)
        newO.ClassHandler.rotate(newO, dp * (ry - 1))
        newO.classhandler.translate(newO, Me.SelStartXr, Me.SelStartYr)
        newO.ClassHandler.Finish(newo)
        gcd.CurrentDrawing.oEntities.Add(newO, newO.Handle)

      Next

    Next

  End If

  ' TODO: optimizar para solo la seleccion

  gcd.ReadEntities()

  gcd.clsJobPrevious = Me
  gcd.clsJob = clsDefaultJob
  DrawingAids.CleanTexts
  clsEntities.DeSelection()
  gcd.DrawOriginals = False
  gcd.regen
  Me.Active = False
  gcd.ToolActive = False

End
