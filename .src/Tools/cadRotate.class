' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "Rotate"

Private Radianes As Float

Private glSelectedList As Integer

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
  ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

  Dim i As Integer
  ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
  Me.PointsDone = 0
  Me.PointsTotal = 2

  clsDrawingAids.HelperTrabajo = ("Rotate") & " "

  ' chequeamos si hubo seleccion previa
  Me.SelectionCount = clsEntities.GetSelectionCount()

  If Me.SelectionCount = 0 Then                                     ' we have no elements in the selection

    clsDrawingAids.Helper.texto = clsDrawingAids.HelperTrabajo & ": " & ("Select entities")

    gcd.clsJobPrevious = Me
    gcd.clsJob = clsDefaultJob

  Else                                                                    ' need the first point

    clsDrawingAids.Helper.texto = clsDrawingAids.HelperTrabajo & ": " & ("Base point")
    clsDrawingAids.HelperTrabajo = clsDrawingAids.HelperTrabajo & Str(Me.SelectionCount) & " " & ("elements")
    Me.inxSelected.Clear
    For i = 0 To gcd.CurrentDrawing.arrEntities.Max                  ' recolecto las entidades a modificar
      If gcd.CurrentDrawing.arrEntities[i].selected Then Me.inxSelected.Add(i)                               ' y las meto en un  array

    Next

    ' genero drawing lists

    clsEntities.GLGenDrawListAll(True)
    appmain.redraw

  Endif
  Me.Active = True
  gcd.ToolActive = True

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer)

  Dim i As Integer

  Inc Me.PointsDone

  If Me.PointsDone = 1 Then ' acabo de marcar el punto base

    ' ya tengo cosas seleccionadas
    clsDrawingAids.Helper.texto = clsDrawingAids.HelperTrabajo & ": " & ("Angle") & " [90]"

    ' punto real base
    Me.SelStartXr = puntos.Near(AppMain.Xreal(mousex))
    Me.SelStartYr = puntos.Near(AppMain.Yreal(mouseY))

    Me.glTranslate[0] = Me.SelStartXr
    Me.glTranslate[1] = Me.SelStartYr
    Me.glTranslate[2] = 0

    gl.PushMatrix
    gl.NewList(gcd.CurrentDrawing.GlListSelectedEntities, gl.COMPILE)                      ' genero los graficos dentro de la lista
    gl.Translatef(-Me.SelStartXr, -Me.SelStartYr, 0)
    For i = 0 To gcd.CurrentDrawing.arrEntities.Max 'Me.inxSelected.Max
      If gcd.CurrentDrawing.arrEntities[i].selected Then gl.CallList(gcd.CurrentDrawing.arrEntities[i].glDrwList)
    Next
    gl.EndList
    gl.PopMatrix

    ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
    ' TODO: reparar -> gcd.CurrentDrawing.DesHabilitarBotones
  Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
    '     ' permitir otros trabajos
    '     ' TODO: reparar -> gcd.CurrentDrawing.HabilitarBotones
    'Me.SelEndXr = puntos.Near(AppMain.Xreal(mousex)
    'Me.SelEndyr = puntos.Near(AppMain.Yreal(mouseY))

    'Radianes = Ang(Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)
    '
    Me.Finish()

  Endif

End

' Public Sub Draw()               ' called by gcd.CurrentDrawing.drwArea_Draw
'
'     gl.PushMatrix
'
'     gl.Translatef(-Me.glTranslate[0], -Me.glTranslate[1], -Me.glTranslate[2])
'     gl.Rotatef(Me.glAngle, Me.glRotate[0], Me.glRotate[1], Me.glRotate[2])
'     gl.Translatef(Me.glTranslate[0], Me.glTranslate[1], Me.glTranslate[2])
'     gl.Scalef(Me.glScale[0], Me.glScale[1], Me.glScale[2])
'     gl.CallList(gcd.CurrentDrawing.GlListSelectedEntities)                      ' si GL no tiene contexto, la lista no se genera. Es necesario que la instancia de FCAD este cargada.
'
'     gl.PopMatrix
'
' End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseMove

  If Me.PointsDone = 1 Then
    '     ' we compare Real values from the starting point to the location
    '     ' represente by the mouse now, taking account that the drawing
    '     ' could have being moved by the mouse wheel
    '
    '     ' new Real position is
    Me.SelEndXr = puntos.Near(AppMain.Xreal(mouseX))
    Me.SelEndyr = puntos.Near(AppMain.Yreal(mouseY))

    Radianes = Ang(Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)

    Me.glAngle = Radianes * 180 / Pi

    clsDrawingAids.Helper.texto = clsDrawingAids.HelperTrabajo & ": " & ("Angle") & " [90]" & Format$(Me.glAngle, "0.0")

  End If

  Debug Me.glAngle, Me.glTranslate[0], Me.glTranslate[1], Me.glTranslate[2]
  gcd.Redraw

End

Public Function KeyText(EnteredText As String) ' esta rutina es llamada por FCAD en el evento FCAD_KeyPress cuando recibe una texto + <Enter>

  If Me.PointsDone = 1 Then                     ' estamos esperando que nos responda si quere Ortogonal o Polar

    If EnteredText = "" Then                        ' enter es Ortogonal
      Radianes = 90 / 180 * Pi
      Inc Me.PointsDone
      Me.Finish

    Else
      Radianes = CFloat(EnteredText) / 180 * Pi
      Inc Me.PointsDone
      Me.Finish
    End If

  End If

Catch

  clsDrawingAids.ErrorMessage = ("Bad input")

End

Public Sub Finish()

  Dim i As Integer, ip As Integer, Prot As New Float[]

  If Me.PointsDone = Me.PointsTotal Then

    For i = 0 To Me.inxSelected.max

      ' en todos los casos, roto los puntos
      puntos.Translate(gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].p, -Me.SelStartXr, -Me.SelStartYr)  ' pero primero translado
      puntos.Rotate(gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].p, Radianes)
      puntos.Translate(gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].p, Me.SelStartXr, Me.SelStartYr)    ' y regreso

      ' en algunos casos, algo mas
      Select Case LCase$(gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].Gender)
        Case "text", "mtext"
          gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[0] += Radianes * 180 / Pi
          If gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[0] >= 360 Then gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[0] -= 360

        Case "insert"
          gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] += Radianes * 180 / Pi
          If gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] >= 360 Then gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] -= 360

        Case "arc"
          ' start
          gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[1] += Radianes * 180 / Pi
          If gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[1] >= 360 Then gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[1] -= 360

          ' finish
          gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] += Radianes * 180 / Pi
          If gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] >= 360 Then gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] -= 360

        Case "ellipse"
          ' start
          gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[1] += Radianes
          If gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[1] >= 2 * Pi Then gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[1] -= 2 * Pi

          ' finish
          gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] += Radianes
          If gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] >= 2 * Pi Then gcd.CurrentDrawing.arrEntities[Me.inxSelected[i]].fParam[2] -= 2 * Pi

      End Select

    Next

    clsEntities.Finish

  Endif

  gl.DeleteLists(glSelectedList, 1)
  gcd.clsJobPrevious = Me
  gcd.clsJob = clsDefaultJob
  clsDrawingAids.CleanTexts
  clsEntities.DeSelection()
  appmain.regen
  Me.Active = False
  gcd.ToolActive = False

End
