' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Create Static
Create Private

Public Const USEWITH As String = ""
' Add more if needed

Public SelStartX As Integer                         ' Sel = selection, where? Start/End , axis? X/Y
Public SelStartY As Integer
Public SelEndX As Integer
Public SelEndy As Integer

Public SelStartXr As Float                          ' same but in real space, METERS not pixel
Public SelStartYr As Float
Public SelEndXr As Float
Public SelEndyr As Float

Public LastX As Float               ' change in MouseMove/MouseUp
Public LastY As Float                         ' in the Real space, Y becomes Z axis

Public SelectionCount As Integer

Public PointsDone As Integer
Public PointsTotal As Integer
Public NextParamType As String          ' What kind of input the element expects P=point, F=float, C=color, S=string, M=mixed either Point, or Float that is taken from Max(Px-Px', Pz-Pz')
Public NextParamDefault As Variant      ' default value

Public Active As Boolean = False
Public PoiChecking As Boolean = False
Public EntityChecking As Boolean = False
Public Mode As Integer

Public MenuRightClick As String

Public inxSelected As New Integer[]

' this affects the gl Drawing list
Public glTranslate As New Float[]         ' dX, dY, dZ
Public glRotate As New Float[]            ' rX, rY, rZ
Public glAngle As Float                   ' deg
Public glScale As New Float[]             ' sX, sY, sZ

Public Sub _new()

  Me.glTranslate.Insert([0.0, 0.0, 0.0])         ' dX, dY, dZ
  Me.glRotate.Insert([0.0, 0.0, 1.0])            ' rX, rY, rZ
  Me.glAngle = 0                           ' deg
  Me.glScale.Insert([1.0, 1.0, 1.0])             ' sX, sY, sZ

End

Public Function NewParameter(vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  ' dummy

End

Public Function MouseDown(mouseX As Integer, mouseY As Integer) ' dummy

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' dummy

End

Public Function MouseRightUp(mouseX As Integer, mouseY As Integer) ' dummy

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' dummy

End

Public Sub Draw()               ' called by gcd.CurrDrawing.drwArea_Draw

  gl.PushMatrix

  gl.Translatef(glTranslate[0], glTranslate[1], glTranslate[2])
  gl.Rotatef(glAngle, glRotate[0], glRotate[1], glRotate[2])
  gl.Scalef(glScale[0], glScale[1], glScale[2])
  gl.CallList(gcd.CurrentDrawing.GlListSelectedEntities)
  gl.PopMatrix

End

Public Function KeyText(EnteredText As String)
  ' Lets see what are we expecting

  Dim Xt, yt As Float, sText, ErrTxt As String, Relative As Boolean
  Dim bResult As Boolean

  Select Case NextParamType

    Case "P", "+"
      errtxt = ", expected a valid point like 12.4,9.5  or @12.34,10.5"
      ' lets filter
      EnteredText = Trim$(UCase$(EnteredText))
      ' So we expect a position x,y , but in some cases it can be
      ' C = close
      ' U = undo, delete last segment
      ' and others

      If Left(EnteredText, 1) = "C" Then          ' close the element
        ' got othe first point and exit
        If gcd.clsJob.NewParameter(["close"]) Then Me.Finish

      Else If Left(EnteredText, 1) = "U" Then     ' undo last command and go

        If gcd.clsJob.NewParameter(["undo"]) Then Me.Finish

      Else                                        ' an X,Y or @X,Y

        If InStr(EnteredText, "@") > 0 Then    ' may be a point
          Relative = True
          EnteredText = Replace(EnteredText, "@", "")
        Endif
        Xt = CFloat(Split(EnteredText, ",")[0])
        yt = CFloat(Split(EnteredText, ",")[1])

        If Relative Then
          xt += Me.LastX
          yt += Me.LastY

        Endif
        Me.LastX = xt
        Me.LastY = yt

        If gcd.clsJob.NewParameter(["point", xt, yt], True) Then
          ' last point
          gcd.CurrentDrawing.LastPoint.Clear
          gcd.CurrentDrawing.LastPoint.Insert([xt, yt])

        End If

      End If

      ' Case "T"
      '     errtxt = ", expected text, not a point"
      '     ' its a valid input?
      '     If EnteredText = "" Then
      '
      '         sText = ParamDefault[clsjob.StepsDone]
      '
      '     Else
      '
      '         sText = EnteredText
      '
      '     End If
      '
      '     If elem.ClassHandler.NewParameter(elem, ["text", sText], True) Then AdvanceStep
      '
      ' Case "F", "M", "A", "L", "R"                ' Float, Mixed, Angle, Longitud
      '     errtxt = "enter a valid text size"
      '
      '     If EnteredText = "" Then
      '         Try bResult = elem.ClassHandler.NewParameter(elem, ["float", ParamDefault[elem.ClassHandler.StepsDone]], True)
      '
      '     Else
      '
      '         bResult = elem.ClassHandler.NewParameter(elem, ["float", CFloat(EnteredText)], True)
      '
      '     Endif
      '
      '     If bResult Then AdvanceStep
      '
      ' Case "C"                                ' color
      '     If Dialog.SelectColor() Then
      '         elem.fParam[iFloat] = CFloat(Dialog.Color)
      '         Inc iFloat
      '         AdvanceStep
      '
      '     Endif
      '     Key.Cod

  End Select

End

Public Sub Finish()

  gcd.CurrentDrawing.RequiresSaving = True
  gcd.CurrentDrawing.iEntity.Clear
  gcd.CurrentDrawing.iEntity.Insert([0, 0, -1, -1])
  gcd.clsJobPrevious = Me
  gcd.clsJob = cadSelection
  DrawingAids.CleanTexts
  clsEntities.DeSelection()
  gcd.DrawOriginals = False
  Me.Active = False
  gcd.ToolActive = False
  gcd.regen

End

Public Sub Cancel()

  gcd.clsJobPrevious = Me
  gcd.clsJob = cadSelection
  DrawingAids.CleanTexts
  gcd.Redraw

End
