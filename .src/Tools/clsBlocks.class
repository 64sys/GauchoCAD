' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Martin Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "Blocks"

Public eBlock As Block
Private cModelPreview As Collection
Public fBlock As New Punto2d

Public Function Start(Optional sfilename As Variant, Optional _mode As Integer = 0) As Boolean

  Dim xf As String[]
  Dim f As String
  Dim iREt As Integer

  eBlock = New Block
  eBlock.name = ""
  Me.EntityChecking = True
  cModelPreview = New Collection

  eBlock.entities = New Entity[]

  Dxf.LoadFile(sFilename, cModelPreview, True, True, True)         ' cargo la entidad
  gcd.ImpEnty6(cModelPreview["ENTITIES"], eBlock.entities)
  eBlock.name = Utils.FileWithoutExtension(Utils.FileFromPath(sFilename))

  'If iret = 0 Then Me.Finish

  ' el user eligio un bloque y lo quiere insertar en algun punto

End

Public Sub Draw()

  Dim ET As Entity, i As Integer
  Dim fBlockDegRotation As Float
  Dim Mirrored As Integer

  If eBlock.entities.Count = 0 Then Return

  AppMain.fBlockDegRotation = CFloat(AppMain.txtRotation.Text)
  Try AppMain.fBlockScaleX = CFloat(AppMain.txtScalex.Text)
  If AppMain.fBlockScaleX = 0 Then AppMain.fBlockScaleX = 1

  Try AppMain.fBlockScaleY = CFloat(AppMain.txtScaleY.Text)
  If AppMain.fBlockScaleY = 0 Then AppMain.fBlockScaleY = 1

  If AppMain.tbnMirrored.value Then Mirrored = -1 Else Mirrored = 1

  gl.PushMatrix
  gl.Translatef(fBlock.x, fBlock.y, 0)
  gl.Rotatef(AppMain.fBlockDegRotation, 0, 0, 1)
  gl.Scalef(AppMain.fBlockScaleX * Mirrored, AppMain.fBlockScaleY, 1)

  For Each ET In eBlock.entities
    'et.visible = True

    et.pLayer = gcd.CurrentDrawing.CurrLayer
    et.colour = gcd.CurrentDrawing.CurrColor
    et.ColorToPaint = gcd.gColor[et.colour]

    et.LineType = gcd.CurrentDrawing.CurrLineType

    et.LineWidth = gcd.CurrentDrawing.CurrLineWt

    et.ClassHandler.Draw(et)
  Next

  gl.PopMatrix

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

  fBlock.x = gcd.Near(gcd.Xreal(mouseX))
  fBlock.y = gcd.Near(gcd.Yreal(mouseY))

  ' y si tengo enganche?

  If gcd.CurrentDrawing.iEntity[2] >= 0 Then

    ' esto re enganchado

    fBlock.x = gcd.CurrentDrawing.iEntity[0]
    fBlock.y = gcd.CurrentDrawing.iEntity[1]

  End If

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseUp

  ' creo el bloque (si no existe y luego el insert)
  Dim entInsert As New Entity
  Dim i, ie As Integer
  Dim sBloque As String
  Dim entPart As Entity

  ' busco el bloque

  If IsNull(clsEntities.FIndBlock(eBlock.name)) Then ' must add

    eBlock.layer = gcd.CurrentDrawing.CurrLayer.Name
    eBlock.HandleOwner = gcd.NewHandle()    ' code 5 BLOCK_RECORD y 330 BLOCK
    eBlock.handle = gcd.NewHandle()         ' code 5 BLOCK
    eBlock.HandleOwnerParent = "1"          ' code 330 BLOCK_RECORD
    eBlock.HandleAsociatedLayout = "1"      ' ?

    ' este block nuevo necesita un endblk al final, lo creamos

    entPart = New Entity
    entPart.ClassHandler = cadEndBlk
    entPart.Gender = "EndBlk"
    entPart.Handle = gcd.NewHandle()
    entPart.pLayer = gcd.CurrentDrawing.CurrLayer
    entPart.HandleOwner = eBlock.handle
    eBlock.entities.Add(entPart)
    For Each entPart In eBlock.entities
      entPart.HandleOwner = eBlock.HandleOwner
    Next

    gcd.CurrentDrawing.arrBlocks.Add(eBlock)
  End If
  ' ahora creo el insert

  gcd.CurrentDrawing.oEntities.Add(entInsert)
  entInsert.pBlock = eBlock
  entInsert.Handle = gcd.NewHandle()
  entInsert.HandleOwner = "1"

  entInsert.ClassHandler = cadInsert
  entInsert.pLayer = gcd.CurrentDrawing.CurrLayer
  entInsert.colour = gcd.CurrentDrawing.CurrColor
  entInsert.LineType = gcd.CurrentDrawing.CurrLineType
  entInsert.LineWidth = gcd.CurrentDrawing.CurrLineWt
  entInsert.Gender = cadInsert.Gender
  entInsert.P.Add(fBlock.x)
  entInsert.P.Add(fBlock.y)

  entInsert.fParam.Add(AppMain.FBlockscaleX)
  entInsert.fParam.Add(AppMain.FBlockscaleY)
  entInsert.fParam.Add(1)

  entInsert.fParam.Add(AppMain.FBlockdegRotation)
  entInsert.ClassHandler.Finish(entInsert)

  EntityBuilder.LastEntity = entInsert                                       ' save it to repeat on rigth click

  gcd.clsJobPrevious = Me
  gcd.clsJob = clsDefaultJob
  DrawingAids.CleanTexts

  AppMain.PanelBlockFit.Visible = False
  AppMain.ListView1.Visible = True

  gcd.regen

End
