' Gambas class file

Inherits ToolsBase
Public Const GENDER As String = "Load"

Public Function Start(Optional filename As Variant, Optional _mode As Integer = 0) As Boolean

    Dim xf As String[]
    Dim f As String
    
    
    If filename = "" Then
        Dialog.Filter = ["*.xml", ("Archivos de GambasCAD")]
        Dialog.OpenFile(False)
    
        f = Dialog.Path
        If Exist(f) Then
            LoadFromFile(f)
        Endif
    Else
            LoadFromFile(filename)
        
    End If
   clsEntities.ReconstruirBloques
    Me.Finish
   ' appmain.hFCAD.LoadLayers()
   ' appmain.hFCAD.LoadWeights()    ' esto no funciona porque la ventana no esta añadida al workspace
   ' appmain.hFCAD.LoadStyles()
   
   clsEntities.GLGenDrawList

   cadZoomE.Start()                ' esto no funciona porque la ventana no esta añadida al workspace

End

Public Sub LoadFromFile(Optional FilePath As String)

    Dim xf As String[]
    Dim f As String

    Dim x As New XmlDocument
    Dim ent As XmlElement
    Dim lv As Float

    ' Tincho, esto es nuevo
    ' ---------------------
    Dim arrStr As New String[]
    Dim mistr As String
    Dim newObj As Object
    ' ---------------------

    Dim x1, x2, x3, x4 As Float
    Dim z1, z2, z3, z4 As Float
    Dim dx As Float
    Dim dz As Float
    Dim wt As Float
    Dim ty As Float
    Dim i As Integer                ' Martin: para recorrer los puntos
    Dim c As New Collection       '' Layer properties
    Dim ilayer As Integer
    Dim icolor As Integer
    Dim iweight As Integer
    Dim istyle As Integer

    x.Open(FilePath)

    modCAD.FileName = FilePath

    For Each ent In x.GetElementsByTagName("header")
        Select ent.Attributes["type"]
            Case "layer"
                c.Clear
                'c["id"] = ilayer
                c["id"] = ent.Attributes["id"]
                c["type"] = ent.Attributes["type"]
                c["label"] = ent.Attributes["label"]
                c["show"] = CBool(ent.Attributes["show"])
                c["frozen"] = CBool(ent.Attributes["frozen"])
                c["lock"] = CBool(ent.Attributes["lock"])
                c["color"] = CInt(ent.Attributes["color"])
                c["style"] = CInt(ent.Attributes["style"])
                c["weight"] = CInt(ent.Attributes["weight"])
                c["print"] = CBool(ent.Attributes["print"])
                modCAD.cLayers.Add(c.Copy(), ent.Attributes["id"])
                'Inc ilayer

            Case "color"
                c.Clear
                'c["id"] = icolor
                c["id"] = ent.Attributes["id"]
                c["type"] = ent.Attributes["type"]
                'c["label"] = ent.Attributes["label"]
                c["value"] = ent.Attributes["value"]
                modCAD.cColors.Add(c.Copy(), ent.Attributes["id"])
                'Inc icolor

            Case "style"
                c.Clear
                'c["id"] = istyle
                c["id"] = ent.Attributes["id"]
                c["type"] = ent.Attributes["type"]
                'c["label"] = ent.Attributes["value"]
                c["value"] = ent.Attributes["value"]
                modCAD.cStyles.Add(c.Copy(), ent.Attributes["id"])
                'Inc istyle

            Case "weight"
                c.Clear
                'c["id"] = iweight
                c["id"] = ent.Attributes["id"]
                c["type"] = ent.Attributes["type"]
                'c["label"] = ent.Attributes["label"]
                c["value"] = ent.Attributes["value"]
                modCAD.cWeights.Add(c.Copy(), ent.Attributes["id"])
                'Inc iweight

        End Select
    Next

    For Each ent In x.GetElementsByTagName("entity")

        ' tengo que crear un objeto de este tipo
        ' TODO: verificar si esta entidad la conozco, esto dara soporte para abrir versiones futuras

        newObj = Object.New(ent.Attributes["type"])   ' los elementos no tiene argumentos en _New para serializar este proceso

        ' aqui voy a tener creados puntos minimos, pero voy a recrear los arrays mas abajo, asi que los borro por ahora
        newObj.P.Clear
        newObj.fParam.Clear
        newObj.Level.clear

        ' agrego el objeto ya mismo
        APPMain.hFCAD.arrEntities.Add(newObj)

        ' leo todos los puntos X y los agrego directamente en el elemento , los guardo en un nuevo formato para poder serializar
        arrStr = Split(ent.Attributes["p"], ":")           ' "p=1:3:5:6:8"
        For Each mistr In arrStr
            newObj.P.Add(CFloat(mistr))
        Next

        ' idem Level
        arrStr = Split(ent.Attributes["level"], ":")
        For Each mistr In arrStr
            newObj.Level.Add(CFloat(mistr))
        Next

        ' idem fParam
        arrStr = Split(ent.Attributes["fparam"], ":")
        For Each mistr In arrStr
            newObj.fParam.Add(CFloat(mistr))
        Next

        ' vars CAD de futura implementacion
        ' TODO: implementar para el resto
        newObj.StringData = ent.Attributes["string"]
        newObj._color = CInt(ent.Attributes["color"])
        newObj.Block = ent.Attributes["block"]
        newObj.layer = ent.Attributes["layer"]   ' <------------- tincho uso layer en vez de nivel
        newObj.RefPointX = CFloat(ent.Attributes["refx"])   ' nuevos
        newObj.RefPointY = CFloat(ent.Attributes["refy"])   ' nuevos

        newObj.Finish(-1)
        clsEntities.BackUpPosition(newObj)

    Next

End



Public Sub Finish()     ' en este caso no podemos usar la rutina de la clase padre

    modCAD.clsJobPrevious = Me
    modCAD.clsJob = clsDefaultJob
    clsDrawingAids.CleanTexts
   

End

