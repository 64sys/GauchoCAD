' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco

' this is the Main Job, either we are doing this or other job
Inherits ToolsBase
Create Static
Public Const Gender As String = "Default"

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Modes:
    '       0 = Move, all points in the element must be selected, or click on it.
    '       1 = Stretch, selection may be partial, each element is called to see if the support stretching

    Me.Mode = _Mode

End

Public Function MouseDown(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseDown

    If Mouse.Left Then

        If appmain.hFcad.iEntity[2] >= 0 Then                         ' 1.1.2 el mouse no esta enganchado, pero esta arriba de una entidad

            If appmain.hFcad.oEntity.selected Then
                clsEntities.deSelectElem(appmain.hFcad.oEntity)               '   -> la deselecciono
            Else
                clsEntities.SelectElem(appmain.hFcad.oEntity)                 '   -> la selecciono
            Endif
            Me.Active = False
            appmain.hFcad.regen

        Else

            Me.SelStartX = mouseX
            Me.SelStartY = mouseY
            Me.SelStartXr = appmain.hFcad.Xreal(Me.SelStartX)
            Me.SelStartYr = appmain.hFcad.Yreal(Me.SelStartY)

            Me.SelEndX = Me.SelStartX
            Me.SelEndy = Me.SelStartY

            Me.Active = True
        End If
    End If

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseUp

    Me.SelEndX = mousex
    Me.SelEndy = mouseY

    If Me.Active Then
        Dim Crossing As Boolean = False
        ' corrijo para start<end
        Me.Active = False
        If Me.SelStartX > Me.SelEndX Then
            crossing = True
            Swap Me.SelStartX, Me.SelEndX
        Else
            crossing = False
        End If
        If Me.SelStartY < Me.SelEndy Then Swap Me.SelStartY, Me.SelEndy                     ' this is FLIPPED

        Dim tipo As String
        tipo = "nueva"
        If Mouse.Shift Then tipo = "resta" ' estos elementos de la seleccion anterior
        If Mouse.Control Then tipo = "suma" ' elementos a la seleccion anterior

        ' Paso a coordenadas reales
        Me.SelStartXr = appmain.hFcad.Xreal(Me.SelStartX)
        Me.SelStartYr = appmain.hFcad.Yreal(Me.SelStartY)
        Me.SelEndXr = appmain.hFcad.Xreal(Me.SelEndX)
        Me.SelEndyr = appmain.hFcad.Yreal(Me.SelEndy)

        ' veo si el rectangulo es suficientemente grande como para representar una seleccion por rectangulo
        If (Me.SelEndX - Me.SelStartX + (-Me.SelEndy + Me.SelStartY)) > 10 Then

            Dim t As Float = Timer
            Me.selectionCount = clsEntities.SelectionSquare(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr, Me.SelEndyr, tipo, crossing)
            Debug "Select parsing time ", Timer - t

            clsEntities.GLGenDrawListSel

        End If

        clsDrawingAids.HelperTrabajo = ("Selected ") & Str$(Me.selectionCount) & (" elements")

        '     'aprovecho para ver si hay algo util en la seleccion
        '
        ' Select Case Me.Mode
        '
        '     Case 0 ' Move, all vertices must be selected
        '        clsDrawingAids.HelperTrabajo = ("Selected ") & Str$(clsEntities.DeSelection("todo", "mover")) & (" elements")
        '
        '     Case 1 ' Stretch
        '         clsDrawingAids.HelperTrabajo = ("Selected ") & Str$(clsEntities.DeSelection("todo", "estirar")) & (" elements")
        '
        ' End Select
    Else

    End If

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

    If Me.Active Then
        Me.SelEndX = mouseX
        Me.SelEndy = mouseY
        Me.SelEndXr = appmain.hFcad.Xreal(Me.SelEndX)
        Me.SelEndyr = appmain.hFcad.Yreal(Me.SelEndy)

        appmain.hFCAD.redraw
    End If

End

Public Function KeyText(EnteredText As String)

    ' in this case, we try to run the command wich is a class
    Dim o As Object, RunWith As String, c As Class

    If EnteredText = "" Then Return                                ' no BS here

    modCAD.clsJobPrevious = modCAD.clsJob

    o = Object.New("cad" & EnteredText)

    ' check if the class needs to be run trough other
    If o.usewith = "" Then                        ' its a tool
        modCAD.clsJob = o
        modCAD.clsJob.start

    Else                                                    ' its propably an eentity

        modCAD.clsJob = Object.New(o.usewith)
        modCAD.clsJob.start(o)

    End If

    ' TODO: dejar comentado mientras hagamos debug
    'Catch

    clsDrawingAids.ErrorMessage = "Command not recognized"
    '
    '

End

Public Sub Draw() ' esta rutina es llamada por FCAD en el evento DrawingArea_Draw
    ' por ultimo, y para que se vea arriba, la seleccion

    If Not Me.Active Then Return

    If Me.SelStartX > Me.SelEndX Then                               ' Seleccion crossing, o sea que si cualquier arista del rectangulo cruza el bounding poligon, queda seleccionado

        GLplus.Rectangle2D(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, Color.RGB(224, 220, 207, 215),,,, Color.red, 1, 2)

    Else                                                            ' seleccion full, todos los puntos deben estar adentro

        GLplus.Rectangle2D(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, Color.RGB(224, 220, 207, 215),,,, Color.Green, 1, 2)

    End If

End

Public Sub Finish()

    ' modCAD.clsJobPrevious = Me  ' selection dont go to another job

    modCAD.clsJob = modCAD.clsJobPrevious
    modCAD.clsJobPrevious = Me
    clsDrawingAids.CleanTexts
    appmain.hFCAD.redraw
    modCAD.clsJob.Start(modCAD.clsJobPreviousParam)

End
