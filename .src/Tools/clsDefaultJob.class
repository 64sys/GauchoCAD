' Gambas class file

' Tool maintained by Terco

' this is the Main Job, either we are doing this or other job
Inherits ToolsBase
Create Static
Public Const GENDER As String = ("Default")


Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
    ' Modes:
    '       0 = Move, all points in the element must be selected, or click on it.
    '       1 = Stretch, selection may be partial, each element is called to see if the support stretching

    Me.Mode = _Mode

End

Public Function MouseDown() ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseDown

    If Mouse.Left Then
        Me.SelStartX = mouse.x
        Me.SelStartY = mouse.y
        Me.SelStartXr = appmain.hFcad.Xreal(Me.SelStartX)
        Me.SelStartYr = appmain.hFcad.Yreal(Me.SelStartY)
  
        Me.SelEndX = Me.SelStartX
        Me.SelEndy = Me.SelStartY
      
        
        Me.Active = True
    End If

End

Public Function MouseUp() ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseUp

    Me.SelEndX = mouse.x
    Me.SelEndy = mouse.y
    Me.Active = False

    ' corrijo para start<end
    If Me.SelStartX > Me.SelEndX Then Swap Me.SelStartX, Me.SelEndX
    If Me.SelStartY < Me.SelEndy Then Swap Me.SelStartY, Me.SelEndy                     ' this is FLIPPED

    Dim tipo As String
    tipo = "nueva"
    If Mouse.Shift Then tipo = "resta" ' estos elementos de la seleccion anterior
    If Mouse.Control Then tipo = "suma" ' elementos a la seleccion anterior

    ' Paso a coordenadas reales
    Me.SelStartXr = appmain.hFcad.Xreal(Me.SelStartX)
    Me.SelStartYr = appmain.hFcad.Yreal(Me.SelStartY)
    Me.SelEndXr = appmain.hFcad.Xreal(Me.SelEndX)
    Me.SelEndyr = appmain.hFcad.Yreal(Me.SelEndy)

    ' veo si el rectangulo es suficientemente grande como para representar una seleccion por rectangulo
    If (Me.SelEndX - Me.SelStartX + (-Me.SelEndy + Me.SelStartY)) < 10 Then ' es un rectangulo minusculo
        ' lo tomo como un click en un punto, le pregunto al iterador de plantas tipo si hay algo en ese lugar
        clsEntities.SelectFromPoint(Me.SelEndXr, Me.SelEndyr, True) ' en coordenedas reales en metros

    Else
        ' busco elementos seleccionados
        clsEntities.SelectionSquare(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr, Me.SelEndyr, tipo)

    End If

    '     'aprovecho para ver si hay algo util en la seleccion

    Select Case Me.Mode

        Case 0 ' Move, all vertices must be selected
            clsDrawingAids.HelperTrabajo = ("Selected ") & Str$(clsEntities.DeSelection("todo", "mover")) & (" elements")

        Case 1 ' Stretch
            clsDrawingAids.HelperTrabajo = ("Selected ") & Str$(clsEntities.DeSelection("todo", "estirar")) & (" elements")

    End Select

End

Public Function MouseMove() ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

    Me.SelEndX = mouse.x
    Me.SelEndy = mouse.y
    Me.SelEndXr = appmain.hFcad.Xreal(Me.SelEndX)
    Me.SelEndyr = appmain.hFcad.Yreal(Me.SelEndy)

    appmain.hFCAD.redraw

End

Public Function KeyText(EnteredText As String)

    ' in this case, we try to run the command wich is a class
    Dim o As Object, RunWith As String, c As Class

    If EnteredText = "" Then Return                                ' no BS here

    modCAD.clsJobPrevious = modCAD.clsJob

    o = Object.New("cad" & EnteredText)

    ' check if the class needs to be run trough other
    If o.usewith = "" Then                        ' its a tool
        modCAD.clsJob = o
        modCAD.clsJob.start

    Else                                                    ' its propably an eentity

        APPMain.hFCAD.arrEntities.Add(o)
        modCAD.clsJob = Object.New(o.usewith)
        modCAD.clsJob.start(o)

    End If

    ' TODO: dejar comentado mientras hagamos debug
'Catch

    clsDrawingAids.ErrorMessage = "Command not recognized"
    '
    '

End

Public Sub Draw() ' esta rutina es llamada por FCAD en el evento DrawingArea_Draw
    ' por ultimo, y para que se vea arriba, la seleccion

    If Not Me.Active Then Return
    
    Dim xyStart, xyEnd As Float[]
  
    ' gl.PushMatrix
    ' gl.LoadIdentity
    ' 
    ' ' revierto las escalas para pasar a coordenadas de pantalla
    ' gl.Translatef(appmain.hFCAD.glarea1.w / 2, appmain.hFCAD.glarea1.h / 2, 0)
    ' gl.Scalef(1 / appmain.hFcad.ScaleZoom / 100, -1 / appmain.hFcad.ScaleZoom / 100, 1)

    'paint.LineWidth = 1.0 / appmain.hFcad.ScaleZoom / 2
    'gl.LineWidth = 1.0 
    
    ' If Me.SelStartX > Me.SelEndX Then                               ' Seleccion crossing, o sea que si cualquier arista del rectangulo cruza el bounding poligon, queda seleccionado
    '     paint.brush = Paint.Color(Color.RGB(224, 220, 207, 175))
    '     paint.Rectangle(Me.SelStartX, Me.SelStartY, Me.SelEndX - Me.SelStartX, Me.SelEndy - Me.SelStartY)
    '     paint.Fill(True)
    '     paint.Dash = clsDrawingAids.Dashes
    '     paint.brush = Paint.Color(Color.RGB(255, 0, 0, 0))
    '     paint.Stroke
    '     
    ' Else                                                            ' seleccion full, todos los puntos deben estar adentro
        ' paint.Dash = Null
        ' paint.brush = Paint.Color(Color.RGB(224, 220, 207, 175))
        ' paint.Rectangle(Me.SelStartX, Me.SelStartY, Me.SelEndX - Me.SelStartX, Me.SelEndy - Me.SelStartY)
        ' paint.Fill(True)
        ' paint.brush = Paint.Color(Color.RGB(0, 255, 255, 0))
        ' paint.Stroke
        GLplus.Rectangle2D(Me.SelStartXr, Me.SelStartYr, Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, Color.RGB(224, 220, 207, 215))

    'End If
    
    'gl.PopMatrix

End

Public Sub Finish()

    ' modCAD.clsJobPrevious = Me  ' selection dont go to another job

    modCAD.clsJob = modCAD.clsJobPrevious
    modCAD.clsJobPrevious = Me
    clsDrawingAids.CleanTexts
    appmain.hFCAD.redraw
     modCAD.clsJob.Start(modCAD.clsJobPreviousParam)


End
