' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Martin Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "Blocks"

Public Struct arrBlockSt
  name As String
  x As Float
  y As Float
  scaleX As Float
  scaleY As Float
  degRotation As Float
  mirrored As Boolean
  layer As String
  entities As Entity[]
End Struct

Public eBlock As New ArrBlockSt

Public Function Start(Optional filename As Variant, Optional _mode As Integer = 0) As Boolean

  Dim xf As String[]
  Dim f As String
  Dim iREt As Integer

  eBlock.entities = New Entity[]
  iRet = FBlock.Showmodal()

  If iret = 0 Then Me.Finish

  ' el user eligio un bloque y lo quiere insertar en algun punto

End

Public Sub Draw()

  Dim ET As Entity, i As Integer

  If FBlock.entyBlock.Count = 0 Then Return

  gl.PushMatrix
  gl.Translatef(fBlock.x / AppMain.CurrentDrawing.ScaleZoom, fBlock.y / AppMain.CurrentDrawing.ScaleZoom, 0)
  gl.Rotatef(FBlock.degRotation, 0, 0, 1)
  gl.Scalef(FBlock.scaleX, fBlock.scaleY, 1)

  For Each ET In FBlock.entyBlock
    'et.visible = True

    et.ClassHandler.Draw(et)
  Next

  gl.PopMatrix

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

  fBlock.x = puntos.Near(appmain.Xreal(mouseX))
  fBlock.y = puntos.Near(appmain.yreal(mouseY))

  ' y si tengo enganche?

  If AppMain.CurrentDrawing.iEntity[2] >= 0 Then

    ' esto re enganchado

    fBlock.x = AppMain.CurrentDrawing.iEntity[0]
    fBlock.y = AppMain.CurrentDrawing.iEntity[1]

  End If

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseUp

  ' creo el bloque (si no existe y luego el insert)
  Dim entInsert As New Entity
  Dim i, ie As Integer
  Dim sBloque As String
  Dim entPart As Entity

  ' busco el bloque

  For i = 0 To AppMain.CurrentDrawing.arrBlocks.Max

    If AppMain.CurrentDrawing.arrBlocks[i].name = FBlock.BlockName Then Break

  Next

  If i = AppMain.CurrentDrawing.arrBlocks.Count Then ' armo el bloque

    AppMain.CurrentDrawing.arrBlocks.Add(eBlock)
    eBlock.name = FBlock.BlockName
    For ie = 0 To FBlock.entyBlock.Max
      eBlock.entities.Add(clsEntities.ClonEntity(FBlock.entyBlock[ie]))
    Next

  End If

  ' ahora creo el insert

  AppMain.CurrentDrawing.arrEntities.Add(entInsert)
  entInsert.Block = eBlock.name
  entInsert.ClassHandler = cadInsert
  entInsert.Layer = appmain.CurrentLayer
  entInsert.Gender = cadInsert.Gender
  entInsert.P.Add(fBlock.x)
  entInsert.P.Add(fBlock.y)

  entInsert.fParam.Add(FBlock.scaleX)
  entInsert.fParam.Add(FBlock.scaleY)
  entInsert.fParam.Add(FBlock.degRotation)
  entInsert.ClassHandler.Finish(entInsert, -1)

  clsEntityBuilder.LastEntity = entInsert                                       ' save it to repeat on rigth click

  gcd.clsJobPrevious = Me
  gcd.clsJob = clsDefaultJob
  clsDrawingAids.CleanTexts

  appmain.regen

End
