' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "Copy"
' Add more if needed

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
  ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

  ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
  Dim i As Integer, E As Entity

  Me.PointsDone = 0
  Me.PointsTotal = 2

  DrawingAids.HelperTrabajo = ("Copy") & ""

  If gcd.CurrentDrawing.oSelected.Count = 0 Then                                     ' we have no elements in the selection

    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Select entities")

    gcd.clsJobPrevious = Me
    gcd.clsJob = cadSelection

  Else                                                                    ' need the first point

    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Base point")
    DrawingAids.HelperTrabajo = DrawingAids.HelperTrabajo & Str(Me.SelectionCount) & " " & ("elements")

    ' UNDO STUFF
    gcd.CurrentDrawing.uUndo.OpenUndoStage("Copy entities", Undo.TypeCreate)
    For Each E In gcd.CurrentDrawing.oSelected
      gcd.CurrentDrawing.uUndo.AddUndoItem(clsEntities.ClonEntity(E, False))
    Next

  Endif

  Me.Active = True
  gcd.ToolActive = True

End

Public Function NewParameter(vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  If vParam[0] = "point" Then

    ' enganio al evento mouse
    MouseMove(gcd.Xpix(vParam[1]), gcd.Ypix(vParam[2]))
    MouseUp(gcd.Xpix(vParam[1]), gcd.Ypix(vParam[2]))

  Endif

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseUp

  Inc Me.PointsDone

  If Me.PointsDone = 1 Then ' acabo de marcar el punto base
    gcd.DrawOriginals = True

    ' ya tengo cosas seleccionadas
    DrawingAids.Helper.texto = ("Final point")

    ' punto real base
    Me.SelStartXr = gcd.Near(gcd.Xreal(mousex))
    Me.SelStartYr = gcd.Near(gcd.Yreal(mouseY))

    ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
    ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
  Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
    ' permitir otros trabajos
    ' TODO: reparar -> gcd.CurrDrawing.HabilitarBotones

    clsEntities.ClonElements(True) ' let make a copy of them
    ' and now we move
    clsEntities.Move(Me.SelEndXr - Me.SelStartXr, Me.SelEndyr - Me.SelStartYr, True)
    clsEntities.Finish()

    ' UNDO STUFF
    gcd.CurrentDrawing.uUndo.CloseUndoStage()

    Me.Finish

  Endif

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseMove

  If Me.PointsDone = 1 Then
    ' we compare Real values from the starting point to the location
    ' represente by the mouse now, taking account that the drawing
    ' could have being moved by the mouse wheel

    ' new Real position is
    Me.SelEndXr = gcd.Near(gcd.Xreal(mouseX))
    Me.SelEndyr = gcd.Near(gcd.Yreal(mouseY))

    If gcd.Orthogonal Then

      If Abs(Me.SelEndXr - Me.SelStartXr) > Abs(Me.SelEndyr - Me.SelStartYr) Then ' X prevails

        Me.SelEndyr = Me.SelStartYr

      Else

        Me.SelEndXr = Me.SelStartXr

      Endif

    End If

    Me.glTranslate[0] = Me.SelEndXr - Me.SelStartXr
    Me.glTranslate[1] = Me.SelEndyr - Me.SelStartYr
    Me.glTranslate[2] = 0

  End If
  gcd.Redraw

End
