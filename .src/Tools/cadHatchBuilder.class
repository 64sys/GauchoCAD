' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Martin Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "Hatchs"

Public StepsDone As Integer

Public UserResponse As Integer  ' 1 = Cancel ; 2 =
Public entHatch As Entity

Public polyHatchFinal As Polygon
Public polyEntity As Polygon

Public Function Start(Optional filename As Variant, Optional _mode As Integer = 0) As Boolean

  Dim xf As String[]
  Dim f As String
  Dim iREt, nsel As Integer
  Dim eBorder As Entity

  ' desde el grafico entramos siempre a esta parte de la clase
  ' yo tengo q saber el estado de la comunicacion con el user
  ' entonces verifico

  Select Case StepsDone
    Case 0 ' nuevo hatch

      iRet = FHatch.Showmodal()

      Debug gcd.CurrentDrawing.LastHatchFile

      Select Case iRet
        Case 2 ' busqueda de contorno
          gcd.clsJobPrevious = Me
          gcd.clsJob = cadSelection
          StepsDone = 1 ' cuando vuelvo aca, ya tengo un contorno

        Case 1 ' el user cancelo el hetch
          gcd.clsJobPrevious = Me
          gcd.clsJob = cadSelection
          StepsDone = 0 ' cuando vuelvo aca, empiezo de nuevo

      End Select

    Case 1 ' vengo de seleccionar los parametros de hatch

      nSel = clsEntities.GetSelectionCount()
      If nsel = 0 Then Return
      If (gcd.CurrentDrawing.oSelected[gcd.CurrentDrawing.oSelected.First].Gender <> "LWPolyline") And (gcd.CurrentDrawing.oSelected[gcd.CurrentDrawing.oSelected.First].PolyLine.Count < 6) Then
        Message("El contorno esta mal definido")

      Else
        StepsDone = 2
        iRet = FHatch.Showmodal()

        Debug gcd.CurrentDrawing.LastHatchFile

        Select Case iRet
          Case 2 ' nueva busqueda de contorno
            gcd.clsJobPrevious = Me
            gcd.clsJob = cadSelection
            StepsDone = 1 ' cuando vuelvo aca, ya tengo un contorno

          Case 1 ' el user cancelo el hetch
            gcd.clsJobPrevious = Me
            gcd.clsJob = cadSelection
            StepsDone = 0 ' cuando vuelvo aca, empiezo de nuevo

          Case 3 ' confirma el Hatch

            entHatch = cadHatch.NewEntity()
            entHatch.Gender = "Hatch"
            entHatch.ClassHandler = cadHatch

            entHatch.StringData[cadHatch.sdaPattern] = gcd.CurrentDrawing.LastHatchPattern
            entHatch.StringData[cadHatch.sdaPaternFile] = gcd.CurrentDrawing.LastHatchFile

            entHatch.fParam[cadHatch.ipaScale] = gcd.CurrentDrawing.LastScale
            entHatch.fParam[cadHatch.ipaRotation] = gcd.CurrentDrawing.LastAngle

            entHatch.pLayer = gcd.CurrentDrawing.CurrLayer ' "0" 'gcd.GetpLayer(fMain.CurrentLayer)

            entHatch.pBlock = New Block
            entHatch.pBlock.oBoundaryPath = New Boundary[]

            Dim oBound As New Boundary
            entHatch.pBlock.oBoundaryPath.Add(oBound)

            oBound.eSegments = New Entity[]

            For Each eBorder In gcd.CurrentDrawing.oSelected
              Select Case eBorder.Gender  ' veo si me sirve de borde
                Case "Line"

                  oBound.eSegments.Add(eBorder)
                Case "LWPolyline"
                  oBound.eSegments.Add(eBorder)
                Case Else

              End Select

            Next

            gcd.CurrentDrawing.oEntities.Add(entHatch, entHatch.Handle)
            gcd.CurrentDrawing.CurrLayer.Entities.Add(entHatch)
            entHatch.ClassHandler.Finish(entHatch)

            'LastEntity = entHatch                                       ' save it to repeat on rigth click

            gcd.clsJobPrevious = Me
            gcd.clsJob = cadSelection
            cadSelection.PoiChecking = True
            DrawingAids.CleanTexts

            'clsEntities.GLGenDrawList

            gcd.Regen()

        End Select

      Endif

  End Select

End
