' Gambas class file

' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Tool maintained by Terco
Inherits ToolsBase
Create Static
Public Const Gender As String = "Mirror"

Private Radianes As Float
Private KeepOriginal As Boolean
Private glSelectedList As Integer

Public Function Start(Optional ElemToBuild As Variant, Optional _Mode As Integer = 0) As Boolean
  ' Llamada por FCAD al inicio de la aplicacion de esta herramienta

  Dim i As Integer
  ' Aprovechamos para establecer los helpers (comentarios de ayuda en pantalla)
  Me.PointsDone = 0
  Me.PointsTotal = 3

  DrawingAids.HelperTrabajo = ("Mirror") & " "

  ' chequeamos si hubo seleccion previa

  If gcd.CurrentDrawing.oSelected.Count = 0 Then                                     ' we have no elements in the selection

    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Select entities")

    gcd.clsJobPrevious = Me
    gcd.clsJob = clsDefaultJob

  Else                                                                    ' need the first point

    Me.inxSelected.Clear
    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Base point")
    DrawingAids.HelperTrabajo = DrawingAids.HelperTrabajo & Str(gcd.CurrentDrawing.oSelected.Count) & " " & ("elements")

    clsEntities.GLGenDrawListAll(False)
    gcd.Redraw

  Endif
  Me.Active = True
  gcd.ToolActive = True

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer)

  Dim i As Integer, E As Entity

  Inc Me.PointsDone

  If Me.PointsDone = 1 Then ' acabo de marcar el punto base

    ' ya tengo cosas seleccionadas
    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Angle") & " [90]"

    ' punto real base
    Me.SelStartXr = gcd.Near(gcd.Xreal(mousex))
    Me.SelStartYr = gcd.Near(gcd.Yreal(mouseY))

    Me.glTranslate[0] = Me.SelStartXr
    Me.glTranslate[1] = Me.SelStartYr
    Me.glTranslate[2] = 0

    gl.PushMatrix
    gl.NewList(gcd.CurrentDrawing.GlListSelectedEntities, gl.COMPILE)                      ' genero los graficos dentro de la lista
    gl.Translatef(-Me.SelStartXr, -Me.SelStartYr, 0)
    For Each E In gcd.CurrentDrawing.oSelected
      gl.CallList(E.glDrwList)
    Next
    gl.EndList
    gl.PopMatrix

    ' prevenir acciones tontas como hacer click en otro elemento antes de terminar con el actual
    ' TODO: reparar -> gcd.CurrDrawing.DesHabilitarBotones
  Else If Me.PointsDone = 2 Then ' acabo de marcar el punto destino
    '     ' permitir otros trabajos
    '     ' TODO: reparar -> gcd.CurrDrawing.HabilitarBotones
    'Me.SelEndXr = puntos.Near(fMain.Xreal(mousex)
    'Me.SelEndyr = puntos.Near(fMain.Yreal(mouseY))
    DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Keep originals") & " (Y/N)[Y]"
    'Radianes = Ang(Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)
    '
    'Me.Finish()

  Endif

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseMove

  If Me.PointsDone = 1 Then
    '     ' we compare Real values from the starting point to the location
    '     ' represente by the mouse now, taking account that the drawing
    '     ' could have being moved by the mouse wheel
    '
    '     ' new Real position is
    Me.SelEndXr = gcd.Near(gcd.Xreal(mouseX))
    Me.SelEndyr = gcd.Near(gcd.Yreal(mouseY))

    Radianes = 2 * Ang(Me.SelEndXr - Me.SelStartXr, Me.SelEndYr - Me.SelStartYr)

    Me.glAngle = Radianes * 180 / Pi

    Me.glScale[0] = 1
    Me.glScale[1] = -1
    Me.glScale[2] = 1
  End If
  gcd.Redraw

End

Public Function KeyText(EnteredText As String) ' esta rutina es llamada por FCAD en el evento FCAD_KeyPress cuando recibe una texto + <Enter>

  If Me.PointsDone = 1 Then

    If EnteredText = "" Then
      Radianes = 90 / 180 * Pi
      Inc Me.PointsDone

      DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Keep originals") & " (Y/N)[Y]"

    Else
      Radianes = CFloat(EnteredText) / 180 * Pi
      Inc Me.PointsDone
      DrawingAids.Helper.texto = DrawingAids.HelperTrabajo & ": " & ("Keep originals") & " (Y/N)[Y]"
    End If

  Else If Me.PointsDone = 2 Then
    If LCase$(Left$(EnteredText, 1)) = "y" Then
      KeepOriginal = True
      Inc Me.PointsDone
      Me.Finish
    Else If LCase$(Left$(EnteredText, 1)) = "n" Then
      KeepOriginal = False
      Inc Me.PointsDone
      Me.Finish
    Endif

  End If

  ' catch

  DrawingAids.ErrorMessage = ("Bad input")

End

Public Sub Finish()

  Dim i As Integer, ip As Integer, Prot As New Float[]

  If Me.PointsDone = Me.PointsTotal Then

    If KeepOriginal Then clsEntities.ClonElements(True)

    ' en todos los casos, roto los puntos
    clsEntities.Move(-Me.SelStartXr, -Me.SelStartYr, True)
    clsEntities.Scale(1, -1, True)
    clsEntities.Rotate(Radianes, True)
    clsEntities.Move(Me.SelStartXr, Me.SelStartYr, True)

    clsEntities.Finish

  Endif

  gcd.clsJobPrevious = Me
  gcd.clsJob = clsDefaultJob
  DrawingAids.CleanTexts
  clsEntities.DeSelection()
  gcd.regen
  Me.Active = False
  gcd.ToolActive = False

End
