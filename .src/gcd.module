' Gambas module file

' Tool maintained by Terco
' PlantDesigner
' Software para diseño de plantas tipo de hormigon
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
' Gambas class file

' Credits
' --------
' Icon design por Trinh Ho ,Good Ware, freepik get them at https://www.flaticon.es
' Based on an example called MuchosCirculos by JGuardon y MrShell
' XML Load/Save by Tincho

Public PrintingScale As Float '' This is needed by some clases, like Text and MText.
Public ScreenDensity As Float = 1080 / 29.5  '' pixele by cm wich gives a 1:100 scale in my monitor

' Filtros del dibujo
Public DrawOriginals As Boolean = False
Public DrawMarcados As Boolean = True
Public DrawSoloColumnas As Boolean = False
Public DrawBounds As Boolean = False '' ¿Para que sirve esta variable?

Public ScaleLines As Float = 1              '' la uso en Inserts para evitar lineas gordas
Public FormatoCotas As String = "0.00"

Public ColorForSelected As Integer = &H70E000
Public ToolActive As Boolean

Public HookSize As Integer = 16                     '' for use with poi
Public Orthogonal As Boolean = False                '' idem Ortho F8 del CAD
Public OrthogonalForced As Boolean = False
Public OrthogonalIgnored As Boolean = False
Public SnapMode As Integer                          '' Bitwise: -1 Off ; 0 = Nearest; 1 = Endpoint; 2 = midpoint

Public clsJob As Object                             '' what I am doing now, thats either selecting or something else
Public clsJobPrevious As Object                     '' what was doing before
Public clsJobPreZoom As Object                      '' what was doing before Zooming or Panning
Public clsJobPreviousParam As Integer               '' a param to pass to clsJob.Start( param )
Public clsJobCallBack As Object                     '' An object to call back after finishing something (like selecting). Must have .Run() sub

'Public gColor As New Integer[]

Public drwDrawingClass As Integer = 0 '' 0 = Paint, 1 = OpenGL
Public Const drwPaintClass As Integer = 2
Public Const drwOpenGLClass As Integer = 4

Public LoadingFinished As Boolean = False
Public FontList As New String[]                     '' esto deberia estar en otro lado
Public TextureList As New String[]                  '' esto deberia estar en otro lado
Public FileName As String                           '' current work filename

Public ShowInspector As Boolean = False ' TODO: Tincho, agregar a la configuracion y a un Toggle button
'---------------------------------------------------------------
' Point of Interest
Public Const poiEndPoint As Integer = 1
Public Const poiMidPoint As Integer = 2
Public Const poiQuadrant As Integer = 4
Public Const poiTangent As Integer = 8
Public Const poiCenter As Integer = 16
Public Const poiIntersection As Integer = 32
Public Const poiPerpendicular As Integer = 64
Public Const poiNearest As Integer = 128
Public Const poiBasePoint As Integer = 256

' Stipple lines
Public Const stiDashed As Integer = 1

' dim types
Public Const dimRotated As Integer = 0
Public Const dimAligned As Integer = 1
Public Const dimAngular As Integer = 2
Public Const dimDiameter As Integer = 3
Public Const dimRadius As Integer = 4
Public Const dimAngular3point As Integer = 5
Public Const dimOrdinate As Integer = 6
Public Const dimHorizontal As Integer = 7
Public Const dimVertical As Integer = 8

' Entity Flags
Public Const flgDWG_Changed As Integer = 1
Public Const flgDWG_UnChanged As Integer = 2
Public Const flgDWG_Deleted As Integer = 4
Public Const flgGCD_New As Integer = 8
'Public Const flg5 As Integer = 16
'Public Const flg6 As Integer = 32
'Public Const flg7 As Integer = 64
'Public Const flg8 As Integer = 128
'Public Const flg9 As Integer = 256

Public Drawings As New Drawing[]
Public DrawingReady As Boolean = False
Public CurrentDrawing As Drawing

'variables de ambiente
Public flgShowInspector As Boolean = False
Public flgSearchingEntity As Boolean = False  ' impide cuellos de botellla
Public flgSearchingPOI As Boolean
Public flgShowingLayers As Boolean
Public flgNewPosition As Boolean        ' seteada cuando hay un cambio en pan o zoom

Public dirResources As String   '' para compatibilidad con GambasCAD

' 2021 pongo esto por compatibilidad
Public flgWindowBackColor As Integer '= Color.Blac  '' Window backgrount color
Public flgWindowTextColor As Integer   '' Window helper text color
Public flgWindowCursorColor As Integer '' Window cursor color
Public flgWhiteAndBlack As Integer     '' El color blanco/negro siempre sera distinto al
Public flgOnScreenHelpColor As Integer = Color.LightGray    '' Tincho, esta es nueva

' Vars for entities edition
Public arrUndo As New Entity[]             '' An array to put an unmodified copy of an entity before modifying it and then restoring it to the previous version.

Public MainGLArea As Control  ' this is for m-designer compatibility and point to main form GLArea

'' Returns the next available handle
Public Function NewHandle() As String

  Inc currentDrawing.HandSeed             ' esta es la ultima handle utilizada, le sumo 1
  Return Hex(currentDrawing.HandSeed)     ' devuelvo la Hex del numero

End

Public Sub Main()

  MainGLArea = appmain.GLArea1

  Select Starter.flgWindowBackColor
    Case Color.Black
      'Case &1B2224
      Starter.flgWhiteAndBlack = Color.White

    Case Else
      Starter.flgWhiteAndBlack = Color.Black

  End Select
  Dim oLtype As New LType
  gcd.CurrentDrawing.oLTYpes.Add(oLtype, gcd.NewHandle())
  gcd.CurrentDrawing.CurrLineType = oLtype

  Dim oNewLayer As New Layer
  oNewLayer.Visible = True
  gcd.CurrentDrawing.oLayers.Add(oNewLayer, gcd.NewHandle())
  gcd.CurrentDrawing.CurrLayer = oNewLayer

  Dim oDimtyle As New Styles
  gcd.CurrentDrawing.oStyles.Add(oDimtyle, gcd.NewHandle())
  CurrentDrawing.CurrDimStyle = oDimtyle

  ' para compatibilidad
  flgWindowBackColor = Starter.flgWindowBackColor
  flgWindowTextColor = Starter.flgWindowTextColor
  flgWindowCursorColor = Starter.flgWindowCursorColor
  flgWhiteAndBlack = Starter.flgWhiteAndBlack
  flgOnScreenHelpColor = Starter.flgOnScreenHelpColor

  'If WindowBackColor = 0 Then WhiteAndBlack = Color.White Else WhiteAndBlack = Color.Black
  ' ' armo el array de colores
  ' gcolor = DecodeColor()
  '
  ' ' corrijo los colores que no se ven contra el fondo
  ' gcolor[0] = WhiteAndBlack
  ' gcolor[7] = WhiteAndBlack
  ' gcolor[255] = WhiteAndBlack

  ' this is what we are doing now
  clsJob = cadSelection
  clsJob.start()
  clsJobPrevious = cadSelection
  clsJobPreZoom = cadSelection
  clsJobPreviousParam = 0

  'FileName = User.Home &/ "autosaveV5.xml"

  FontList = glPlus.LoadFonts(Starter.sFonts)
  glPlus.SelectFont("romand")

  texturelist = glPlus.LoadTextures(Starter.sTextures)

  Me.DrawingReady = True

  ' Debug Utils.ProcessTabs("Acatbab^Iluego^I123^I2")

End

Public Sub JSONtoBlocks(colData As Collection) ', obxEntities As Entity[]) As Integer

  Dim iTotalEntities As Integer, colent, colBlk As Collection, flxPoints As New Float[], P As Float[]
  Dim hBlock As String
  Dim cEntyList As New Collection
  Dim hEnty As Variant, iEnty As Integer
  Dim cEnty As Variant[]

  If Not colData.Exist("BLOCKS") Then Return
  For Each colBlk In colData["BLOCKS"]
    Dim newBlock As New Block
    hBlock = colBlk["block_entity"][3]
    newBlock.entities = New Collection
    newBlock.name = colBlk["name"]
    If colData["ENTITIES"].Exist(hBlock) Then
      newBlock.handle = colData["ENTITIES"][hBlock]["handle"][1]
      newBlock.layer = colData["ENTITIES"][hBlock]["layer"][3]
    Else If colData["NESTED"].Exist(hBlock) Then
      newBlock.handle = colData["NESTED"][hBlock]["handle"][1]
      newBlock.layer = colData["NESTED"][hBlock]["layer"][3]

    Endif
    If colBlk.Exist("entities") Then
      For Each cEnty In colBlk["entities"]
        hEnty = cEnty[3]
        If colData["NESTED"].Exist(hEnty) Then
          cEntyList.Add(colData["NESTED"][hEnty], hEnty)
        Else If colData["ENTITIES"].Exist(hEnty) Then
          cEntyList.Add(colData["ENTITIES"][hEnty], hEnty)

        End If
      Next
      JSONtoEntity(cEntyList, newBlock.entities)
      cEntyList.Clear

    Else If colBlk.Exist("first_entity") Then
      For iEnty = CInt(colBlk["first_entity"][3]) To CInt(colBlk["last_entity"][3])
        ' pero no se si estan en Nested o en Entities
        hEnty = CStr(iEnty)
        If colData["NESTED"].Exist(hEnty) Then
          cEntyList.Add(colData["NESTED"][hEnty], hEnty)
        Else If colData["ENTITIES"].Exist(hEnty) Then
          cEntyList.Add(colData["ENTITIES"][hEnty], hEnty)

        End If
      Next
      JSONtoEntity(cEntyList, newBlock.entities)
      cEntyList.Clear
    Else

      gcd.debugInfo("Error loading block " & newBlock.name)

    End If
    gcd.CurrentDrawing.oBlocks.Add(newBlock, newBlock.handle)

  Next
  'Stop

End

'' Recibe una coleccion de entidades JSON y devuelve una coleccion de Entity
Public Sub JSONtoEntity(cJsonEntities As Collection, obcEntity As Collection)

  Dim e As Collection               ' current Entity
  Dim entNueva As Entity
  Dim flgIsPolyline, IsDummy As Boolean
  Dim pBlockPolyline As Block

  For Each e In cJsonEntities                                              ' Para cada Coleccion de datos de vrx
    If e.Exist("entity") Then                                     ' es una entidad?
      ' entonces, creamos una nueva
      ' poner en minuscula para anular la entidad
      If InStr("HATCH POLYLINE_2D VERTEX_2D POLYLINE ENDBLK SEQEND VERTEX POINT ATTDEF ATTRIB LINE LWPOLYLINE CIRCLE ELLIPSE ARC TEXT MTEXT SPLINE SOLID INSERT DIMENSION DIMENSION_LINEAR DIMENSION_DIAMETER DIMENSION_RADIUS DIMENSION_ANG3PT DIMENSION_ALIGNED DIMENSION_ORDINATE LARGE_RADIAL_DIMENSION ARC_DIMENSION", UCase(e["entity"])) = 0 Then
        Print "Entidad no implementada:", e["entity"]
      Else

        entNueva = clsEntities.ImportJsonToEntity(e)

        If Not IsNull(entNueva) Then         ' si esta implementada, llenamos los datos

          If flgIsPolyline Then
            pBlockPolyline.entities.Add(entNueva, entNueva.Handle)
          Else
            obcEntity.Add(entNueva, entNueva.Handle)
          End If

          If (e["entity"] = "POLYLINE") Or (e["entity"] = "POLYLINE_2D") Then
            flgIsPolyline = True
            pBlockPolyline = New Block
            pBlockPolyline.entities = New Collection
            gcd.currentDrawing.oPolyLines.Add(pBlockPolyline, entNueva.Handle)
            entNueva.pBlock = pBlockPolyline
          End If
          If e["entity"] = "SEQEND" And flgIsPolyline = True Then
            flgIsPolyline = False
            pBlockPolyline = Null
          End If
          entNueva = Null                                           ' limpiamos

        End If
      End If
    End If
  Next

End

'' Importa las cosas de manera descentralizada
Public Sub DXFtoEntity(cEny As Collection, obx As Collection, Optional NewHandles As Boolean = True)

  Dim e As Collection               ' current Entity
  Dim entNueva As Entity
  Dim flgIsPolyline, IsDummy As Boolean
  Dim pBlockPolyline As Block
  Dim sHandle As String

  For Each e In cEny                                              ' Para cada Coleccion de datos de vrx
    If e.Exist(dxf.codEntity) Then                                     ' es una entidad?
      ' entonces, creamos una nueva
      ' poner en minuscula para anular la entidad
      If InStr("HATCH POLYLINE ENDBLK SEQEND VERTEX POINT ATTDEF ATTRIB LINE LWPOLYLINE CIRCLE ELLIPSE ARC TEXT MTEXT SPLINE SOLID INSERT DIMENSION DIMENSION_LINEAR DIMENSION_DIAMETEr DIMENSION_RADIUs DIMENSION_ANG3Pt DIMENSION_ALIGNED DIMENSION_ORDINATE LARGE_RADIAL_DIMENSION ARC_DIMENSION", UCase(e[dxf.codEntity])) = 0 Then IsDummy = True Else IsDummy = False
      'If UCase(e[dxf.codEntity]) = "INSERT" Then Stop

      entNueva = clsEntities.DXFImportToEntity(e, IsDummy)
      If IsDummy Then
        ' no esta implementada
        Print "Entidad no implementada o con errores:", e[dxf.codHandle], e[dxf.codEntity]

      Else

        If Not IsNull(entNueva) Then         ' si esta implementada, llenamos los datos
          If NewHandles Or (entNueva.Handle = "") Then
            sHandle = Me.NewHandle()
            entNueva.Handle = sHandle
          Else
            sHandle = entNueva.Handle
          End If
          If flgIsPolyline Then
            pBlockPolyline.entities.Add(entNueva, sHandle)
          Else
            obx.Add(entNueva, sHandle)
          End If

          If e[dxf.codEntity] = "POLYLINE" Then
            flgIsPolyline = True
            pBlockPolyline = New Block
            pBlockPolyline.entities = New Entity[]
            gcd.currentDrawing.arrPolyLines.Add(pBlockPolyline)
            entNueva.pBlock = pBlockPolyline
          End If
          If e[dxf.codEntity] = "SEQEND" And flgIsPolyline = True Then
            flgIsPolyline = False
            pBlockPolyline = Null
          End If
          entNueva = Null                                           ' limpiamos

        Endif
      End If
    End If
  Next

End

Public Function GetGBColor(CADcolor As Integer, Optional pLayer As Layer) As Integer

  ' FIXME: reparar post layers
  'Return gcd.flgWhiteAndBlack
  If IsNull(pLayer) Then Return Starter.gColor[CADcolor]
  ' color
  If CADcolor = 256 Then          ' buscar color del layer

    If pLayer Then Return Starter.gColor[player.Colour]
    Return gcd.flgWhiteAndBlack

  Else If CADcolor = 257 Then     ' buscar color del objeto

    Return Starter.gColor[pLayer.Colour]

  Else If CADcolor = 0 Then
    ' buscar color del bloque
    Return Starter.gColor[pLayer.Colour]
  Else

    Return Starter.gColor[CADcolor]

  Endif

End

Public Function UUHandleUnique(d As Drawing) As String

  '5 Entity handle; text string Of up To 16 hexadecimal digits(fixed)
  Inc d.LastHandle
  Return Hex(d.LastHandle, 6)

End

'' Devuelve un handle disponible unico para la coleccion de datos.
Public Function GetNewHandle(c As Collection) As String

  Dim i As Integer, s As String

  i = c.Count
  Try i = CInt(c.Last)
  Do
    Inc i
    s = CStr(i) ' esto podria ser Hex
    If Not c.Exist(s) Then
      Return s
    Endif

  Loop

End

'' Updates the Graphics with the changes in the Model. Can be applied to certain entities only. Forces
'' a Regen if specified.
Public Function UpdateGraphics(Optional handles As String[] = [], DoRegen As Boolean = True)

  Dim cEntity As Collection, entNueva As Entity

  JSONtoLayers()
  JSONtoLTypes()
  JSONtoBlocks(CurrentDrawing.cModel)

  If handles.Count = 0 Then                   ' Update all entities

    gcd.JSONtoEntity(CurrentDrawing.cModel["ENTITIES"], CurrentDrawing.oEntities)

  Else                                        ' Update only entities with handles provided

    For Each sHandle As String In handles

      If CurrentDrawing.cModel["ENTITIES"].Exist(sHandle) Then  ' la actualizo

        entNueva = New Entity                                       ' entonces, creamos una nueva
        If clsEntities.ImportJsonToEntity(CurrentDrawing.cModel["ENTITIES"][sHandle], entNueva) Then         ' si esta implementada, llenamos los datos

          CurrentDrawing.oEntities.Add(entNueva)
          entNueva = Null                                           ' limpiamos

        Endif
      Endif

    Next

  End If

  clsEntities.FillLayersWithEntities(CurrentDrawing)

  If DoRegen Then Regen

End
'' Fuerza a openGL a redibujar

Public Sub redraw()

  appmain.glarea1.Refresh

End

'' Regenera las listas de OpenGL
Public Sub Regen()

  clsEntities.glGenDrawList
  clsEntities.glGenDrawListSel
  redraw

End

'' Pasa los layers de cModel a los graficos
Public Sub JSONtoLayers()

  Dim CMLayer As Collection
  Dim newlayer As Layer

  CurrentDrawing.oLayers.Clear
  For Each CMLayer In CurrentDrawing.cModel["LAYERS"]
    newlayer = New Layer
    If TypeOf(CMLayer["color"]) = gb.Object Then
      newlayer.Colour = CMLayer["color"]["index"]
    Else
      newlayer.Colour = CMLayer["color"]
    Endif
    newlayer.Name = CMLayer["name"]
    newlayer.handle = CMLayer["handle"][1]
    newlayer.id = newlayer.handle
    newlayer.Visible = True
    CurrentDrawing.oLayers.Add(newlayer, newlayer.handle)
  Next
  CurrentDrawing.CurrLayer = CurrentDrawing.oLayers[CurrentDrawing.oLayers.First]

End
'' Convierte una coleccion de Entity en otra de JSON de LibreCAD

Public Sub EntityToJSON(obcEntity As Collection, objJson As Collection)

  Dim ent As Entity
  Dim JSONExporting As Boolean
  Dim jscNewEntity As JSONCollection
  'Dim sNewHandle As String
  Dim iHandle As Integer

  For Each ent In obcEntity

    JSONExporting = False               ' Supongo que la clase todvia no esta lista

    ' Esto puede fallar en caso q no este lista, por eso el Try
    Try JSONExporting = ent.ClassHandler.JSON_Export

    If JSONExporting Then               ' La clase esta lista para crear/editar JSON

      ' Verifico si la entidad ya existe en cModel, o fue creada por el usuario graficamente
      If objJson.Exist(ent.Handle) Then

        ' Ya existe

        ent.ClassHandler.ExportJsonCol(ent, objJson[ent.Handle], False)

      Else
        ' No existe, debemos crear la entrada
        jscNewEntity = New JSONCollection
        'sNewHandle = GetNewHandle(CurrentDrawing.cModel["ENTITIES"])
        iHandle = CurrentDrawing.cModel["AuxHeader"]["HANDSEED"]
        objJson.Add(jscNewEntity, CStr(iHandle + 1))
        ent.Handle = CStr(iHandle + 1) 'sNewHandle

        ' ahora metemos los datos communes
        ' clsEntities.JSON_Export(ent, CurrentDrawing.cModel["ENTITIES"][ent.Handle])

        ' y los datos particulares
        ent.ClassHandler.ExportJsonCol(ent, objJson[ent.Handle], True)

        CurrentDrawing.cModel["AuxHeader"]["HANDSEED"] = iHandle + 1

      End If
    End If

  Next

End

Public Function Xreal(ScreenX As Float) As Float

  Return Metros((screenx - appmain.glarea1.w / 2 - gcd.CurrentDrawing.PanX))

End

Public Function Yreal(ScreenY As Float) As Float

  Return Metros((-ScreenY + appmain.glarea1.h / 2 - gcd.CurrentDrawing.PanY))

End

Public Function Pixels(distancia As Float) As Float  ' converts meters to pixels
  ' transforma Metros en Pixeles sin tener en cuenta el Pan

  Return distancia * gcd.CurrentDrawing.ScaleZoom

End

Public Function Metros(pixeles As Integer) As Float  ' converts pixels to meters

  Return pixeles / gcd.CurrentDrawing.ScaleZoom

End

Public Function Near(xyzReal As Float) As Float
  ' return the nearest point to the grid
  ' this is a world to world points (not pixels)

  ' Example:
  ' if                    GridSpacing = 0.2
  ' we pass               xyzReal = 1.35
  ' function will give    NearReal = 1.40

  Dim n As Integer, r As Float

  If Not appmain.Gridactive Then Return xyzReal

  r = xyzReal / appmain.GridSpacing
  n = Int(r)
  r = r - Int(r)

  If r > 0.5 Then n += 1

  Return n * appmain.GridSpacing

End

'' Reads LTypes collection and puts data in oLTypes
Public Sub JSONtoLTypes()

  Dim hlty As LType
  Dim t, i As Integer
  Dim fTrameLength As Float
  Dim sNextKey As String

  ' primero eliminamos lo q haya
  CurrentDrawing.oLTypes.Clear
  For Each c As JsonCollection In CurrentDrawing.cModel["LTYPES"]
    hlty = New LType
    hlty.Name = c["name"]
    hlty.Description = c["description"]
    hlty.handle = c["handle"][1]
    ' hlty.nTrames = CInt(c["73"])
    ' If hlty.nTrames > 0 Then hlty.Length = c["40"]
    ' i = 0
    ' For t = 1 To hlty.nTrames
    '   Do
    '     If t > 1 Then
    '       sNextKey = "49_" & CStr(i)
    '     Else
    '       sNextKey = "49"
    '     Endif
    '     If c.Exist(sNextKey) Then
    '       Inc i
    '       hlty.TrameLength.Add(Abs(CFloat(c[sNextKey])) * 2.5) ' TODO: verificar este valor arbitrario
    '       If hlty.TrameLength.Last = 0 Then hlty.TrameLength.Last = 1
    '
    '       Break
    '     Endif
    '     Inc i
    '     If i = 1000 Then Return
    '   Loop

    'Next

    CurrentDrawing.oLTypes.Add(hlty, hlty.handle)

  Next
  CurrentDrawing.CurrLineType = CurrentDrawing.oLTypes[CurrentDrawing.oLTypes.First]

End

'' Esta funcion es para compatibilidad entre GauchoCAD y m-designer

Public Function ScreenWidth() As Integer

  Return appmain.GLArea1.W

End
'' Esta funcion es para compatibilidad entre GauchoCAD y m-designer

Public Function ScreenHeight() As Integer

  Return appmain.GLArea1.h

End

Public Function CurrentColor() As Integer

  Return appmain.CurrentColor

End
'' hacia texarea con numero indefinido de parámetros

Public Sub debugInfo(txt As String, Optional MismaLineaAnterior As Boolean = False, Optional forzar As Boolean = False, DebugToFile As Boolean = False)
  ' TODO: para compatibilidad

End
