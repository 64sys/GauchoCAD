' Gambas class file

' Represents a circle
' Element maintained by Terco
' V2
Inherits EntityBase
Public Const GENDER As String = "Ellipse"          
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Draw an ellipse")
Public Const ParamType As String = "PPFAA"
Public Const ParamHelper As String = ("Start point;Major Radious;Minor/Major;Start;End")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ;  ;1;0;360"

' vars creadas en finish
Public start As Float
Public recorrido As Float

Public Sub Draw()
     If Not Me.DrawAble Or Not Me.Visible Then Return
    If Me.Selected And Not modCAD.ToolActive Then Me.ColorToPaint = modCAD.ColorForSelected Else Me.ColorToPaint = Me.gbColor
      
    
    Dim major, minor, angle, la As Float
    
    major = Sqr(Me.p[2] * Me.p[2] + Me.p[3] * Me.p[3])
    Minor = major * Me.fParam[0]
    angle = Ang(Me.p[2], Me.p[3])
    If major = 0 Then major = 1
    
    If modCAD.drwDrawingClass = modCAD.drwPaintClass Then
        
    
            paint.Save
            If Me.flxDash Then paint.Dash = Me.flxDash
            If Me.Selected And Not modCAD.ToolActive Then
                paint.brush = Paint.Color(modCAD.ColorForSelected)
            Else
                paint.brush = Paint.Color(Me.ColorToPaint)
            Endif
            
            
            paint.Translate(Me.p[0], Me.p[1])
            paint.Rotate(-angle)
            Paint.Scale(1, Minor / major)
            paint.LineWidth = Me.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines
            paint.arc(0, 0, major, Me.start, Me.recorrido)
            paint.Stroke
            paint.Restore
    End If            
    
    If modCAD.drwDrawingClass = modCAD.drwOpenGLClass Then
        gl.PushMatrix
        gl.Translatef(Me.p[0], Me.p[1], 0)
        gl.Rotatef(angle * 180 / Pi, 0, 0, 1)
        gl.Scalef(1, Minor / major, 1)
        GLplus.arc(major, Me.start, Me.recorrido, Me.ColorToPaint, Me.LineWidth)
        gl.PopMatrix

    Endif
    
    
 
End



'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI() As Integer

 
    Dim I, poiCount As Integer, RotPoints As New Float[]
    
    Me.MyPoi.Clear
    
    ' la ellipse tiene 5 puntos de interes
    ' centro
    Me.MyPoi.Insert([Me.p[0], Me.p[1]])
    
    rotpoints.Insert(puntos.RotateFromPointWithAngle(Me.p[0], Me.p[1], Me.fParam[2] / 180 * Pi, Me.p[0] - Me.fParam[0], Me.p[1]))
    Me.MyPoi.Insert(rotpoints)
    
    rotpoints.Insert(puntos.RotateFromPointWithAngle(Me.p[0], Me.p[1], Me.fParam[2] / 180 * Pi, Me.p[0] + Me.fParam[0], Me.p[1]))
    Me.MyPoi.Insert(rotpoints)
    
    rotpoints.Insert(puntos.RotateFromPointWithAngle(Me.p[0], Me.p[1], Me.fParam[2] / 180 * Pi, Me.p[0], Me.p[1] - Me.fParam[0] * Abs(Me.fParam[1] / Me.fParam[0])))
    Me.MyPoi.Insert(rotpoints)
    
    rotpoints.Insert(puntos.RotateFromPointWithAngle(Me.p[0], Me.p[1], Me.fParam[2] / 180 * Pi, Me.p[0], Me.p[1] + Me.fParam[0] * Abs(Me.fParam[1] / Me.fParam[0])))
    Me.MyPoi.Insert(rotpoints)
    
    
    Return Me.MyPoi.Count / 2
End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(ParamsDone As Integer) As Boolean

    ' calculo el recorrido del arco como
    ' OJO en la ELLIPSE vienen en radianes, y en ARC en grados
    Me.start = Me.fParam[1] 
    Me.recorrido = Me.fParam[2] - Me.fParam[1]
    If Me.recorrido < 0 Then Me.recorrido = 2 * Pi + Me.recorrido
    Me.recorrido = Me.recorrido 
    
    
    
    'CreateBoundingPoligon
    
     ' tareas finales de armado del objeto
    Me.b.resize(Me.P.count)
    Me.psel.resize(Me.p.count / 2)
    Me.ForDeletion = False
    Me.DrawAble = True
    Me.Selected = False
    Me.Finished = True

    If Not True Then

        Me.ForDeletion = True
        Me.DrawAble = False

    End If

End
