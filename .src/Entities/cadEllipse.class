' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast

Public Const Gender As String = "Ellipse"
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Draw an ellipse")
Public Const ParamType As String = "PPFFF"
Public Const ParamHelper As String = ("Start point;Major Radious;Minor/Major;Start;End")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ;  ;0.5;0;360"
Public Const USEWITH As String = "clsEntityBuilder"
Public Const DrawingOrder As Integer = 0        ' 1 = draws first
Public Const OrtogonalIgnorado As Boolean = False
Public Const OrtogonalForzado As Boolean = False
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

' vars creadas en finish
Public start As Float
Public recorrido As Float
Public angle As Float

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return
    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)

    Dim major, minor, la As Float

    major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
    angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro
    If Not oE.Finished Then
        If oE.stepsdone < 2 Then
            oE.fParam[0] = 0.5
            Me.start = 0
            Me.recorrido = 2 * Pi
            Minor = major * oE.fParam[0]
        Else If oE.stepsdone < 3 Then
            Minor = major * oE.fParam[0]
            'If oE.fParam[0] > major Then oE.fParam[0] = major
            'Minor = oE.fParam[0]

        Endif
    Endif
    Minor = major * oE.fParam[0]
    If major = 0 Then major = 1

    Dim x, y, theta, angle_increment As Float
    Dim i As Integer

    Me.start = oE.fParam[1] * Pi / 180
    Me.recorrido = oE.fParam[2] * Pi / 180 - Me.start
    If Me.recorrido < 0 Then Me.recorrido = 2 * Pi + Me.recorrido

    oE.PolyLine.Clear
    GL.Begin(gl.LINE_STRIP)

    angle_increment = Pi * 2 / 360
    For theta = 0 To Me.recorrido Step angle_increment
        ' el punto considerando 0,0 al centro
        x = major * Cos(Me.start + theta) * Cos(angle) - minor * Sin(Me.start + theta) * Sin(angle)
        y = major * Cos(Me.start + theta) * Sin(angle) + minor * Sin(Me.start + theta) * Cos(angle)
        oE.PolyLine.Add(x + oE.p[0])
        oE.PolyLine.Add(y + oE.p[1])

        'GLplus.Vertex2D(radio * Cos(start_angle + theta), radio * Sin(start_angle + theta), colour)
    Next

    ' ' aplico las trnasformaciones
    ' puntos.Scale(oE.PolyLine, 1, minor / major)
    ' puntos.Rotate(oE.PolyLine, angle)
    'puntos.Translate(oE.PolyLine, oE.p[0], oE.p[1])
    'For i = 0 To oE.PolyLine.max Step 2
    '    GLplus.Vertex2D(oE.PolyLine[i], oE.PolyLine[i + 1], oE.ColorToPaint)
    'Next

    GL.End
    GLplus.PolyLines(oE.PolyLine, oE.ColorToPaint, oe.LineWidth, oe.LineType)

    ' For i = 0 To oE.PolyLine.max Step 2
    '     GLplus.Vertex2D(oE.PolyLine[i], oE.PolyLine[i + 1], oE.ColorToPaint)
    ' Next

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

    GLplus.PolyLines(oE.PolyLine, modCAD.WindowBackColor, oE.LineWidth, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)

End

Public Function Draw2(oE As Entity)

    If Not oE.Visible Then Return

    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)

    Dim major, minor, la As Float

    major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
    angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro
    If Not oE.Finished Then
        If oE.stepsdone < 2 Then
            oE.fParam[0] = 0.5
            Me.start = 0
            Me.recorrido = 2 * Pi
            Minor = major * oE.fParam[0]
        Else If oE.stepsdone < 3 Then
            Minor = major * oE.fParam[0]
            'If oE.fParam[0] > major Then oE.fParam[0] = major
            'Minor = oE.fParam[0]

        Endif
    Endif
    Minor = major * oE.fParam[0]
    If major = 0 Then major = 1

    paint.Save
    If oE.flxDash Then paint.Dash = oE.flxDash

    paint.brush = Paint.Color(oE.ColorToPaint)

    paint.Translate(oE.p[0], oE.p[1])
    paint.Rotate(-angle)
    Paint.Scale(1, Minor / major)
    paint.LineWidth = oE.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines
    paint.arc(0, 0, major, oE.start, oE.recorrido)
    paint.Stroke
    paint.Restore

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity, ParamsDone As Integer) As Boolean

    ' calculo el recorrido del arco como
    ' OJO en la ELLIPSE vienen en radianes, y en ARC en grados

    'CreatePolygon

    ' tareas finales de armado del objeto
    oE.b.resize(oE.P.count)
    oE.psel.resize(oE.p.count / 2)
    oE.ForDeletion = False
    oE.DrawAble = True
    oE.Selected = False
    oE.Finished = True

    If Not True Then

        oE.ForDeletion = True
        oE.DrawAble = False

    End If

End
