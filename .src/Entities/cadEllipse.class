' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Fast
Inherits EntityBase
Public Const GENDER As String = "Ellipse"
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Draw an ellipse")
Public Const ParamType As String = "PPFFF"
Public Const ParamHelper As String = ("Start point;Major Radious;Minor/Major;Start;End")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ;  ;0.5;0;360"

' vars creadas en finish
Public start As Float
Public recorrido As Float
Public angle As Float

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return
    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)

    Dim major, minor, la As Float

    major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
    angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro
    If Not oE.Finished Then
        If oE.stepsdone < 2 Then
            oE.fParam[0] = 0.5
            Me.start = 0
            Me.recorrido = 2 * Pi
            Minor = major * oE.fParam[0]
        Else If oE.stepsdone < 3 Then
            Minor = major * oE.fParam[0]
            'If oE.fParam[0] > major Then oE.fParam[0] = major
            'Minor = oE.fParam[0]

        Endif
    Endif
    Minor = major * oE.fParam[0]
    If major = 0 Then major = 1

    Dim x, y, theta, angle_increment As Float
    Dim i As Integer

    Me.start = oE.fParam[1] * Pi / 180
    Me.recorrido = oE.fParam[2] * Pi / 180 - Me.start
    If Me.recorrido < 0 Then Me.recorrido = 2 * Pi + Me.recorrido

    oE.BoundingPoligon.Clear
    GL.Begin(gl.LINE_STRIP)

    angle_increment = Pi * 2 / 360
    For theta = 0 To Me.recorrido Step angle_increment
        ' el punto considerando 0,0 al centro
        x = major * Cos(Me.start + theta)
        y = major * Sin(Me.start + theta)
        oE.BoundingPoligon.Add(x)
        oE.BoundingPoligon.Add(y)

        'GLplus.Vertex2D(radio * Cos(start_angle + theta), radio * Sin(start_angle + theta), colour)
    Next

    ' aplico las trnasformaciones
    puntos.Scale(oE.BoundingPoligon, 1, minor / major)
    puntos.Rotate(oE.BoundingPoligon, angle)
    puntos.Translate(oE.BoundingPoligon, oE.p[0], oE.p[1])
    For i = 0 To oE.BoundingPoligon.max Step 2
        GLplus.Vertex2D(oE.BoundingPoligon[i], oE.BoundingPoligon[i + 1], oE.ColorToPaint)
    Next

    GL.End

End

Public Function Draw2(oE As Entity)

    If Not oE.Visible Then Return

    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)

    Dim major, minor, la As Float

    major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
    angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro
    If Not oE.Finished Then
        If oE.stepsdone < 2 Then
            oE.fParam[0] = 0.5
            Me.start = 0
            Me.recorrido = 2 * Pi
            Minor = major * oE.fParam[0]
        Else If oE.stepsdone < 3 Then
            Minor = major * oE.fParam[0]
            'If oE.fParam[0] > major Then oE.fParam[0] = major
            'Minor = oE.fParam[0]

        Endif
    Endif
    Minor = major * oE.fParam[0]
    If major = 0 Then major = 1

    paint.Save
    If oE.flxDash Then paint.Dash = oE.flxDash

    paint.brush = Paint.Color(oE.ColorToPaint)

    paint.Translate(oE.p[0], oE.p[1])
    paint.Rotate(-angle)
    Paint.Scale(1, Minor / major)
    paint.LineWidth = oE.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines
    paint.arc(0, 0, major, oE.start, oE.recorrido)
    paint.Stroke
    paint.Restore

End

'' Devuelve [x,y] punto de interes
Public Function AboveMe(oE As Entity, Xreal As Float, Yreal As Float, tolerance As Float, mode As Integer, fData As Float[]) As Boolean
    ' si una de las dos lineas de una cruz con centro en X,Y y largo Tolerance cruza la linea, estamos arriba

    Dim i As Integer
    Dim fDist1, fDist2, fDist3, fDist4 As Float
    'TODO: para debug, agrego esto
    mode = 1 + 2 ' endpoint+midpoint

    fData.Clear
    For i = 0 To oE.BoundingPoligon.count - 4 Step 2
        If puntos.doIntersect(xreal - tolerance / 2, Yreal, Xreal + tolerance / 2, Yreal, oE.BoundingPoligon[i + 0], oE.BoundingPoligon[i + 1], oE.BoundingPoligon[i + 2], oE.BoundingPoligon[i + 3]) Or puntos.doIntersect(xreal, Yreal - tolerance / 2, Xreal, Yreal + tolerance / 2, oE.BoundingPoligon[i + 0], oE.BoundingPoligon[i + 1], oE.BoundingPoligon[i + 2], oE.BoundingPoligon[i + 3]) Then ' its above me

            ' busco el punto exacto en la linea donde se produce la interseccion
            fData.Insert(puntos.lineLineIntersection([xreal - tolerance / 2, Yreal], [Xreal + tolerance / 2, Yreal], [oE.BoundingPoligon[i + 0], oE.BoundingPoligon[i + 1]], [oE.BoundingPoligon[i + 2], oE.BoundingPoligon[i + 3]]))
            ' veo que punto esta mas cerca
            fDist1 = puntos.distancia(oE.BoundingPoligon[i + 0], oE.BoundingPoligon[i + 1], fData[0], fData[1])   ' end 1
            fDist2 = puntos.distancia((oE.BoundingPoligon[i + 0] + oE.BoundingPoligon[i + 2]) / 2, (oE.BoundingPoligon[i + 1] + oE.BoundingPoligon[i + 3]) / 2, fData[0], fData[1])   ' mid
            fDist3 = puntos.distancia(oE.BoundingPoligon[i + 2], oE.BoundingPoligon[i + 3], fData[0], fData[1])   ' end 2
            If fdist1 > fdist2 Then
                If fDist2 > fDist3 Then         ' End 2
                    fData[0] = oE.BoundingPoligon[i + 2]
                    fData[1] = oE.BoundingPoligon[i + 3]
                    fData.Add(1)                 ' 1 = EndPoint
                    Return True
                Else
                    fData[0] = (oE.BoundingPoligon[i + 0] + oE.BoundingPoligon[i + 2]) / 2
                    fData[1] = (oE.BoundingPoligon[i + 1] + oE.BoundingPoligon[i + 3]) / 2
                    fData.Add(2)                 ' 2 = MidPoint
                    Return True
                Endif
            Else
                fData[0] = oE.BoundingPoligon[i + 0]
                fData[1] = oE.BoundingPoligon[i + 1]
                fData.Add(1)                     ' 1 = EndPoint
                Return True

            Endif

        Endif
    Next

    Return False

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity, ParamsDone As Integer) As Boolean

    ' calculo el recorrido del arco como
    ' OJO en la ELLIPSE vienen en radianes, y en ARC en grados

    'CreateBoundingPoligon

    ' tareas finales de armado del objeto
    oE.b.resize(oE.P.count)
    oE.psel.resize(oE.p.count / 2)
    oE.ForDeletion = False
    oE.DrawAble = True
    oE.Selected = False
    oE.Finished = True

    If Not True Then

        oE.ForDeletion = True
        oE.DrawAble = False

    End If

End
