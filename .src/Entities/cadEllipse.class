' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast

Public Const Gender As String = "Ellipse"
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Draw an ellipse")
Public Const ParamType As String = "PPFFF"
Public Const ParamHelper As String = "Start point;Major Radious;Minor/Major;Start;End"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ;  ;0.5;0;360"
Public Const USEWITH As String = "clsEntityBuilder"
Public Const DrawingOrder As Integer = 0        ' 1 = draws first
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

' vars creadas en finish
Public start As Float
Public recorrido As Float
Public angle As Float

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  Dim i As Integer

  If OnlySelected Then

    For i = 0 To e.Psel.Max
      If e.Psel[i] Then

        e.P[i * 2] += dx
        e.P[i * 2 + 1] += dy

      Endif
    Next

  Else

    puntos.Translate(e.p, dx, dy)
  Endif

End

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.p, radians)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX

    e.P[i + 1] = e.P[i + 1] * sY

  Next

  ' start/end
  If sx < 0 Then
    E.fParam[1] = 360 - E.fParam[1]
    E.fParam[2] = 360 - E.fParam[2]
    Swap e.fParam[1], e.fParam[2]
    If E.fParam[2] < E.fParam[1] Then E.fParam[2] += 360

  Endif

  If sy < 0 Then
    E.fParam[1] = 360 - E.fParam[1]
    E.fParam[2] = 360 - E.fParam[2]
    Swap e.fParam[1], e.fParam[2]
    If E.fParam[2] < E.fParam[1] Then E.fParam[2] += 360
  Endif

End

Public Sub Draw(oE As Entity)

  Dim x, y, theta, angle_increment As Float
  Dim i As Integer
  Dim major, minor, la As Float

  If Not oE.Visible Then Return

  major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
  angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro
  If Not oE.Finished Then

    If Me.StepsDone = 1 Then
      oE.fParam[0] = 0.5
      oE.fParam[1] = 0
      oE.fParam[2] = 360

    Else If Me.StepsDone = 2 Then
      ' despues de definir el eje mayor

    Else If Me.StepsDone = 3 Then
      ' defino la relacion entre ejes

    Else If Me.StepsDone = 4 Then

    Else If Me.StepsDone = 5 Then

    Endif
  Endif

  Minor = major * oE.fParam[0]
  If major = 0 Then major = 1

  oE.PolyLine.Clear
  angle_increment = Pi * 2 / 360 '* oe.fParam[3]
  For theta = oE.fParam[1] / 180 * Pi To oE.fParam[2] / 180 * Pi Step angle_increment
    ' el punto considerando 0,0 al centro
    x = major * Cos(theta) * Cos(angle) - minor * Sin(theta) * Sin(angle)
    y = major * Cos(theta) * Sin(angle) + minor * Sin(theta) * Cos(angle)
    oE.PolyLine.Add(x + oE.p[0])
    oE.PolyLine.Add(y + oE.p[1])

  Next

  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.Layerid)
  GLplus.PolyLines(oE.PolyLine, oE.ColorToPaint, oe.LineWidth, oe.LineType)

End

'' A fat version of the entity
Public Sub DrawSelected(oE As Entity)

  GLplus.PolyLines(oE.PolyLine, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.PolyLine, gcd.ColorForSelected, oE.LineWidth, oE.LineType)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

  '  GLplus.PolyLines(oE.PolyLine, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  '  GLplus.PolyLines(oE.PolyLine, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)
  If oe.Selected Then
    GLplus.PolyLines(oE.PolyLine, Starter.flgWindowBackColor, oE.LineWidth + 2, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, gcd.ColorForSelected, oE.LineWidth + 2, oE.LineType)
  Else
    GLplus.PolyLines(oE.PolyLine, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)
  Endif

End

Public Function Draw2(oE As Entity)

  If Not oE.Visible Then Return

  Dim major, minor, la As Float

  major = Sqr((oE.p[2] - oE.p[0]) ^ 2 + (oE.p[3] - oE.p[1]) ^ 2)
  angle = Ang(oE.p[2] - oE.p[0], oE.p[3] - oE.p[1])          ' Los coordenadas del eje mayor son relativas al centro
  If Not oE.Finished Then
    If Me.StepsDone < 2 Then
      oE.fParam[0] = 0.5
      Me.start = 0
      Me.recorrido = 2 * Pi
      Minor = major * oE.fParam[0]
    Else If Me.StepsDone < 3 Then
      Minor = major * oE.fParam[0]
      'If oE.fParam[0] > major Then oE.fParam[0] = major
      'Minor = oE.fParam[0]

    Endif
  Endif
  Minor = major * oE.fParam[0]
  If major = 0 Then major = 1

  paint.Save

  paint.brush = Paint.Color(oE.ColorToPaint)

  paint.Translate(oE.p[0], oE.p[1])
  paint.Rotate(-angle)
  Paint.Scale(1, Minor / major)
  paint.LineWidth = oE.LineWidth / gcd.CurrentDrawing.ScaleZoom / gcd.ScaleLines
  paint.arc(0, 0, major, Me.start, Me.recorrido)
  paint.Stroke
  paint.Restore

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity, Optional ParamsDone As Integer = -1) As Boolean

  ' calculo el recorrido del arco como
  ' OJO en la ELLIPSE vienen en radianes, y en ARC en grados

  'CreatePolygon

  ' tareas finales de armado del objeto

  oE.psel.resize(oE.p.count / 2)
  oE.ForDeletion = False
  oE.DrawAble = True
  oE.Selected = False
  oE.Finished = True

  If oE.fParam[2] < oE.fParam[1] Then oE.fParam[2] += 360

  If Not True Then

    oE.ForDeletion = True
    oE.DrawAble = False

  End If

End

' "entity": "ELLIPSE",
' "index": 2361,
' "type": 35,
' "handle": [0, 1182054],
' "size": 69,
' "bitsize": 508,
' "ownerhandle": [12, 1, 63, 1181991],
' "_subclass": "AcDbEntity",
' "layer": [5, 1, 16, 16],
' "preview_exists": 0,
' "entmode": 0,
' "nolinks": 1,
' "color": 256,
' "ltype_scale": 1.0,
' "ltype_flags": 0,
' "plotstyle_flags": 0,
' "invisible": 0,
' "linewt": 29,
' "_subclass": "AcDbEllipse",
' "center": [7009.61831681532385, 2976.85246778371811, 0.0],
' "sm_axis": [0.0, 49.45738929978734, 0.0],
' "extrusion": [0.0, 0.0, 1.0],
' "axis_ratio": 0.49999997319111,
' "start_angle": 4.64635013554486,
' "end_angle": 7.92002047881431