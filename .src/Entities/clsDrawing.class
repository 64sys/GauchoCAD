' Gambas class file

' Tool maintained by Terco
' PlantDesigner
' Software para diseÃ±o de plantas tipo de hormigon
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
' Gambas class file

' Credits
' --------
' Icon design por Trinh Ho ,Good Ware, freepik get them at https://www.flaticon.es
' Scheme inspired on example called MuchosCirculos by JGuardon y Shell
' XML Load/Save by Tincho
' GUI by Postpase/Tincho

Public KeysAccumulator As String
Public FirstTime As Boolean = True
Public DrawingReady As Boolean = False
Public DrawNeedsUpdate As Boolean                   '' true on mouse, key or tool events
Public TimerTic As Integer = 0                      '' this reaches 1024 and then zeroes, at 33Hz
Public nDraws As Integer
Public nDrawsRequired As Integer
Public idDrawing As Integer

' vars particulares de cada dibujo

Public FileName As String
Public PanX As Integer = 0              '' trnaslation of th 0,0 from the corner of the drawing area
Public PanY As Integer = 0              '' in pixels
Public ScaleZoom As Float
Public Propiedadtest As String
'-----------------------------------
Public cModel As New Collection     '' ALl data from a GauchoCAD xml file is loaded here
Public cImport As New Collection    '' Impor data from dxf, dwg is loaded here

Public Struct arrBlockSt
  name As String
  x As Float
  y As Float
  scaleX As Float
  scaleY As Float
  degRotation As Float
  mirrored As Boolean
  layer As String
  entities As Entity[]
End Struct

Public LastHatch As Integer
Public LastHatchFile As String
Public LastHatchPattern As String
Public LastScale As Float
Public LastAngle As Float

Public arrExtras As New Entity[]          ' For entities
Public arrBlocks As New ArrBlockSt[]
Public arrEntities As New Entity[]             '' were al elements live
Public arrTmp As New Entity[]             '' Temporal array to put a copy of an entity before change something in it
Public arrUndo As New Entity[]             '' An array to put an unmodified copy of an entity before modifying it and then restoring it to the previous version.

Public arrSelecIndex As New Integer[]          '' indice en el array de entidades

Public Xmenor As Float = 1E100
Public Xmayor As Float = -1E100
Public Ymenor As Float = 1E100
Public Ymayor As Float = -1E100

' point of interests, lines, areas and entities: all this is generated n the entity creation
Public poiPoints As New Float[]                 '' xy pairs of points
Public poiType As New Integer[]                 '' tipe of poi: End, Mid, Quadrant, Tangent
Public poiEntities As New Integer[]             '' related entity

Public poiLines As New Float[]                  '' x0y0x1y1 points
Public poiLinesEntities As New Integer[]        '' related entity

Public poiPoligons As New Float[]               '' this define multiple poligons to search for proximity
Public poiPoligonStartIndex As New Integer[]
Public poiPoligonElements As New Integer[]
Public poiPoligonEntities As New Integer[]      '' related entity

' interaccion del mouse en pantalla
Public LastPoint As New Float[]                '' ultimo punto marcado o null si no existe
Public iEntity As New Single[]             '' las coordenadas del punto encontrado y el tipo de punto
Public flgShowPOIinfo As Boolean = True
Public EntitySearchMode As Integer = 0  ' 0 = no search; 1 = search entity ; 2 = search POI

' OpenGl stuff
Public GlListAllEntities As Integer
Public GlListSelectedEntities As Integer

Public Sub _new()

  iEntity.Insert([0, 0, -1, -1])
  ScaleZoom = gcd.ScreenDensity

End

Public Sub EntitiesTransfer2()

  Dim iEnt As Collection
  Dim mEnt As Collection
  Dim grp As Collection
  Dim e As Variant
  Dim mGrp As Collection

  If cImport.Count > 0 Then
    If cImport.Exist("Entities") Then
      iEnt = cImport["Entities"]
      If cModel.Exist("Entities") Then
        mEnt = cModel["Entities"]

        For Each grp In iEnt
          If mEnt.Exist(iEnt.Key) = False Then
            mEnt.Add(grp.Copy(), iEnt.Key)
          Else
            mGrp = mEnt[iEnt.Key]
            For Each e In grp
              mGrp.Add(e, grp.Key)
            Next

          Endif

        Next

      Endif
    Endif
  Endif

End

Public Sub BlocksTransfer()

  Dim iEnt As Collection
  Dim mEnt As Collection
  Dim grp As Collection
  Dim e As Variant
  Dim mGrp As Collection

  If cImport.Count > 0 Then
    If cImport.Exist("Blocks") Then
      iEnt = cImport["Blocks"]
      If cModel.Exist("Blocks") Then
        mEnt = cModel["Blocks"]

        For Each grp In iEnt
          If mEnt.Exist(iEnt.Key) = False Then
            mEnt.Add(grp.Copy(), iEnt.Key)
          Else
            mGrp = mEnt[iEnt.Key]
            For Each e In grp
              mGrp.Add(e, grp.Key)
            Next

          Endif

        Next
      Else

        cModel.Add(iEnt.Copy(), "Blocks")

      Endif
    Endif
  Endif

End

'' This transfer layers from imported file, one collection actually, to the model collection

Public Sub LayersTransfer()

  Dim tLay As New Collection
  Dim i As Integer
  Dim il As Variant
  Dim ml As Variant
  Dim prop As String
  Dim iLay As Collection
  Dim mLay As Collection
  Dim r As Integer

  If cImport.Count > 0 Then
    If cImport.Exist("Layers") Then
      iLay = cImport["Layers"]
      If cModel.Exist("Layers") Then
        mLay = cModel["Layers"]

        For Each il In iLay
          r = 0
          For Each ml In mLay
            If ml["name"] = il["name"] Then
              r = -1
              Break
            Else
              Inc r
            Endif
          Next

          If r > -1 Then
            tLay.Add(Format(r, "0"), "id")
            tLay.Add("layer", "type")
            For Each prop In ["name", "show", "frozen", "locked", "colour", "style", "width", "print"]
              tLay.Add(il[prop], prop)
            Next
            mLay.Add(tLay.copy(), Format(r, "0"))
            tLay.Clear
          Endif

        Next
      Else
        For Each il In iLay
          tLay.Add(Format(i, "0"), "id")
          tLay.Add("layer", "type")

          For Each prop In ["name", "show", "frozen", "locked", "colour", "style", "width", "print"]
            tLay.Add(iLay[prop], prop)
          Next

          mLay.Add(tLay.copy(), Format(i, "0"))
          tLay.Clear
          Inc i
        Next
      Endif
    Endif
  Endif

End
