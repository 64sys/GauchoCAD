' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static

'Fast
Inherits EntityBase

Public Const Gender As String = "Circle"
Public Const HelperTrabajo As String = ("Draw a circle")
Public Const ParamType As String = "PL"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;Radious"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 1 "
Public Const TotalParams As Integer = 1

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  Dim f As Float
  Dim ip As Integer

  If Me.StepsDone = 0 Then

    If vParam[0] <> "point" Then Return False
    Try eBuild.P[0] = vParam[1]
    Try eBuild.P[1] = vParam[2]

    If definitive Then
      eBuild.fParam.Add(0)
      Return True
    End If
  Else If Me.StepsDone = 1 Then

    If vParam[0] <> "float" Then Return False

    eBuild.fParam[0] = vParam[1]

    If definitive Then Return True

  End If

  Return False

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  E.fParam[0] *= sX

  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX

    e.P[i + 1] = e.P[i + 1] * sY

  Next

End

Public Sub Draw(oE As Entity)

  If Not oE.Visible Then Return

  'gl.End

  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.pLayer)

  glPlus.Circle(oE.p, oe.fParam[0], oe.ColorToPaint, False, oE.LineWidth, oE.LineType.index)

End

Public Sub makepolyline(oe As Entity, Optional density As Integer = 36)

  Dim x, y, theta, angle_increment As Float

  oE.polyline.Clear
  'GL.Begin(gl.LINE_STRIP)
  angle_increment = Pi * 2 / 360 * density
  For theta = 0 To 2 * Pi Step angle_increment
    ' el punto considerando 0,0 al centro
    x = oE.p[0] + oE.fParam[0] * Cos(theta)
    y = oE.p[1] + oE.fParam[0] * Sin(theta)
    oE.polyline.Add(x)
    oE.polyline.Add(y)

  Next

End
'' A fat version of the entity

Public Sub DrawSelected(oE As Entity)

  GLplus.PolyLines(oE.PolyLine, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.PolyLine, gcd.ColorForSelected, oE.LineWidth, oE.LineType.index)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

  If oe.Selected Then
    GLplus.PolyLines(oE.PolyLine, gcd.flgWindowBackColor, oE.LineWidth + 2, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, gcd.ColorForSelected, oE.LineWidth + 2, oe.linetype.index)
  Else
    GLplus.PolyLines(oE.PolyLine, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, oE.ColorToPaint, oE.LineWidth + 2, oe.linetype.index)
  Endif

End

Public Function Draw2(oE As Entity)

  If gcd.UseCairo Then

    cairo.Arc(oE.p[0], oE.p[1], oE.fParam[0])

    cairo.Stroke
  Else
    paint.Arc(oE.p[0], oE.p[1], oE.fParam[0])

    paint.Stroke
  End If

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

  oe.PoiPoints.Clear
  oe.PoiType.Clear
  oe.Polygon.Clear

  ' CENTER
  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiCenter)

  ' quadrant
  oe.poiPoints.insert([oE.p[0] + oe.fParam[0], oE.p[1]])
  oe.poiType.Add(gcd.poiQuadrant)

  ' quadrant
  oe.poiPoints.insert([oE.p[0] - oe.fParam[0], oE.p[1]])
  oe.poiType.Add(gcd.poiQuadrant)

  ' quadrant
  oe.poiPoints.insert([oE.p[0], oE.p[1] + oe.fParam[0]])
  oe.poiType.Add(gcd.poiQuadrant)

  ' quadrant
  oe.poiPoints.insert([oE.p[0], oE.p[1] - oe.fParam[0]])
  oe.poiType.Add(gcd.poiQuadrant)

  oe.Polygon.Insert(oe.PoiPoints)

End
' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it

Public Sub Finish(oE As Entity) As Boolean

  'Print "Finish en EntityBase"
  'CreatePolygon(oe)
  '  BuildPOI(oe)

  ' busco el tipo de linea, si hace falta

  ' tareas finales de armado del objeto
  Me.makepolyline(oe)

  oE.psel.resize(oE.p.count / 2)

  oE.Selected = False

End

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

  cExport.Add("CIRCLE", dxf.codEntity)
  clsEntities.DXFExportCommonCol(e, cExport)
  cExport.Add("AcDbCircle", "100")
  cExport.Add(CStr(e.p[0]), dxf.codCenterX)
  cExport.Add(CStr(e.p[1]), dxf.codCenterY)
  cExport.Add(CStr(e.fParam[0]), dxf.codRadius)

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer

  e.P.Clear
  For i = 0 To sClaves.Max
    If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "40" Then e.fParam[0] = (CFloat(sValues[i]))
  Next

  If e.fParam.Count = 0 Then Stop ' e.fParam.Add(0)  ' TODO: averiguar q pasa aca q algunas entidades CIRCLE
  ' vienen sin el radio

  Return True

  ' catch

  Return False

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

  e.P.Clear
  e.fParam.Clear
  e.P.Add(c["center"][0])
  e.P.Add(c["center"][1])
  e.fParam.Add(c["radius"])

  Return True

Catch

  Return False

End
'    "entity": "CIRCLE",
'    "index": 401,
'    "type": 18,
'    "handle": [0, 254702],
'    "size": 44,
'    "bitsize": 302,
'    "ownerhandle": [12, 1, 9, 254693],
'    "_subclass": "AcDbEntity",
'    "layer": [5, 2, 16846, 16846],
'    "preview_exists": 0,
'    "entmode": 0,
'    "nolinks": 1,
'    "color": 256,
'    "ltype_scale": 1.0,
'    "ltype_flags": 0,
'    "plotstyle_flags": 0,
'    "invisible": 0,
'    "linewt": 29,
'    "_subclass": "AcDbCircle",
'    "center": [2914.5184349050578, 1640.57887076129214, 0.0],
'    "radius": 0.06602049323089,
'    "thickness": 0.000000,
'    "extrusion": [0.0, 0.0, 1.0]
