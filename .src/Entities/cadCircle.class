' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits EntityBase
Public Const GENDER As String = "Circle"
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Draw a circle")
Public Const ParamType As String = "PL"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = ("Start point;Radious")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 1 "

Public Sub Draw()

    Dim x, y, theta, angle_increment As Float

    If Not Me.DrawAble Or Not Me.Visible Then Return

    If Me.Selected And Not modCAD.ToolActive Then Me.ColorToPaint = modCAD.ColorForSelected Else Me.ColorToPaint = modCAD.GetGBColor(Me.colour, Me.Layerid)

    If modCAD.drwDrawingClass = modCAD.drwPaintClass Then

        paint.LineWidth = Me.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines

        paint.brush = Paint.Color(Me.ColorToPaint)

        paint.Arc(Me.p[0], Me.p[1], Me.fParam[0])

        paint.Stroke
    End If

    If modCAD.drwDrawingClass = modCAD.drwOpenGLClass Then

        Me.BoundingPoligon.Clear
        GL.Begin(gl.LINE_STRIP)
        angle_increment = Pi * 2 / 360
        For theta = 0 To 2 * Pi Step angle_increment
            ' el punto considerando 0,0 al centro
            x = Me.p[0] + Me.fParam[0] * Cos(theta)
            y = Me.p[1] + Me.fParam[0] * Sin(theta)
            Me.BoundingPoligon.Add(x)
            Me.BoundingPoligon.Add(y)
            GLplus.Vertex2D(x, y, Me.ColorToPaint)
        Next
        gl.End
    End If

End

Public Function AboveMe(Xreal As Float, Yreal As Float, tolerance As Float, mode As Integer, fData As Float[]) As Boolean
    ' si una de las dos lineas de una cruz con centro en X,Y y largo Tolerance cruza la linea, estamos arriba
    'Dim fData As New Float[]

    Dim fDist1, fDist2, fDist3, fDist4 As Float
    'TODO: para debug, agrego esto
    mode = 1 + 2 ' endpoint+midpoint

    fData.Clear

    ' reviso el circulo
    fDist1 = puntos.distancia(xreal, Yreal, Me.P[0], Me.P[1])
    If (fdist1 <= Me.fParam[0] + tolerance) And (fdist1 >= Me.fParam[0] - tolerance) Then   ' estoy arriba
        fData.Insert([xreal, yreal, 0])
        ' puedo entregar un cuadrante como POI
        If puntos.Around(xreal, Yreal, Me.P[0] + Me.fParam[0], Me.P[1], tolerance) Then
            fData[0] = Me.P[0] + Me.fParam[0]
            fData[1] = Me.P[1]
            fData.Add(16)                 ' 16      Quadrant
        Endif

        If puntos.Around(xreal, Yreal, Me.P[0] - Me.fParam[0], Me.P[1], tolerance) Then
            fData[0] = Me.P[0] - Me.fParam[0]
            fData[1] = Me.P[1]
            fData.Add(16)                 ' 16      Quadrant
        Endif
        If puntos.Around(xreal, Yreal, Me.P[0], Me.P[1] + Me.fParam[0], tolerance) Then
            fData[0] = Me.P[0]
            fData[1] = Me.P[1] + Me.fParam[0]
            fData.Add(16)                 ' 16      Quadrant
        Endif

        If puntos.Around(xreal, Yreal, Me.P[0], Me.P[1] - Me.fParam[0], tolerance) Then
            fData[0] = Me.P[0]
            fData[1] = Me.P[1] - Me.fParam[0]
            fData.Add(16)                 ' 16      Quadrant
        Endif
        Return True
    End If

    If puntos.Around(xreal, Yreal, Me.P[0], Me.P[1], tolerance) Then
        fData.Insert([xreal, yreal, 0])
        fData[0] = Me.P[0]
        fData[1] = Me.P[1] - Me.fParam[0]
        fData.Add(8)                    ' 8      Center
        Return True
    Endif

    Return False

End
