' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast

Public Const Gender As String = "PLine"
Public Const PointsToDraw As Integer = 0             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Polyline")
Public Const ParamType As String = "P+"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = ("Next Point")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = "Close/Undo"
Public Const GAMBASCADENTITY As String = "EntityBase"
Public Const USEWITH As String = "clsEntityBuilder"
Public Const DrawingOrder As Integer = 0        ' 1 = draws first
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public Selected As Boolean
Public ForDeletion As Boolean = True        ' this must be falsed in Finish
Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  Dim i As Integer

  If OnlySelected Then

    For i = 0 To e.Psel.Max
      If e.Psel[i] Then

        e.P[i * 2] += dx
        e.P[i * 2 + 1] += dy

      Endif
    Next

  Else

    puntos.Translate(e.p, dx, dy)
  Endif

End

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.p, radians)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX

    e.P[i + 1] = e.P[i + 1] * sY

  Next

End

Public Sub Draw(oE As Entity)

  If Not oE.Visible Then Return

  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.Layerid)

  GLplus.PolyLines(oE.p, oE.ColorToPaint, oE.LineWidth, oe.linetype)

End

'' A fat version of the entity
Public Sub DrawSelected(oE As Entity)

  GLplus.PolyLines(oE.P, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.P, gcd.ColorForSelected, oE.LineWidth, oE.LineType)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

  If Not oE.Visible Then Return

  '  GLplus.PolyLines(oE.p, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  '  GLplus.PolyLines(oE.p, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)
  If oe.Selected Then
    GLplus.PolyLines(oE.P, Starter.flgWindowBackColor, oE.LineWidth + 2, gcd.stiDashed)
    GLplus.PolyLines(oE.P, gcd.ColorForSelected, oE.LineWidth + 2, oE.LineType)
  Else
    GLplus.PolyLines(oE.P, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
    GLplus.PolyLines(oE.P, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)
  Endif

End

Public Function Draw2(oE As Entity)

  Dim i As Integer

  If Not oE.Visible Then Return

  paint.LineWidth = oE.LineWidth / appmain.hFcad.ScaleZoom / gcd.ScaleLines

  If oE.Selected And Not gcd.ToolActive Then
    paint.brush = Paint.Color(gcd.ColorForSelected)
  Else
    paint.brush = Paint.Color(oE.ColorToPaint)
  Endif

  paint.moveto(oE.p[0], oE.p[1])
  For i = 2 To oE.P.Max Step 2
    paint.lineto(oE.p[i], oE.p[i + 1])

  Next

  paint.Stroke

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer

  If arrIndex < 0 Then arrIndex = appmain.hFCAD.arrEntities.Max       ' si este valor no es provisto , estos POI son de la ultima entidad
  Dim i As Integer
  oe.PoiPoints.Clear
  oe.PoiType.Clear

  oe.poiPoints.insert([oE.P[0], oE.P[1]])
  oe.poiType.Add(gcd.poiEndPoint)
  'oe.poiEntities.Add(arrIndex)

  For i = 0 To oE.P.count - 4 Step 2

    oe.poiPoints.insert([(oE.P[i + 0] + oE.P[i + 2]) / 2, (oE.P[i + 1] + oE.P[i + 3]) / 2])   ' mid
    oe.poiType.Add(gcd.poiMidPoint)
    'oe.poiEntities.Add(arrIndex)

    oe.poiPoints.insert([oE.P[i + 2], oE.P[i + 3]])
    oe.poiType.Add(gcd.poiEndPoint)
    'oe.poiEntities.Add(arrIndex)

    ' line
    'appmain.hFCAD.poiLines.insert([oE.p[i], oE.p[i + 1], oE.p[i + 2], oE.p[i + 3]])
    'APPMain.hFCAD.poiLinesEntities.Add(arrIndex)
    ' appmain.hFCAD.poiLinesRelPoint.Insert([i / 2, i / 2 + 1])

  Next

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity, Optional ParamsDone As Integer = -1) As Boolean

  'Print "Finish en EntityBase"
  'CreatePolygon(oe)
  BuildPOI(oe)

  ' busco el tipo de linea, si hace falta
  If oE.LineTypeName = "Dashed" Then oE.LineType = 1
  ' tareas finales de armado del objeto

  oE.psel.resize(oE.p.count / 2)
  oE.ForDeletion = False
  oE.DrawAble = True
  oE.Selected = False
  oE.Finished = True

  If Not True Then

    oE.ForDeletion = True
    oE.DrawAble = False

  End If

End
