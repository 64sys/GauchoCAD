' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static

Inherits EntityBase
Public Const GENDER As String = "Arc"
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Draws an arc")
Public Const ParamType As String = "PLAA"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = ("Center;Radious;Start;End")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = "0,0;1;0;90"

' vars creadas en finish
Public start As Float
Public recorrido As Float

Public Sub Draw(oE As Object)

    Dim x, y, theta, angle_increment As Float
    Dim i As Integer
    Dim difAng As Float
    Dim major, minor, angle, la As Float

    If Not oE.Visible Then Return

    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)

    If oE.StepsDone = 1 Then

        oE.fParam[2] = 360

    Else If oE.StepsDone = 2 Then

        If oE.fParam[1] < 0 Then oE.fParam[1] = 360 + oE.fParam[1]
        difang = (oE.fParam[2] - oE.fParam[1])

        GLplus.Lines([oE.p[0], oE.p[1], oE.p[0] + oE.fParam[0] * Cos(oE.fParam[1] / 180 * Pi), oE.p[1] + oE.fParam[0] * Sin(oE.fParam[1] / 180 * Pi)], oE.ColorToPaint)
        clsDrawingAids.Helper.texto = Format$(oE.fParam[1], ("0.0 deg"))

    Else If oE.StepsDone = 3 Then

        If oE.fParam[1] < 0 Then oE.fParam[1] = 360 + oE.fParam[1]
        If oE.fParam[2] < 0 Then oE.fParam[2] = 360 + oE.fParam[2]              ' grados
        Me.start = oE.fParam[1] / 180 * Pi                                      ' rad
        Me.recorrido = (oE.fParam[2] - oE.fParam[1]) / 180 * Pi                 ' rad
        If Me.recorrido < 0 Then

            Me.recorrido += 2 * Pi

        Endif

        GL.Begin(gl.LINE_STRIP)
        angle_increment = Pi * 2 / 360
        For theta = 0 To Me.recorrido Step angle_increment
            GLplus.Vertex2D(oE.p[0] + oE.fParam[0] * Cos(Me.start + theta), oE.p[1] + oE.fParam[0] * Sin(Me.start + theta), oE.ColorToPaint)
        Next
        gl.End

        clsDrawingAids.Helper.texto = Format$(oE.fParam[1], ("0.0 deg")) & (" to ") & Format$(oE.fParam[2], ("0.0 deg"))
    Else
        If oE.fParam[1] < 0 Then oE.fParam[1] = 360 + oE.fParam[1]
        If oE.fParam[2] < 0 Then oE.fParam[2] = 360 + oE.fParam[2]              ' grados
        Me.start = oE.fParam[1] / 180 * Pi                                      ' rad
        Me.recorrido = (oE.fParam[2] - oE.fParam[1]) / 180 * Pi                 ' rad
        If Me.recorrido < 0 Then

            Me.recorrido += 2 * Pi

        Endif

        oE.BoundingPoligon.Clear
        GL.Begin(gl.LINE_STRIP)
        angle_increment = Pi * 2 / 360
        For theta = 0 To Me.recorrido Step angle_increment
            ' el punto considerando 0,0 al centro
            x = oE.p[0] + oE.fParam[0] * Cos(Me.start + theta)
            y = oE.p[1] + oE.fParam[0] * Sin(Me.start + theta)
            oE.BoundingPoligon.Add(x)
            oE.BoundingPoligon.Add(y)
            GLplus.Vertex2D(x, y, oE.ColorToPaint)
        Next
        gl.End
    End If

End

Public Function Draw2(oE As Object)

    If Not oE.Visible Then Return

    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)

    paint.LineWidth = oE.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines

    paint.brush = Paint.Color(oE.ColorToPaint)

    paint.Arc(oE.p[0], oE.p[1], oE.fParam[0], start, recorrido)

    paint.Stroke

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Object, ParamsDone As Integer) As Boolean

    ' calculo el recorrido del arco como

    ' tareas finales de armado del objeto
    oE.b.resize(oE.P.count)
    oE.psel.resize(oE.p.count / 2)
    oE.ForDeletion = False
    oE.DrawAble = True
    oE.Selected = False
    oE.Finished = True

    If Not True Then

        oE.ForDeletion = True
        oE.DrawAble = False

    End If

End
