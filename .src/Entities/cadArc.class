' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static

Public Const Gender As String = "Arc"
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Draws an arc")
Public Const ParamType As String = "PLAA"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Center;Radious;Start;End"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = "0,0;1;0;90"
Public Const USEWITH As String = "clsEntityBuilder"
Public Const DrawingOrder As Integer = 0        ' 1 = draws first
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public Selected As Boolean
Public ForDeletion As Boolean = True        ' this must be falsed in Finish
Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion
' vars creadas en finish
Public start As Float
Public recorrido As Float

Public Sub Stretch(e As Entity, dX As Float, dY As Float)

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  Dim i As Integer

  If OnlySelected Then

    For i = 0 To e.Psel.Max
      If e.Psel[i] Then

        e.P[i * 2] += dx
        e.P[i * 2 + 1] += dy

      Endif
    Next

  Else

    puntos.Translate(e.p, dx, dy)
  Endif

End

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.p, radians)

  ' el parametro lo tengo que pasar a grados porque la rutina que dibuja el texto usa eso
  E.fParam[1] += radians * 180 / Pi
  E.fParam[2] += radians * 180 / Pi

  ' If E.fParam[1] < 0 Then E.fParam[1] = 360 + E.fParam[1]
  ' If E.fParam[2] < 0 Then E.fParam[2] = 360 + E.fParam[2]              ' grados

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  E.fParam[0] *= Abs(sX)

  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX

    e.P[i + 1] = e.P[i + 1] * sY

  Next

  ' start/end
  If sx < 0 Then
    E.fParam[1] = 180 - E.fParam[1]
    E.fParam[2] = 180 - E.fParam[2]
    e.fParam[3] *= -1
  Endif

  If sy < 0 Then
    E.fParam[1] = 360 - E.fParam[1]
    E.fParam[2] = 360 - E.fParam[2]
    e.fParam[3] *= -1
  Endif

  'If e.fParam[1] > e.fParam[2] Then Swap e.fParam[1], e.fParam[2]

End

Public Sub Draw(oE As Entity)

  Dim x, y, theta, angle_increment As Float
  Dim i As Integer
  Dim difAng As Float
  Dim major, minor, angle, la As Float

  If Not oE.Visible Then Return
  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.Layerid)

  If Me.StepsDone = 1 Then

    oE.fParam[2] = 360

  Else If Me.StepsDone = 2 Then

    If oE.fParam[1] < 0 Then oE.fParam[1] = 360 + oE.fParam[1]
    difang = (oE.fParam[2] - oE.fParam[1])

    GLplus.Lines([oE.p[0], oE.p[1], oE.p[0] + oE.fParam[0] * Cos(oE.fParam[1] / 180 * Pi), oE.p[1] + oE.fParam[0] * Sin(oE.fParam[1] / 180 * Pi)], oE.ColorToPaint)
    clsDrawingAids.Helper.texto = Format$(oE.fParam[1], "0.0 deg")

  Else If Me.StepsDone = 3 Then

    If oE.fParam[1] < 0 Then oE.fParam[1] = 360 + oE.fParam[1]
    If oE.fParam[2] < 0 Then oE.fParam[2] = 360 + oE.fParam[2]              ' grados
    Me.start = oE.fParam[1] / 180 * Pi                                      ' rad
    Me.recorrido = (oE.fParam[2] - oE.fParam[1]) / 180 * Pi                 ' rad
    If Me.recorrido < 0 Then

      Me.recorrido += 2 * Pi

    Endif

    angle_increment = Pi * 2 / 360
    oE.polyline.Clear
    For theta = 0 To Me.recorrido Step angle_increment
      ' el punto considerando 0,0 al centro
      x = oE.p[0] + oE.fParam[0] * Cos(Me.start + theta)
      y = oE.p[1] + oE.fParam[0] * Sin(Me.start + theta)
      oE.polyline.Add(x)
      oE.polyline.Add(y)
    Next
    glPlus.Lines(oe.PolyLine, oe.ColorToPaint, oe.LineWidth, oe.LineType)

    clsDrawingAids.Helper.texto = Format$(oE.fParam[1], "0.0 deg") & (" to ") & Format$(oE.fParam[2], "0.0 deg")
  Else

    If oe.fParam[3] > 0 Then

      If oE.fParam[2] < oE.fParam[1] Then oE.fParam[2] = 360 + oE.fParam[2]              ' grados

    Else

      If oE.fParam[2] > oE.fParam[1] Then oE.fParam[2] = oE.fParam[2] - 360              ' grados

    Endif

    oE.polyline.Clear
    angle_increment = Pi * 2 / 360 * oe.fParam[3]

    For theta = oE.fParam[1] / 180 * Pi To oE.fParam[2] / 180 * Pi Step angle_increment
      ' el punto considerando 0,0 al centro
      x = oE.p[0] + oE.fParam[0] * Cos(theta)
      y = oE.p[1] + oE.fParam[0] * Sin(theta)
      oE.polyline.Add(x)
      oE.polyline.Add(y)

    Next


    glPlus.Lines(oe.PolyLine, oe.ColorToPaint, oe.LineWidth, oe.LineType)

  End If

End

Public Sub DrawSelected(oE As Entity)

  GLplus.PolyLines(oE.PolyLine, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.PolyLine, gcd.ColorForSelected, oE.LineWidth, oE.LineType)

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

  '  GLplus.PolyLines(oE.PolyLine, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  '  GLplus.PolyLines(oE.PolyLine, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)
  If oe.Selected Then
    GLplus.PolyLines(oE.PolyLine, Starter.flgWindowBackColor, oE.LineWidth + 2, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, gcd.ColorForSelected, oE.LineWidth + 2, oE.LineType)
  Else
    GLplus.PolyLines(oE.PolyLine, Starter.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)
  Endif

End

Public Function Draw2(oE As Entity)

  If Not oE.Visible Then Return

  paint.LineWidth = oE.LineWidth ' / gcd.CurrentDrawing.ScaleZoom / gcd.ScaleLines

  paint.brush = Paint.Color(oE.ColorToPaint)

  paint.Arc(oE.p[0], oE.p[1], oE.fParam[0], start, recorrido)

  paint.Stroke

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity, Optional ParamsDone As Integer = -1) As Boolean

  ' calculo el recorrido del arco como

  ' tareas finales de armado del objeto

  oE.psel.resize(oE.p.count / 2)
  oE.ForDeletion = False
  oE.DrawAble = True
  oE.Selected = False
  oE.Finished = True
  oe.fParam.Add(1) ' sentido de giro

  If Not True Then

    oE.ForDeletion = True
    oE.DrawAble = False

  End If

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean


  e.P.Add(c["center"][0])
  e.P.Add(c["center"][1])
  e.fParam.Add(c["radius"])
  e.fParam.Add(c["start_angle"] * 180 / Pi)
  e.fParam.Add(c["end_angle"] * 180 / Pi)

  Return True

End

' "entity": "ARC",
' "index": 402,
' "type": 17,
' "handle": [0, 254703],
' "size": 53,
' "bitsize": 370,
' "ownerhandle": [12, 1, 10, 254693],
' "_subclass": "AcDbEntity",
' "layer": [5, 2, 16846, 16846],
' "preview_exists": 0,
' "entmode": 0,
' "nolinks": 1,
' "color": 256,
' "ltype_scale": 1.0,
' "ltype_flags": 0,
' "plotstyle_flags": 0,
' "invisible": 0,
' "linewt": 29,
' "_subclass": "AcDbCircle",
' "center": [2914.8639315152991, 1641.01253626152402, 0.0],
' "radius": 0.01636363636364,
' "thickness": 0.000000,
' "extrusion": [0.0, 0.0, 1.0],
' "_subclass": "AcDbArc",
' "start_angle": 0.0,
' "end_angle": 1.5707963267949
