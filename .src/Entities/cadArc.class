' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Represents an circle's arc
' Element maintained by Terco
' V2
Inherits EntityBase
Public Const GENDER As String = "Arc"
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Draws an arc")
Public Const ParamType As String = "PLAA"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = ("Center;Radious;Start;End")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = "0,0;1;0;90"

' vars creadas en finish
Public start As Float
Public recorrido As Float

Public Sub Draw()

    Dim x, y, theta, angle_increment As Float
    Dim i As Integer
    Dim difAng As Float
    Dim major, minor, angle, la As Float

    If Not Me.DrawAble Or Not Me.Visible Then Return

    If Me.Selected And Not modCAD.ToolActive Then Me.ColorToPaint = modCAD.ColorForSelected Else Me.ColorToPaint = Me.gbColor

    If modCAD.drwDrawingClass = modCAD.drwPaintClass Then

        paint.LineWidth = Me.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines

        paint.brush = Paint.Color(Me.ColorToPaint)

        paint.Arc(Me.p[0], Me.p[1], Me.fParam[0], Me.start, Me.recorrido)

        paint.Stroke
    End If

    If modCAD.drwDrawingClass = modCAD.drwOpenGLClass Then

        If Me.StepsDone = 1 Then

            Me.fParam[2] = 360

        Else If Me.StepsDone = 2 Then

            If Me.fParam[1] < 0 Then Me.fParam[1] = 360 + Me.fParam[1]
            difang = (Me.fParam[2] - Me.fParam[1])

            GLplus.Lines([Me.p[0], Me.p[1], Me.p[0] + Me.fParam[0] * Cos(Me.fParam[1] / 180 * Pi), Me.p[1] + Me.fParam[0] * Sin(Me.fParam[1] / 180 * Pi)], Me.ColorToPaint)
            clsDrawingAids.Helper.texto = Format$(Me.fParam[1], ("0.0 deg"))

        Else If Me.StepsDone = 3 Then

            If Me.fParam[1] < 0 Then Me.fParam[1] = 360 + Me.fParam[1]
            If Me.fParam[2] < 0 Then Me.fParam[2] = 360 + Me.fParam[2]              ' grados
            Me.start = Me.fParam[1] / 180 * Pi                                      ' rad
            Me.recorrido = (Me.fParam[2] - Me.fParam[1]) / 180 * Pi                 ' rad
            If Me.recorrido < 0 Then

                Me.recorrido += 2 * Pi

            Endif

            GL.Begin(gl.LINE_STRIP)
            angle_increment = Pi * 2 / 360
            For theta = 0 To Me.recorrido Step angle_increment
                GLplus.Vertex2D(Me.p[0] + Me.fParam[0] * Cos(Me.start + theta), Me.p[1] + Me.fParam[0] * Sin(Me.start + theta), Me.ColorToPaint)
            Next
            gl.End

            clsDrawingAids.Helper.texto = Format$(Me.fParam[1], ("0.0 deg")) & (" to ") & Format$(Me.fParam[2], ("0.0 deg"))
        Else

            ' TODO: esto probabemente funcione para arcos en los dos primeros cuadrantes

            Me.BoundingPoligon.Clear
            GL.Begin(gl.LINE_STRIP)
            angle_increment = Pi * 2 / 360
            For theta = 0 To Me.recorrido Step angle_increment
                ' el punto considerando 0,0 al centro
                x = Me.p[0] + Me.fParam[0] * Cos(Me.start + theta)
                y = Me.p[1] + Me.fParam[0] * Sin(Me.start + theta)
                Me.BoundingPoligon.Add(x)
                Me.BoundingPoligon.Add(y)
                GLplus.Vertex2D(x, y, Me.ColorToPaint)
            Next
            gl.End
        End If
    Endif

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(ParamsDone As Integer) As Boolean

    ' calculo el recorrido del arco como

    If Me.fParam[1] < 0 Then Me.fParam[1] = 360 + Me.fParam[1]
    If Me.fParam[2] < 0 Then Me.fParam[2] = 360 + Me.fParam[2]              ' grados
    Me.start = Me.fParam[1] / 180 * Pi                                      ' rad
    Me.recorrido = (Me.fParam[2] - Me.fParam[1]) / 180 * Pi                 ' rad
    If Me.recorrido < 0 Then

        Me.recorrido += 2 * Pi

    Endif

    ' tareas finales de armado del objeto
    Me.b.resize(Me.P.count)
    Me.psel.resize(Me.p.count / 2)
    Me.ForDeletion = False
    Me.DrawAble = True
    Me.Selected = False
    Me.Finished = True

    If Not True Then

        Me.ForDeletion = True
        Me.DrawAble = False

    End If

End
