' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast
Inherits EntityBase
Public Const Gender As String = "Solid"
Public Const PointsToDraw As Integer = 0             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Solid")
Public Const ParamType As String = "PPPP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "First Point;Next Point;Next Point;Last Point"      ' a little text that is shown at the prompt waiting for user input during build
Public Const TotalPoints As Integer = 4

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  If vParam[0] <> "point" Then Return False

  If Me.StepsDone = 0 Then
    Try eBuild.P[0] = vParam[1]
    Try eBuild.P[1] = vParam[2]
    eBuild.P[2] = eBuild.P[0]
    eBuild.P[3] = eBuild.P[1]
    If definitive Then Return True
  Else If Me.StepsDone = 1 Then
    eBuild.DrawAble = True
    Try eBuild.P[2] = vParam[1]
    Try eBuild.P[3] = vParam[2]
    eBuild.P[4] = eBuild.P[0]
    eBuild.P[5] = eBuild.P[1]

    If definitive Then Return True

  Else If Me.StepsDone = 2 Then
    eBuild.DrawAble = True
    Try eBuild.P[4] = vParam[1]
    Try eBuild.P[5] = vParam[2]
    eBuild.P[6] = eBuild.P[0]
    eBuild.P[7] = eBuild.P[1]

    If definitive Then Return True
  Else If Me.StepsDone = 3 Then
    eBuild.DrawAble = True
    Try eBuild.P[6] = vParam[1]
    Try eBuild.P[7] = vParam[2]
    If definitive Then Return True

  Endif

End

Public Sub Draw(oE As Entity)

  If Not oE.Visible Then Return

  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.pLayer)

  If Not oe.Finished Then
    If Me.StepsDone < 1 Then

      oE.P[2] = oE.P[0]
      oE.P[3] = oE.P[1]

      glPlus.Lines(oE.p, oE.ColorToPaint, oE.LineWidth)

    End If

    If Me.StepsDone < 2 Then

      oE.P[4] = oE.P[2]
      oE.P[5] = oE.P[3]

    End If

    If Me.StepsDone < 3 Then

      oE.P[6] = oE.P[4]
      oE.P[7] = oE.P[5]

    Endif

  End If

  If oe.P.Count < 2 Then Return
  'GLplus.PolygonFilled(oE.p, oE.ColorToPaint, oE.ColorToPaint, oE.LineWidth, oE.LineType.index)
  GLplus.Triangles(puntos.PolygonTriangulation(oE.p), oE.ColorToPaint, oE.LineWidth, oE.LineType.index)

End

'' A fat version of the entity
Public Sub DrawSelected(oE As Entity)

  GLplus.Polygon(oE.p, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  GLplus.Polygon(oE.p, gcd.ColorForSelected, oE.LineWidth, oE.LineType.index)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

  '  GLplus.Polygon(oE.p, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  '  GLplus.Polygon(oE.p, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)
  If oe.Selected Then
    GLplus.Polygon(oE.P, gcd.flgWindowBackColor, oE.LineWidth + 2, gcd.stiDashed)
    GLplus.Polygon(oE.P, gcd.ColorForSelected, oE.LineWidth + 2, oe.linetype.index)
  Else
    GLplus.Polygon(oE.P, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
    GLplus.Polygon(oE.P, oE.ColorToPaint, oE.LineWidth + 2, oe.linetype.index)
  Endif

End

Public Function Draw2(oE As Entity)

  Paint.Polygon(oE.p)

  paint.Fill

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer

  cadLWPolyline.BuildPOI(oe)

End
' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it

Public Sub Finish(oE As Entity) As Boolean

  'Print "Finish en EntityBase"
  'CreatePolygon(oe)
  '  BuildPOI(oe)
  oE.Polygon = oE.P

  ' busco el tipo de linea, si hace falta

  ' tareas finales de armado del objeto

  oE.psel.resize(oE.p.count / 2)

  oE.DrawAble = True
  oE.Selected = False
  oE.Finished = True

End

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

  cExport.Add("SOLID", dxf.codEntity)
  clsEntities.DXFExportCommonCol(e, cExport)
  cExport.Add("AcDbTrace", "100")
  cExport.Add(CStr(e.p[0]), dxf.codX0)
  cExport.Add(CStr(e.p[1]), dxf.codY0)
  cExport.Add(CStr(e.p[2]), DXF.codX1)
  cExport.Add(CStr(e.p[3]), dxf.codY1)
  cExport.Add(CStr(e.p[4]), dxf.codX2)
  cExport.Add(CStr(e.p[5]), dxf.codY2)
  cExport.Add(CStr(e.p[6]), DXF.codX3)
  cExport.Add(CStr(e.p[7]), dxf.codY3)

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer

  e.P.Clear

  For i = 0 To sClaves.Max

    If sClaves[i] = "10" Then e.p.Add(CFloat(sValues[i]))
    If sClaves[i] = "20" Then e.p.Add(CFloat(sValues[i]))
    If sClaves[i] = "11" Then e.p.Add(CFloat(sValues[i]))
    If sClaves[i] = "21" Then e.p.Add(CFloat(sValues[i]))
    If sClaves[i] = "12" Then e.p.Add(CFloat(sValues[i]))
    If sClaves[i] = "22" Then e.p.Add(CFloat(sValues[i]))
    If sClaves[i] = "13" Then e.p.Add(CFloat(sValues[i]))
    If sClaves[i] = "23" Then e.p.Add(CFloat(sValues[i]))

  Next

  Return True

  ' catch

  Return False

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

  e.P.Clear
  e.P.Add(c["corner1"][0])
  e.P.Add(c["corner1"][1])
  e.P.Add(c["corner2"][0])
  e.P.Add(c["corner2"][1])
  e.P.Add(c["corner3"][0])
  e.P.Add(c["corner3"][1])
  e.P.Add(c["corner4"][0])
  e.P.Add(c["corner4"][1])

  Return True

Catch

  Return False

End

' "entity": "SOLID",
' "index": 14873,
' "type": 31,
' "handle": [0, 1412074],
' "size": 123,
' "bitsize": 914,
' "eed": [
'   {
'     "size": 25,
'     "handle": [5, 18],
'     "code": 10,
'     "value": [0.0, 0.0, 0.0]
'   }
' ],
' "ownerhandle": [12, 3, 112165, 1299909],
' "_subclass": "AcDbEntity",
' "layer": [5, 2, 16840, 16840],
' "preview_exists": 0,
' "entmode": 0,
' "nolinks": 1,
' "color": 5,
' "ltype_scale": 1.0,
' "ltype_flags": 0,
' "plotstyle_flags": 0,
' "invisible": 0,
' "linewt": 29,
' "_subclass": "AcDbTrace",
' "thickness": 0.000000,
' "elevation": 0.00000000000068,
' "corner1": [3031.97616104186818, 1631.40569016283212],
' "corner2": [3031.97616104186818, 1631.80569016283198],
' "corner3": [3031.97696102900818, 1631.40569016283212],
' "corner4": [3031.97696102900818, 1631.40569016283212],
' "extrusion": [0.0, 0.0, 1.0]
