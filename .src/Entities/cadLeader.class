' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast
Inherits EntityBase
Public Const Gender As String = "Leader"
Public Const PointsToDraw As Integer = 0             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Leader")
Public Const ParamType As String = "TFP+"
Public Const ParamHelper As String = "Text; Height; Next Point"     ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = "<title> ;20; <enter>"

'' Creates a new LWpolyline entity and prepares arrays
Public Function NewEntity(Optional fPoints As Float[]) As Entity

  Dim e As New Entity

  e.Gender = Me.Gender
  e.ClassHandler = Me
  e.fParam.Insert([0])
  e.P.Insert([0, 0])

  ' this may fails on some scopes, but we should Try
  Try e.pLayer = gcd.CurrentDrawing.CurrLayer
  Try e.colour = gcd.CurrentDrawing.CurrColor
  Try e.LineType = gcd.CurrentDrawing.CurrLineType
  Try e.LineWidth = gcd.CurrentDrawing.CurrLineWt

  Return e

End

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  If eBuild.fParam.Count = 0 Then eBuild.fParam.Add(0)

  If vParam[0] = "point" Then
    eBuild.DrawAble = True

    eBuild.P[eBuild.P.Max - 1] = vParam[1]
    eBuild.P[eBuild.P.Max] = vParam[2]

    If definitive Then
      eBuild.P.Insert(eBuild.P.Copy(eBuild.P.Max - 1, 2))
      Return True
    End If
  Else If vParam[0] = "close" Then
    If eBuild.P.Count > 4 Then eBuild.P.Remove(eBuild.P.Max - 1, 2)
    eBuild.fParam[0] = 1
    Return True

  Else If vParam[0] = "undo" Then
    If eBuild.P.Count > 4 Then eBuild.P.Remove(eBuild.P.Max - 1, 2)
    eBuild.fParam[0] = 0
    Return True

  Endif

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  Dim i As Integer

  If OnlySelected Then

    For i = 0 To e.Psel.Max
      If e.Psel[i] Then

        e.P[i * 2] += dx
        e.P[i * 2 + 1] += dy

      Endif
    Next

  Else

    puntos.Translate(e.p, dx, dy)
  Endif

End

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.P, radians)
  E.fParam[0] += radians

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  E.fParam[1] *= sY
  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX
    e.P[i + 1] = e.P[i + 1] * sY

  Next

End

Public Sub Draw(oE As Entity)

  Dim angle As Float

  If Not oE.Visible Then Return
  If oe.P.Count < 4 Then Return

  Dim tRect As New Float[], poli As New Float[]

  tRect = glPlus.TextExtends(oE.stringdata[0], oE.fParam[0])

  angle = Ang((oE.p[oE.p.max - 1] - oE.p[oE.p.max - 3]), (oE.p[oE.p.max] - oE.p[oE.p.max - 2]))
  glPlus.DrawText(oE.stringdata[0], (oE.p[oE.p.max - 1] + oE.p[oE.p.max - 3]) / 2 - tRect[0] / 2, (oE.p[oE.p.Max] + oE.p[oE.p.max - 2]) / 2 + tRect[1] / 2, Angle, oe.fParam[0], oE.ColorToPaint)
  ' TODO: arrow head cuando tengamos los parametros de Dim , como ser tamaÃ±o de la flecha, etc
  GLplus.PolyLines(oE.p, oE.ColorToPaint, oE.LineWidth, oE.LineType.index)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

  GLplus.Polygon(oE.Polygon, gcd.ColorForSelected, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.p, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.p, gcd.ColorForSelected, oE.LineWidth, oE.LineType.index)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

  If Not oE.Visible Then Return

  GLplus.Polygon(oE.Polygon, oE.ColorToPaint, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.p, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.p, oE.ColorToPaint, oE.LineWidth + 2, oe.linetype.index)
  GLplus.lines([oE.P[0], oE.P[1], (oE.P[0] + oE.P[2]) / 8, (oE.P[1] + oE.P[3]) / 8], oE.ColorToPaint, oE.ColorToPaint, oE.LineWidth * 3, oe.linetype.index)

End

Public Function Draw2(oE As Entity)

  Dim i As Integer

  paint.moveto(oE.p[0], oE.p[1])
  For i = 2 To oE.P.Max Step 2
    paint.lineto(oE.p[i], oE.p[i + 1])

  Next

  paint.Stroke

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

  cadLWPolyline.BuildPOI(oe)

  ' points
  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiBasePoint)
  'oe.poiEntities.Add(arrIndex)

  ' line

  ' Polygon

  Dim tRect As New Float[], poli As New Float[]

  tRect = glPlus.TextExtends(oE.stringdata[0], oE.fParam[0])
  poli.Insert([0, 0, tRect[0], 0, tRect[0], tRect[1], 0, tRect[1]]) ' armo el poligono , que ya tiene la escala
  puntos.Rotate(Poli, oE.fParam[0] * Pi / 180)
  puntos.Translate(Poli, oE.P[0], oE.P[1])

  oe.Polygon.Clear
  oe.Polygon.Insert(poli)

  puntos.Translate(oe.Polygon, (oE.p[oE.p.max - 1] + oE.p[oE.p.max - 3]) / 2 - oE.P[0], (oE.p[oE.p.Max] + oE.p[oE.p.max - 2]) / 2 - oE.P[1])

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity) As Boolean

  'Print "Finish en EntityBase"
  'CreatePolygon(oe)
  '  BuildPOI(oe)

  ' busco el tipo de linea, si hace falta

  ' tareas finales de armado del objeto

  oE.psel.resize(oE.p.count / 2)

  oE.DrawAble = True
  oE.Selected = False
  oE.Finished = True

End
