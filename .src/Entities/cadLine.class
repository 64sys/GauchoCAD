' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
'Fast
Inherits EntityBase

Public Const Gender As String = "Line"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const HelperTrabajo As String = ("a line")
Public Const ParamType As String = "PP"                             ' that is Point, Point; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point"
Public Const TotalPoints As Integer = 2

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  ' la linea solo recibe puntos

  If vParam[0] <> "point" Then Return False

  If Me.StepsDone = 0 Then
    Try eBuild.P[0] = vParam[1]
    Try eBuild.P[1] = vParam[2]
    eBuild.P[2] = eBuild.P[0]
    eBuild.P[3] = eBuild.P[1]
    If definitive Then Return True
  Else If Me.StepsDone = 1 Then
    eBuild.DrawAble = True
    Try eBuild.P[2] = vParam[1]
    Try eBuild.P[3] = vParam[2]
    If definitive Then Return True

  Endif

End

Public Sub Draw(oE As Entity)

  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.pLayer)

  GLplus.Lines(oE.p, oE.ColorToPaint, oE.LineWidth, oE.LineType.index)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

  Dim i As Integer
  Dim iLineType As Integer

  ' If oe.LineType = gcd.stiDashed Then iLineType = 0 Else iLineType = gcd.stiDashed

  GLplus.Lines(oE.p, gcd.flgWindowBackColor, oE.LineWidth, iLineType)

  GLplus.Lines(oE.p, gcd.ColorForSelected, oE.LineWidth, oE.LineType.index)

End
'' A fat version of the line

Public Sub DrawRemark(oE As Entity)

  If Not oE.Visible Then Return

  'GLplus.Lines(oE.p, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  'GLplus.Lines(oE.p, oE.ColorToPaint, oE.LineWidth + 2, oE.LineType)
  If oe.Selected Then
    GLplus.Lines(oE.P, gcd.flgWindowBackColor, oE.LineWidth + 2, gcd.stiDashed)
    GLplus.Lines(oE.P, gcd.ColorForSelected, oE.LineWidth + 2, oe.linetype.index)
  Else
    GLplus.Lines(oE.P, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
    GLplus.Lines(oE.P, oE.ColorToPaint, oE.LineWidth + 2, oe.linetype.index)
  Endif

End

'' The paint version of the entity
Public Function Draw2(oE As Entity)

  Dim i As Integer

  If gcd.UseCairo Then

    cairo.moveto(oe.P[0], oe.P[1])
    For i = 2 To oe.P.Max Step 2
      Cairo.lineto(oe.P[i], oe.P[i + 1])

    Next

    cairo.Stroke
  Else

    paintPlus.Lines(oE.p)
  End If

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

  ' si este valor no es provisto , estos POI son de la ultima entidad

  oe.PoiPoints.Clear
  oe.PoiType.Clear

  ' points: end-mid-end
  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiEndPoint)

  oe.poiPoints.insert([(oE.P[0] + oE.P[2]) / 2, (oE.P[1] + oE.P[3]) / 2])   ' mid
  oe.poiType.Add(gcd.poiMidPoint)
  'gcd.CurrDrawing.poiEntities.Add(arrIndex)

  oe.poiPoints.insert([oE.p[2], oE.p[3]])
  oe.poiType.Add(gcd.poiEndPoint)
  'gcd.CurrDrawing.poiEntities.Add(arrIndex)

  ' line
  ' gcd.CurrDrawing.poiLines.insert([oE.p[0], oE.p[1], oE.p[2], oE.p[3]])
  ' gcd.CurrDrawing.poiLinesEntities.Add(arrIndex)
  'gcd.CurrDrawing.poiLinesRelPoint.Insert([0, 1])

End

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

  cExport.Add("LINE", dxf.codEntity)
  clsEntities.DXFExportCommonCol(e, cExport)
  cExport.Add("AcDbLine", "100")
  cExport.Add(CStr(e.p[0]), dxf.codX0)
  cExport.Add(CStr(e.p[1]), dxf.codY0)
  cExport.Add(CStr(e.p[2]), DXF.codX1)
  cExport.Add(CStr(e.p[3]), dxf.codY1)

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer

  e.P.Clear
  For i = 0 To sClaves.Max

    If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "11" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "21" Then e.P.Add(CFloat(sValues[i]))

  Next
  Return True

  ' catch

  Return False

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As JSONCollection, e As Entity) As Boolean

  'Common Pack
  ' e.dwg = c
  ' e.dwg["index"] = c["index"]
  ' e.dwg["type"] = c["type"]
  ' e.dwg["handle"] = c["handle"]
  ' e.dwg["size"] = c["size"]
  ' e.dwg["bitsize"] = c["bitsize"]
  ' If c.Exist("ownerhandle") Then
  '   e.dwg["ownerhandle"] = c["ownerhandle"]
  ' Endif
  ' e.dwg["_subclass"] = c["_subclass"]
  ' e.dwg["prev_entity"] = c["prev_entity"]
  ' e.dwg["next_entity"] = c["next_entity"]
  ' e.dwg["layer"] = c["layer"]
  ' e.dwg["preview_exists"] = c["preview_exists"]
  ' e.dwg["entmode"] = c["entmode"]
  ' e.dwg["nolinks"] = c["nolinks"]
  ' e.dwg["color"] = 0
  ' e.dwg["ltype_scale"] = 1.0
  ' e.dwg["ltype_flags"] = 1
  ' e.dwg["plotstyle_flags"] = 0
  ' e.dwg["invisible"] = 0
  ' e.dwg["linewt"] = 30

  e.P.Clear
  e.P.Add(c["start"][0])
  e.P.Add(c["start"][1])
  e.P.Add(c["end"][0])
  e.P.Add(c["end"][1])

  Return True

  'Catch

  Return False

End
