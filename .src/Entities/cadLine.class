' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits EntityBase
Public Const GENDER As String = "Line"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const HelperTrabajo As String = ("a line")
Public Const ParamType As String = "PP"                             ' that is Point, Point; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point"

Public Sub Draw()

    If Not Me.DrawAble Or Not Me.Visible Then Return

    If Me.Selected And Not modCAD.ToolActive Then Me.ColorToPaint = modCAD.ColorForSelected Else Me.ColorToPaint = modCAD.GetGBColor(Me.colour, Me.Layerid)

    If modCAD.drwDrawingClass = modCAD.drwPaintClass Then

        paint.LineWidth = Me.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines
        If Me.flxDash Then paint.Dash = Me.flxDash
        paint.brush = Paint.Color(Me.ColorToPaint)
        paint.MoveTo(Me.p[0], Me.p[1])
        paint.LineTo(Me.p[2], Me.p[3])
        paint.Stroke
    End If

    If modCAD.drwDrawingClass = modCAD.drwOpenGLClass Then

        GLplus.Lines(Me.p, Me.ColorToPaint, Me.LineWidth, Me.LineType)

    Endif

End

'' Se fija si la posicion indicada esta aproximadamente sobre la entidad, de acuerdo a la tolerancia
'' mode es para establecer si se busca especificamente algun punto y devolver su posicion y tipo.
'' Mode:

'' Devuelve [x,y] punto de interes
Public Function AboveMe(Xreal As Float, Yreal As Float, tolerance As Float, mode As Integer, fData As Float[]) As Boolean
    ' si una de las dos lineas de una cruz con centro en X,Y y largo Tolerance cruza la linea, estamos arriba
    'Dim fData As New Float[]

    Dim fDist1, fDist2, fDist3, fDist4 As Float
    'TODO: para debug, agrego esto
    mode = 1 + 2 ' endpoint+midpoint

    fData.Clear
    If puntos.doIntersect(xreal - tolerance / 2, Yreal, Xreal + tolerance / 2, Yreal, Me.P[0], Me.P[1], Me.P[2], Me.P[3]) Or puntos.doIntersect(xreal, Yreal - tolerance / 2, Xreal, Yreal + tolerance / 2, Me.P[0], Me.P[1], Me.P[2], Me.P[3]) Then ' its above me

        ' busco el punto exacto en la linea donde se produce la interseccion
        fData.Insert(puntos.lineLineIntersection([xreal - tolerance / 2, Yreal], [Xreal + tolerance / 2, Yreal], [Me.P[0], Me.P[1]], [Me.P[2], Me.P[3]]))
        ' veo que punto esta mas cerca
        fDist1 = puntos.distancia(Me.P[0], Me.P[1], fData[0], fData[1])   ' end 1
        fDist2 = puntos.distancia((Me.P[0] + Me.P[2]) / 2, (Me.P[1] + Me.P[3]) / 2, fData[0], fData[1])   ' mid
        fDist3 = puntos.distancia(Me.P[2], Me.P[3], fData[0], fData[1])   ' end 2
        If fdist1 > fdist2 Then
            If fDist2 > fDist3 Then         ' End 2
                fData[0] = Me.P[2]
                fData[1] = Me.P[3]
                fData.Add(1)                 ' 1 = EndPoint
            Else
                fData[0] = (Me.P[0] + Me.P[2]) / 2
                fData[1] = (Me.P[1] + Me.P[3]) / 2
                fData.Add(2)                 ' 2 = MidPoint
            Endif
        Else
            fData[0] = Me.P[0]
            fData[1] = Me.P[1]
            fData.Add(1)                     ' 1 = EndPoint

        Endif

        Return True

    Endif

    Return False

End
