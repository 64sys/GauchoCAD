' Gambas class file

' Represents a poli line
' Element maintained by Terco

' Usando partes de la informacion de
' http://devmag.org.za/2011/04/05/bzier-curves-a-tutorial/

Create Static
Inherits EntityBase
Public Const Gender As String = "SPLine"
Public Const PointsToDraw As Integer = 0             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = "SPLine"
Public Const ParamType As String = "P+"                             ' that is Point, Point, Float could be Color Text, etc
Public Const ParamHelper As String = ("Next Point")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = "Close/Undo"

' otras const
Public Const TypeControls As Integer = 0
Public Const TypeTangent As Integer = 1
Public drawingPoints As New Float[]

Public numDrawingPoints As Integer = 100

' DXF Read/Export

Public Const DXF_Export As Boolean = False

' fParam helpers
Public Const TotalParams As Integer = 10
Public Const ipaDegree As Integer = 0
Public Const ipaTotalKnots As Integer = 1
Public Const ipaTotalControlPoints As Integer = 2
Public Const ipaTotalFitPoints As Integer = 3
Public Const ipaKnotTolerance As Integer = 4
Public Const ipaControlTolerance As Integer = 5
Public Const ipaFitTolerance As Integer = 6
Public Const ipaFlag As Integer = 7
Public Const ipaTang1 As Integer = 8
Public Const ipaTang2 As Integer = 9

' nuevas mar/21
Public g_num_cvs As Integer
Public g_degree As Integer
Public g_order As Integer
Public LOD As Integer = 100

Public g_points As New Float[]
Public Knots As New Float[]

Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  Dim fKnots As New Float[]

  Dim i As Integer

  If eBuild.fParam.Count = 0 Then

  Endif
  eBuild.fParam[Me.ipaFlag] = 8
  ' 70' Spline flag(bit coded):
  ' 1 = Closed spline
  ' 2 = Periodic spline
  ' 4 = Rational spline
  ' 8 = Planar
  ' 16 = Linear(planar bit Is Also set)
  eBuild.fParam[Me.ipaDegree] = 2 'quadrtic 3 = cubic
  eBuild.fParam[Me.ipaKnotTolerance] = 0.0000001
  eBuild.fParam[Me.ipaControlTolerance] = 0.0000001
  eBuild.fParam[Me.ipaFitTolerance] = 0.0000000001

  If vParam[0] = "point" Then

    eBuild.P[eBuild.P.Max - 1] = vParam[1]
    eBuild.P[eBuild.P.Max] = vParam[2]
    GoSub DoKnots
    If definitive Then

      eBuild.P.Insert(eBuild.P.Copy(eBuild.P.Max - 1, 2))
      GoSub DoKnots
      Return True
    End If
  Else If vParam[0] = "close" Then
    If eBuild.P.Count > 4 Then eBuild.P.Remove(eBuild.P.Max - 1, 2)

    Return True

  Else If vParam[0] = "undo" Then
    If eBuild.P.Count > 4 Then
      eBuild.P.Remove(eBuild.P.Max - 1, 2)
      GoSub DoKnots
    End If

    Return True

  Endif

DoKnots:

  fKnots.Clear

  fKnots.Add(0)
  fKnots.Add(0)
  fKnots.Add(0)

  If eBuild.P.Count / 2 > 3 Then
    For i = 1 To eBuild.P.count / 2 - 3
      fKnots.Add(i / ((eBuild.P.count / 2 - 2)))
    Next
  End If
  fKnots.Add(1)
  fKnots.Add(1)
  fKnots.Add(1)

  eBuild.fParam.Remove(Me.TotalParams, eBuild.fParam.Count - Me.TotalParams)
  eBuild.fParam.Insert(fKnots.Copy(), Me.TotalParams)

  eBuild.fParam[Me.ipaTotalKnots] = fKnots.Count

  Return

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  Dim i As Integer

  If OnlySelected Then

    For i = 0 To e.Psel.Max
      If e.Psel[i] Then

        e.P[i * 2] += dx
        e.P[i * 2 + 1] += dy

      Endif
    Next

  Else

    puntos.Translate(e.p, dx, dy)
  Endif

End

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.P, radians)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX
    e.P[i + 1] = e.P[i + 1] * sY

  Next

End

'' A fat version of the entity
Public Sub DrawSelected(oE As Entity)

  GLplus.PolyLines(oE.PolyLine, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  GLplus.PolyLines(oE.PolyLine, gcd.ColorForSelected, oE.LineWidth, oE.LineType.index)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

  If Not oE.Visible Then Return

  '  GLplus.PolyLines(oE.p, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
  '  GLplus.PolyLines(oE.p, gcd.GetGBColor(oE.Colour, oe.pLayer),oE.LineWidth + 2, oE.LineType)
  If oe.Selected Then
    GLplus.PolyLines(oE.PolyLine, gcd.flgWindowBackColor, oE.LineWidth + 2, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, gcd.ColorForSelected, oE.LineWidth + 2, oe.linetype.index)
  Else
    GLplus.PolyLines(oE.PolyLine, gcd.flgWindowBackColor, oE.LineWidth, gcd.stiDashed)
    GLplus.PolyLines(oE.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), oE.LineWidth + 2, oe.linetype.index)
  Endif

End

Public Sub Draw2(oE As Entity)

  paintPlus.Lines(oe.PolyLine)

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

  cadLWPolyline.BuildPOI(oe)

End

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

  Dim i As Integer

  cExport.Add("SPLINE", dxf.codEntity)
  clsEntities.DXFExportCommonCol(e, cExport)
  cExport.Add("AcDbSpline", "100")
  cExport.Add(CStr(e.fParam[Me.ipaFlag]), "70")
  ' 70' Spline flag(bit coded):
  ' 1 = Closed spline
  ' 2 = Periodic spline
  ' 4 = Rational spline
  ' 8 = Planar
  ' 16 = Linear(planar bit Is Also set)
  cExport.Add(CStr(e.fParam[Me.ipaDegree]), "71")                 ' 2 = quadrtic 3 = cubic
  cExport.Add(CStr(e.fParam[Me.ipaTotalKnots]), "72")
  cExport.Add(CStr(e.fParam[Me.ipaTotalControlPoints]), "73")
  cExport.Add(CStr(e.fParam[Me.ipaTotalFitPoints]), "74")
  cExport.Add(CStr(e.fParam[Me.ipaKnotTolerance]), "42")          ' 0.0000001
  cExport.Add(CStr(e.fParam[Me.ipaControlTolerance]), "43")       ' 0.0000001
  cExport.Add(CStr(e.fParam[Me.ipaFitTolerance]), "44")           ' 0.0000000001
  For i = 1 To e.fParam[Me.ipaTotalKnots]
    cExport.Add(CStr(e.fParam[Me.TotalParams + i - 1]), "40" & "_" & CStr(i))
  Next
  For i = 0 To e.p.Max Step 2
    cExport.Add(CStr(e.p[i]), dxf.codX0 & "_" & CStr(i / 2))
    cExport.Add(CStr(e.p[i + 1]), dxf.codY0 & "_" & CStr(i / 2))
    cExport.Add("0", dxf.codZ0 & "_" & CStr(i / 2))
  Next

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer
  Dim Pbase, PFit As New Float[]
  Dim Ptang1 As New Float[]
  Dim Ptang2 As New Float[]

  e.P.Clear
  For i = 0 To sClaves.Max

    If sClaves[i] = "70" Then e.fParam[Me.ipaFlag] = CInt(sValues[i])
    If sClaves[i] = "71" Then e.fParam[Me.ipaDegree] = CInt(sValues[i])
    If sClaves[i] = "72" Then e.fParam[Me.ipaTotalKnots] = CInt(sValues[i])
    If sClaves[i] = "73" Then e.fParam[Me.ipaTotalControlPoints] = CInt(sValues[i])
    If sClaves[i] = "74" Then e.fParam[Me.ipaTotalFitPoints] = CInt(sValues[i])
    If sClaves[i] = "42" Then e.fParam[Me.ipaKnotTolerance] = CFloat(sValues[i])
    If sClaves[i] = "43" Then e.fParam[Me.ipaControlTolerance] = CFloat(sValues[i])
    If sClaves[i] = "44" Then e.fParam[Me.ipaFitTolerance] = CFloat(sValues[i])

    ' Los Knots estan en el indice me.TotalParams en adelante
    If sClaves[i] = "40" Then e.fParam.Add(CFloat(sValues[i]))

    ' por lo general hay fit points o controls points, pero no ambos, cargo lo que sea en P
    ' Control points
    If sClaves[i] = "10" Then Pbase.Add(CFloat(sValues[i]))
    If sClaves[i] = "20" Then Pbase.Add(CFloat(sValues[i]))

    ' Estos Fitting points no se usan en la construccion, tengo que verificar si los necesitan otros programas para guardarlos y reescribirlos
    If sClaves[i] = "11" Then PFit.Add(CFloat(sValues[i]))
    If sClaves[i] = "21" Then PFit.Add(CFloat(sValues[i]))

    ' tangentes, no se usan DXF
    If sClaves[i] = "12" Then Ptang1.Add(CFloat(sValues[i]))
    If sClaves[i] = "22" Then Ptang1.Add(CFloat(sValues[i]))

    If sClaves[i] = "13" Then Ptang2.Add(CFloat(sValues[i]))
    If sClaves[i] = "23" Then Ptang2.Add(CFloat(sValues[i]))

  Next

  ' con todos los datos recabados, armo el array
  If Pbase.Count > 0 Then
    e.P.Insert(Pbase.Copy(), e.P.Max)
  Else

    ' If Ptang1.Count > 0 Then
    '     e.fParam[Me.ipaTang1] = 1
    '     e.P.Add(Ptang1[0])
    '     e.P.Add(Ptang1[1])
    ' End If
    Dim d As Float
    d = puntos.distancia(PFit[0], PFit[1], PFit[2], PFit[3])

    e.P.Insert(Pfit.Copy(0, 2))

    e.P.Add(PFit[0] + Ptang1[0] * d)
    e.P.Add(PFit[0] + Ptang1[1] * d)
    e.P.Insert(Pfit.Copy(2, PFit.Count - 4))

    d = puntos.distancia(PFit[PFit.Max - 3], PFit[PFit.Max - 2], PFit[PFit.Max - 1], PFit[PFit.Max])
    e.P.Add(PFit[PFit.Max - 1] + Ptang2[0] * d)
    e.P.Add(PFit[PFit.Max] + Ptang2[1] * d)

    e.P.Add(PFit[PFit.Max - 1])
    e.P.Add(PFit[PFit.Max])
  End If
  '
  Return True

  ' catch

  Return False

End

Private Function CoxDeBoor(u As Float, i As Float, k As Float) As Float

  Dim Eq1, Eq2 As Float
  Dim Den1, Den2 As Float

  If (k = 1) Then

    If ((Knots[i] <= u) And (u <= Knots[i + 1])) Then
      Return 1.0
    Else
      Return 0.0
    End If
  End If
  Den1 = Knots[i + k - 1] - Knots[i]
  Den2 = Knots[i + k] - Knots[i + 1]

  If (Den1 > 0) Then
    Eq1 = ((u - Knots[i]) / Den1) * CoxDeBoor(u, i, k - 1)
  End If
  If (Den2 > 0) Then
    Eq2 = (Knots[i + k] - u) / Den2 * CoxDeBoor(u, i + 1, k - 1)
  End If
  Return Eq1 + Eq2

End

' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -GetOutpoint()
'
Public Sub GetOutpoint(t As Float, OutPoint As Float[])

  ' sum the effect Of all CV 's on the curve at this point to
  ' get the evaluated curve point
  Dim i As Integer
  Dim fVal As Float

  For i = 0 To g_num_cvs - 1

    ' calculate the effect Of this point On the curve

    fVal = CoxDeBoor(t, i, g_order)

    If (fVal > 0.001) Then

      ' sum effect Of CV On this part Of the curve
      OutPoint[0] += fVal * g_Points[i * 2 + 0]
      OutPoint[1] += fVal * g_Points[i * 2 + 1]
      OutPoint[2] += 0 'fVal * g_Points[i * 3 + 2] ' Para 3D el array g_points deberia ser 3D
    End If
  Next

End

Public Sub DrawTest(oE As Entity)

  Dim OutPoint As New Float[]
  Dim i As Integer
  Dim t As Float

  If oe.P.Count = 2 Then Return

  If oe.P.Count = 4 Then
    cadLine.Draw(oe)
    Return
  End If
  oe.PolyLine.Clear

  For i = 0 To LOD - 1    ' LOD es el nummero de tramos

    't = Knots[Knots.Max] * i / (LOD - 1)
    t = i / (LOD - 1)
    'If (i = LOD - 1) Then t -= 0.001

    OutPoint = interpolate2(t, oe.fParam[Me.ipaDegree], oe.p, oe.fParam.Copy(10, oe.fParam.Count - 10))

    'gl.Vertex3f(Outpoint[0], Outpoint[1], Outpoint[2])

    oe.PolyLine.Add(Outpoint[0])
    oe.PolyLine.Add(Outpoint[1])

  Next
  'gl.End()

  glPlus.PolyLines(oe.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), oE.LineWidth, oE.LineType.index)

End

Public Sub Draw(oE As Entity)

  ' This routine is based on the work of:
  ' Rob Bateman
  ' Date 9 - feb - 2005
  ' This Is A very simple example Of a bezier curve
  ' Thank you! - Martin

  Dim OutPoint As New Float[]
  Dim i As Integer
  Dim t As Float

  DrawTest(oe)
  Return
  If oe.P.Count = 2 Then Return

  If oe.P.Count = 4 Then
    cadLine.Draw(oe)
    Return
  End If
  oe.PolyLine.Clear
  g_degree = oe.fParam[Me.ipaDegree] ' 2 o 3
  g_order = g_degree + 1

  OutPoint.Insert([0.0, 0.0, 0.0])
  ' rearmo los pesos de los nudos
  Knots.Clear
  Knots.Insert(oe.fParam.Copy(Me.TotalParams, oe.fParam.Count - Me.TotalParams))

  ' rearmo los control points
  g_points.Clear
  g_points.Insert(oe.p.Copy())

  g_num_cvs = g_points.Count / 2

  'gl.Begin(GL.LINE_STRIP)
  For i = 0 To LOD - 1    ' LOD es el nummero de tramos

    t = Knots[Knots.Max] * i / (LOD - 1)

    If (i = LOD - 1) Then t -= 0.001

    GetOutpoint(t, Outpoint)

    'gl.Vertex3f(Outpoint[0], Outpoint[1], Outpoint[2])

    oe.PolyLine.Add(Outpoint[0])
    oe.PolyLine.Add(Outpoint[1])

    OutPoint[0] = 0
    OutPoint[1] = 0
  Next
  'gl.End()

  glPlus.PolyLines(oe.PolyLine, gcd.GetGBColor(oE.Colour, oe.pLayer), oE.LineWidth, oE.LineType.index)

  ' This is to draw the Control Points

  ' gl.Color3f(1, 0, 0)
  ' gl.PointSize(3)
  ' gl.Begin(GL.POINTS)
  ' For i = 0 To g_num_cvs - 1
  '     gl.Vertex3f(g_Points[i], g_Points[i + 1], 0)
  ' Next
  ' gl.End()

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

  Dim i, iFinal As Integer
  Dim fTangLargo As Float
  Dim fControlPoints As New Float[]
  Dim fFitPoint, fKnots As New Float[]

  e.P.Clear

  If c.Exist("ctrl_pts") Then

    For i = 0 To c["ctrl_pts"].Max
      e.P.Add(c["ctrl_pts"][i]["x"])
      e.P.Add(c["ctrl_pts"][i]["y"])
    Next
  End If

  If c.Exist("fit_pts") Then

    For i = 0 To c["fit_pts"].Max
      e.P.Add(c["fit_pts"][i][0])
      e.P.Add(c["fit_pts"][i][1])
    Next
  End If
  ' fabrico control points ente fit_points

  Try e.fParam[Me.ipaFlag] = CFloat(c["closed_b"])
  Try e.fParam[Me.ipaDegree] = CInt(c["degree"])

  Try e.fParam[Me.ipaTotalControlPoints] = c["ctrl_pts"].Count
  Try e.fParam[Me.ipaTotalFitPoints] = c["fit_pts"].Count
  Try e.fParam[Me.ipaKnotTolerance] = CFloat(c["knot_tol"])
  Try e.fParam[Me.ipaControlTolerance] = CFloat(c["ctrl_tol"])
  Try e.fParam[Me.ipaFitTolerance] = CFloat(c["fit_tol"])

  ' i = 2
  ' Do
  '
  '   fControlPoints.Add((e.P[i] + e.P[i + 2]) / 2)
  '   fControlPoints.Add((e.P[i + 1] + e.P[i + 3]) / 2)
  '   fFitPoint.Add(e.P[i + 2])
  '   fFitPoint.Add(e.P[i + 3])
  '   e.P.insert(fControlPoints, i + 2)
  '   e.P.Insert(fFitPoint, i + 4)
  '   fControlPoints.Clear
  '   fFitPoint.Clear
  '   i = i + 6
  ' Loop Until i > iFinal
  '
  '
  If c.Exist("beg_tan_vec") Then
    fTangLargo = puntos.distancia(e.P[0], e.P[1], e.P[2], e.P[3]) / 5
    'fTangLargo = 1
    e.P.Insert([e.P[0] + c["beg_tan_vec"][0] * fTangLargo, e.P[1] + c["beg_tan_vec"][1] * fTangLargo], 2)

  Endif

  If c.Exist("end_tan_vec") Then
    fTangLargo = puntos.distancia(e.P[e.P.Max - 3], e.P[e.P.Max - 2], e.P[e.P.Max - 1], e.P[e.P.Max]) / 5
    'fTangLargo = 1
    e.P.Insert([e.P[e.P.Max - 1] - c["end_tan_vec"][0] * fTangLargo, e.P[e.P.Max] - c["end_tan_vec"][1] * fTangLargo], e.P.max - 1)

  Endif
  ' Los Knots estan en el indice me.TotalParams en adelante
  If c.Exist("knots") Then
    e.fParam.insert(c["knots"].Copy())
    e.fParam[Me.ipaTotalKnots] = c["knots"].Count
  Else

    fKnots.Clear
    Dim initknot As Float = 3

    fKnots.Add(initknot)
    fKnots.Add(initknot)
    fKnots.Add(initknot)

    Dim factorknot As Float = 1

    'If e.P.Count / 2 > 3 Then
    For i = 0 To e.P.count / 2 - e.fParam[Me.ipaDegree]
      fKnots.Add(i / factorknot + initknot)
    Next
    'End If
    fKnots.Add((e.P.count / 2 - e.fParam[Me.ipaDegree]) / factorknot + initknot)
    fKnots.Add((e.P.count / 2 - e.fParam[Me.ipaDegree]) / factorknot + initknot)
    fKnots.Add((e.P.count / 2 - e.fParam[Me.ipaDegree]) / factorknot + initknot)
    e.fParam.insert(fKnots.Copy())
  End If

  ' puede habre tangentes

  If e.P.Count = 0 Then e.P.Insert([0, 0, 0, 0, 0, 0, 0, 0])

  Return True

  'Catch

  Return False

End

'      "entity": "SPLINE",
'      "index": 3357,
'      "type": 36,
'      "handle": [0, 1249847],
'      "size": 418,
'      "bitsize": 3284,
'      "ownerhandle": [12, 1, 2, 1249845],
'      "_subclass": "AcDbEntity",
'      "prev_entity": [4, 0, 0, 0],
'      "next_entity": [6, 0, 0, 1249848],
'      "layer": [5, 1, 16, 16],
'      "preview_exists": 0,
'      "entmode": 0,
'      "nolinks": 0,
'      "color": 256,
'      "ltype_scale": 1.0,
'      "ltype_flags": 0,
'      "plotstyle_flags": 0,
'      "invisible": 0,
'      "linewt": 29,
'      "_subclass": "AcDbSpline",
'      "scenario": 1,
'      "degree": 3,
'      "rational": 0,
'      "closed_b": 0,
'      "periodic": 0,
'      "knot_tol": 0.0000000001,
'      "ctrl_tol": 0.0000000001,
'      "weighted": 0,
'      "knots": [
'        0.00000000000000,
'        0.00000000000000,
'        0.00000000000000,
'        0.00000000000000,
'        0.11913126411571,
'        0.23975678553509,
'        0.49083550137789,
'        1.04447328364244,
'        1.44003107270299,
'        1.55491017607702,
'        1.92016945852300,
'        2.22324540117473,
'        2.48758013168516,
'        2.82200084095037,
'        3.00883554387170,
'        3.16218973969312,
'        3.16218973969312,
'        3.16218973969312,
'        3.16218973969312
'      ],
'      "ctrl_pts": [
'        {
'          "x": -0.21323049241494,
'          "y": 0.84482240616663,
'          "z": 0.0
'        },
'        {
'          "x": -0.1847166715454,
'          "y": 0.87190801033913,
'          "z": 0.0
'        },
'        {
'          "x": -0.1228526953775,
'          "y": 0.922359536827,
'          "z": 0.0
'        },
'        {
'          "x": 0.02043360444333,
'          "y": 1.00035857198183,
'          "z": 0.0
'        },
'        {
'          "x": 0.27257295630051,
'          "y": 1.1752608208499,
'          "z": 0.0
'        },
'        {
'          "x": 0.61052372379078,
'          "y": 1.38248143619054,
'          "z": 0.0
'        },
'        {
'          "x": 0.92880308857434,
'          "y": 1.54637696665506,
'          "z": 0.0
'        },
'        {
'          "x": 1.21565315275478,
'          "y": 1.6043944582336,
'          "z": 0.0
'        },
'        {
'          "x": 1.47769680033207,
'          "y": 1.61054542981341,
'          "z": 0.0
'        },
'        {
'          "x": 1.78840999609696,
'          "y": 1.61736294507911,
'          "z": 0.0
'        },
'        {
'          "x": 2.08859470791577,
'          "y": 1.60619051383182,
'          "z": 0.0
'        },
'        {
'          "x": 2.35172325891301,
'          "y": 1.59913454504708,
'          "z": 0.0
'        },
'        {
'          "x": 2.57162173748583,
'          "y": 1.55677519634268,
'          "z": 0.0
'        },
'        {
'          "x": 2.68480471484867,
'          "y": 1.53475995596965,
'          "z": 0.0
'        },
'        {
'          "x": 2.73031030857453,
'          "y": 1.51193841889326,
'          "z": 0.0
'        }
'      ]

Public Function interpolate(t As Float, degree As Integer, points As Float[], Optional knots As Float[], weights As Float[]) As Float[]

  Dim i, j, s, l As Integer ' function - scoped iteration variables
  Dim d As Integer = 2 ' 2d o 3d o mas dimensiones
  Dim Resultado As New Float[]
  Dim n As Integer = points.Count / d ' numero de puntos

  If (degree < 1) Then Stop ' Error( 'degree must be at least 1 (linear)')
  If (degree > (n - 1)) Then Stop ' Error( 'degree must be less than or equal to point count - 1')

  ' Genero los pesos de cada punto para el caso que no sean provistos
  If Not weights Then
    ' build weight vector Of length[n]
    weights = New Float[]
    weights.Add(1)
    weights.Add(1)
    For i = 1 To n - 3
      weights.Add(1)
    Next
    weights.Add(1)
    weights.Add(1)
  Endif

  ' genero los nudos
  If Not knots Then
    ' build knot vector Of length[n + degree + 1]
    knots = New Float[]
    For i = 0 To n + degree
      knots.Add(i)
    Next
  Else ' lo verifico
    If (knots.Count <> n + degree + 1) Then Stop  'Error( 'bad knot vector length')
  Endif

  Dim domain As New Float[]
  domain.Insert([degree, knots.count - 1 - degree])

  ' remap t To the domain where the spline Is Defined
  Dim low As Float = knots[domain[0]]
  Dim high As Float = knots[domain[1]]
  t = t * (high - low) + low

  If (t < low) Or (t > high) Then Stop ' Error( 'out of bounds')

  ' find s(the spline segment) For the[t]value provided
  For s = domain[0] To domain[1] - 1
    If (t >= knots[s]) And (t <= knots[s + 1]) Then
      Break
    Endif
  Next

  Debug "S=", s

  ' convert points To homogeneous coordinates (gana una dimension mas)
  Dim v As New Float[]   ' v=[x1,y1,w1,x2,y2,w2.....] w=weigth
  For i = 0 To n - 1
    For j = 0 To d - 1
      v.Add(points[i * d + j] * weights[i])
    Next
    ' esto no se
    v.Add(weights[i])
  Next

  ' l(level)goes From 1 To the curve degree + 1
  Dim alpha As Float
  For l = 1 To degree + 1
    ' build level l Of the pyramid
    For i = s To s - degree + l Step -1
      alpha = (t - knots[i]) / (knots[i + degree + 1 - l] - knots[i])
      ' interpolo cada dimension
      For j = 0 To d
        v[i * (d + 1) + j] = (1 - alpha) * v[(i - 1) * (d + 1) + j] + alpha * v[i * (d + 1) + j]
      Next
    Next
  Next

  ' convert back To cartesian And Return
  For i = 0 To d - 1
    Resultado.Add(v[s * (d + 1) + i] / v[s * (d + 1) + d])
  Next

  Return Resultado

End

Public Function interpolate2(t As Float, degree As Integer, points As Float[], Optional knots As Float[], weights As Float[]) As Float[]

  Dim i, j, s, l As Integer ' function - scoped iteration variables
  Dim d As Integer = 2 ' 2d o 3d o mas dimensiones
  Dim Resultado As New Float[]
  Dim n As Integer = points.Count / d ' numero de puntos

  If (degree < 1) Then Stop ' Error( 'degree must be at least 1 (linear)')
  If (degree > (n - 1)) Then Stop ' Error( 'degree must be less than or equal to point count - 1')

  ' Genero los pesos de cada punto para el caso que no sean provistos
  If Not weights Then
    ' build weight vector Of length[n]
    weights = New Float[]
    weights.Add(1)
    weights.Add(1)
    For i = 1 To n - 3
      weights.Add(1)
    Next
    weights.Add(1)
    weights.Add(1)
  Endif

  ' genero los nudos
  If Not knots Then knots = New Float[]
  If knots.Count = 0 Then
    ' build knot vector Of length[n + degree + 1]

    For i = 0 To n + degree
      knots.Add(i)
    Next
  Else ' lo verifico
    If (knots.Count <> n + degree + 1) Then Stop  'Error( 'bad knot vector length')
  End If

  Dim domain As New Float[]
  domain.Insert([degree, knots.count - 1 - degree])

  ' remap t To the domain where the spline Is Defined
  Dim low As Float = knots[domain[0]]
  Dim high As Float = knots[domain[1]]
  t = t * (high - low) + low

  If (t < low) Or (t > high) Then Debug "Stop Error(out of bounds)"

  ' find s(the spline segment) For the[t]value provided
  For s = domain[0] To domain[1] - 1
    If (t >= knots[s]) And (t <= knots[s + 1]) Then
      Break
    Endif
  Next
  If s > domain[1] - 1 Then s = domain[1] - 1

  'Debug "S=", s

  ' convert points To homogeneous coordinates (gana una dimension mas)
  Dim v As New Float[][]   ' v=[x1,y1,w1,x2,y2,w2.....] w=weigth
  For i = 0 To n - 1
    v.Add([])
    For j = 0 To d - 1
      v[i].Add(points[i * d + j] * weights[i])
    Next
    ' esto no se
    v[i].Add(weights[i])
  Next

  ' l(level)goes From 1 To the curve degree + 1
  Dim alpha As Float
  For l = 1 To degree + 1
    ' build level l Of the pyramid
    For i = s To s - degree + l Step -1
      If (knots[i + degree + 1 - l] - knots[i]) <> 0 Then
        alpha = (t - knots[i]) / (knots[i + degree + 1 - l] - knots[i])
      Else
        alpha = 1 'or 0
      End If
      ' interpolo cada dimension
      For j = 0 To d
        v[i][j] = (1 - alpha) * v[(i - 1)][j] + alpha * v[i][j]
      Next
    Next
  Next

  ' convert back To cartesian And Return
  For i = 0 To d - 1
    Resultado.Add(v[s][i] / v[s][d])
  Next

  Return Resultado

End
