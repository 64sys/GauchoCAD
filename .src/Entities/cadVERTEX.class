' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
'Fast
Inherits CadPoint

Public Const Gender As String = "Vertex"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const HelperTrabajo As String = ("a 3D point")
Public Const ParamType As String = "P"                             ' that is Point, Point; could be Color Text, etc
Public Const ParamHelper As String = "Point"
Public Const GAMBASCADENTITY As String = "EntityBase"
Public Const USEWITH As String = "EntityBuilder"

' fParam helpers
Public Const TotalParams As Integer = 10
Public Const ipaWidthStart40 As Integer = 0
Public Const ipaWidthEnd41 As Integer = 1
Public Const ipaBulge42 As Integer = 2
Public Const ipaFlags70 As Integer = 3
Public Const ipaCurveDiection50 As Integer = 4
Public Const ipaMeshIndex1_71 As Integer = 5
Public Const ipaMeshIndex2_72 As Integer = 6
Public Const ipaMeshIndex3_73 As Integer = 7
Public Const ipaMeshIndex4_74 As Integer = 8
Public Const ipaIdentifier91 As Integer = 9

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

  cExport.Add("VERTEX", dxf.codEntity)
  clsEntities.DXFExportCommonCol(e, cExport)
  cExport.Add("AcDbPoint", "100")
  cExport.Add(CStr(e.p[0]), dxf.codX0)
  cExport.Add(CStr(e.p[1]), dxf.codY0)
  cExport.Add("0", DXF.codZ0)
  cExport.Add(CStr(e.fParam[0]), "39")

End

' 100 Subclass marker(AcDbPoint)
'
' 10 Point location( In WCS) DXF: X value; APP: 3 D point
'
' 20, 30 DXF: Y And Z values Of point location( In WCS)
'
' 39 Thickness(Optional ; Default = 0)
'
' 210 Extrusion direction(Optional ; Default = 0, 0, 1) DXF: X value; APP: 3 D vector
'
' 220, 230 DXF: Y And Z values Of extrusion direction(Optional )
'
' 50 Angle Of the X axis For the UCS In effect when the point was drawn(Optional , Default = 0); used when PDMODE Is Nonzero
Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer

  e.P.Clear

  For i = 0 To sClaves.Max

    If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "30" Then e.P.Add(CFloat(sValues[i]))

    ' 40 Starting width(Optional ; Default Is 0)
    If sClaves[i] = "40" Then e.fParam[Me.ipaWidthStart40] = CFloat(sValues[i])

    ' 41 Ending width(Optional ; Default Is 0)
    If sClaves[i] = "41" Then e.fParam[Me.ipaWidthEnd41] = CFloat(sValues[i])

    ' 42 Bulge(Optional ; Default Is 0).The bulge Is The tangent Of one fourth the included angle For an arc segment, made negative If the arc goes clockwise From the start point To the endpoint.A bulge Of 0 indicates a straight segment, And a bulge Of 1 Is A semicircle

    If sClaves[i] = "42" Then e.fParam[Me.ipaBulge42] = CFloat(sValues[i])

    ' 70 Vertex flags:

    ' 1 = Extra vertex created by curve - fitting
    '
    ' 2 = Curve - fit tangent defined For this vertex.A curve - fit tangent direction Of 0 may be omitted From DXF Output but Is Significant If this bit Is Set
    '
    ' 4 = Not used
    '
    ' 8 = Spline vertex created by spline - fitting
    '
    ' 16 = Spline frame control point
    '
    ' 32 = 3 D polyline vertex
    '
    ' 64 = 3 D polygon mesh
    '
    ' 128 = Polyface mesh vertex
    If sClaves[i] = "70" Then e.fParam[Me.ipaFlags70] = CFloat(sValues[i])

    ' 50 Curve fit tangent direction

    If sClaves[i] = "50" Then e.fParam[Me.ipaCurveDiection50] = CFloat(sValues[i])

    ' 71 Polyface mesh vertex index(Optional ; present only If nonzero)
    If sClaves[i] = "71" Then e.fParam[Me.ipaMeshIndex1_71] = CFloat(sValues[i])

    ' 72 Polyface mesh vertex index(Optional ; present only If nonzero)
    If sClaves[i] = "72" Then e.fParam[Me.ipaMeshIndex2_72] = CFloat(sValues[i])
    ' 73 Polyface mesh vertex index(Optional ; present only If nonzero)
    If sClaves[i] = "73" Then e.fParam[Me.ipaMeshIndex1_73] = CFloat(sValues[i])        ' 74 Polyface mesh vertex index(Optional ; present only If nonzero)
    If sClaves[i] = "74" Then e.fParam[Me.ipaMeshIndex1_74] = CFloat(sValues[i])
    ' 91 Vertex identifier
    If sClaves[i] = "91" Then e.fParam[Me.ipaIdentifier91] = CFloat(sValues[i])

  Next

  If e.P.Count = 2 Then e.P.Add(0)            ' ensures a 3D point

  Return True

  ' catch

  Return False

End

Public Function ImportJsonCol(c As JSONCollection, e As Entity) As Boolean

  e.P.Clear
  e.P.Add(c["point"][0])
  e.P.Add(c["point"][1])

  Return True

Catch

  Return False

End