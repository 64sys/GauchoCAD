' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Fast
Inherits EntityBase
Public Const GENDER As String = "Text"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Inserts a text")
Public Const ParamType As String = "PAFT"
Public Const ParamHelper As String = ("Start point;Angle;Heigth;")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 0 ; 10 ; "
Public Const StretchAble As Boolean = False

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return
    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)

    glPlus.DrawText(oE.StringData, oE.p[0], oE.p[1], oE.fParam[0], oE.fParam[1], oE.ColorToPaint)

End

Public Function Draw2(oE As Entity)

    If Not oE.Visible Then Return

    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)

    Dim angulo As Float, hText As New PaintExtents, lText As String
    Dim FontScalePrev As Float

    paint.Save

    'FontScalePrev = paint.FontScale
    paint.LineWidth = 1
    ' La cota puede estar inclinada, entonces debo rotarla

    If oE.fParam.Count > 0 Then

        angulo = oE.fParam[0] / 180 * Pi    ' ojo OPENGL--> GRADOS, GAMBAS-->RADIANESDXF

    Else

        angulo = 0

    End If

    If oE.StringData = "" Then

        ltext = "ABCdef123"

    Else

        ltext = oE.StringData

    End If

    If oE.fParam.Count > 1 Then

        If oE.fParam[1] <= 0 Then
            paint.Font.Size = 10
        Else ' FIXME: hay problemas con el ancho del total del texto que no acompaÃ±a el zooming
            paint.Font.Size = oE.fParam[1]
        End If

    Else
        ' cuando ScaleZoom es 0.15 el texto coincide con DXF
        ' entonces voy a trabajar con esa relacion

        paint.Font.Size = 10

    End If

    htext = paint.TextExtents(ltext)

    paint.brush = Paint.Color(oE.ColorToPaint)

    paint.Translate(oE.p[0], oE.p[1])
    paint.Rotate(-angulo)
    paint.Scale(1, -1)

    paint.DrawText(ltext)

    paint.Stroke

    paint.Restore

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer

    If arrIndex < 0 Then arrIndex = appmain.hFCAD.arrEntities.Max       ' si este valor no es provisto , estos POI son de la ultima entidad

    ' points
    appmain.hFCAD.poiPoints.insert([oE.p[0], oE.p[1]])
    appmain.hFCAD.poiType.Add(gcd.poiBasePoint)
    APPMain.hFCAD.poiEntities.Add(arrIndex)

    ' line

    ' BoundingPoligon

    Dim tRect As New Float[], poli As New Float[]

    tRect = glPlus.TextExtends(oE.StringData, oE.fParam[1])
    poli.Insert([0, 0, tRect[0], 0, tRect[0], tRect[1], 0, tRect[1]]) ' armo el poligono , que ya tiene la escala
    puntos.Rotate(Poli, oE.fParam[0] * Pi / 180)
    puntos.Translate(Poli, oE.P[0], oE.P[1])

    appmain.hFCAD.poiPoligons.Insert(poli)
    appmain.hFCAD.poiPoligonStartIndex.Add(appmain.hFCAD.poiPoligons.Count - poli.Count)
    appmain.hFCAD.poiPoligonElements.Add(poli.Count / 2)
    appmain.hFCAD.poiPoligonEntities.Add(arrIndex)

End
