' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Represents a simple acotation
' Element maintained by Terco
' V3
Inherits EntityBase
Public Const GENDER As String = "Text"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Inserts a text")
Public Const ParamType As String = "PAFT"
Public Const ParamHelper As String = ("Start point;Angle;Heigth;")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 0 ; 10 ; "
Public Const StretchAble As Boolean = False

Public Sub Draw()

    If Not Me.DrawAble Or Not Me.Visible Then Return
    If Me.Selected And Not modCAD.ToolActive Then Me.ColorToPaint = modCAD.ColorForSelected Else Me.ColorToPaint = Me.gbColor

    If modCAD.drwDrawingClass = modCAD.drwPaintClass Then

        Dim angulo As Float, hText As New PaintExtents, lText As String
        Dim FontScalePrev As Float

        paint.Save

        'FontScalePrev = paint.FontScale
        paint.LineWidth = 1
        ' La cota puede estar inclinada, entonces debo rotarla

        If Me.fParam.Count > 0 Then

            angulo = Me.fParam[0] / 180 * Pi    ' ojo OPENGL--> GRADOS, GAMBAS-->RADIANESDXF

        Else

            angulo = 0

        End If

        If Me.StringData = "" Then

            ltext = "ABCdef123"

        Else

            ltext = Me.StringData

        End If

        If Me.fParam.Count > 1 Then

            If Me.fParam[1] <= 0 Then
                paint.Font.Size = 10
            Else ' FIXME: hay problemas con el ancho del total del texto que no acompaÃ±a el zooming
                paint.Font.Size = Me.fParam[1]
            End If

        Else
            ' cuando ScaleZoom es 0.15 el texto coincide con DXF
            ' entonces voy a trabajar con esa relacion

            paint.Font.Size = 10

        End If

        htext = paint.TextExtents(ltext)

        paint.brush = Paint.Color(Me.ColorToPaint)

        paint.Translate(Me.p[0], Me.p[1])
        paint.Rotate(-angulo)
        paint.Scale(1, -1)

        paint.DrawText(ltext)

        paint.Stroke

        paint.Restore
    End If

    If modCAD.drwDrawingClass = modCAD.drwOpenGLClass Then

        glPlus.DrawText(Me.StringData, Me.p[0], Me.p[1], Me.fParam[0], Me.fParam[1], Me.ColorToPaint)

    End If

End

Public Sub CreateBoundingPoligon()

    ' checkk Viga / Beam to see how its done

    Me.BoundingPoligon.Clear

    Dim BpX, BpZ, l As Float, Rotated As Float[]
    l = puntos.distancia(Me.p[0], Me.p[1], Me.p[2], Me.p[3])

    ' From an unrotated point of view, our bouding points look like
    ' 1
    BpX = Me.p[0]
    BpZ = Me.p[1] - Me.fParam[0] / 2  ' thats wall thickness

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(Me.p[0], Me.p[1], (Me.p[3] - Me.p[1]) / l, (Me.p[2] - Me.p[0]) / l, BpX, Bpz)
    Me.BoundingPoligon.Insert(rotated)     ' pair

    ' 2
    BpX = Me.p[0] + l
    BpZ = Me.p[1] - Me.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(Me.p[0], Me.p[1], (Me.p[3] - Me.p[1]) / l, (Me.p[2] - Me.p[0]) / l, BpX, Bpz)
    Me.BoundingPoligon.Insert(rotated)     ' pair

    ' 3
    BpX = Me.p[0] + l
    BpZ = Me.p[1] + Me.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(Me.p[0], Me.p[1], (Me.p[3] - Me.p[1]) / l, (Me.p[2] - Me.p[0]) / l, BpX, Bpz)
    Me.BoundingPoligon.Insert(rotated)     ' pair

    ' 4
    BpX = Me.p[0]
    BpZ = Me.p[1] + Me.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(Me.p[0], Me.p[1], (Me.p[3] - Me.p[1]) / l, (Me.p[2] - Me.p[0]) / l, BpX, Bpz)
    Me.BoundingPoligon.Insert(rotated)     ' pair

End
