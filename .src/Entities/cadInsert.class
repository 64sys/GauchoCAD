' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits EntityBase
Public Const Gender As String = "Insert"
Public Const HelperTrabajo As String = ("Inserts a block")
Public Const ParamType As String = "TPFFF"
Public Const ParamHelper As String = "BlockName; Position ; X scale ; Y scale ; Rotation"
Public Const ParamDefault As String = "<no name>; 0,0 ; 1 ;1 ; 0"

' fParam helpers
Public Const TotalParams As Integer = 4
Public Const ipaEscX As Integer = 0
Public Const ipaEscY As Integer = 1
Public Const ipaEscZ As Integer = 2
Public Const ipaRotacion As Integer = 3
'Public Const ipaInsertion As Integer = 3

' special vars

Public CurrLType As Integer
Public CurrColor As Integer
Public CurrLwt As Float

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.P, radians)
  E.fParam[Me.ipaRotacion] += radians

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  E.fParam[Me.ipaEscX] *= sX
  E.fParam[Me.ipaEscY] *= sY
  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX
    e.P[i + 1] = e.P[i + 1] * sY

  Next

End

Public Sub Draw(oE As Entity)

  Dim ET As Entity, i As Integer
  Dim pBlockToDraw As Block

  If Not oe.Finished Then Return

  ' gl.PushMatrix
  ' If Relative Then gl.Translatef(fMain.pixels(oE.p[0]) / gcd.CurrDrawing.ScaleZoom, fMain.pixels(oE.p[1]) / gcd.CurrDrawing.ScaleZoom, 0)
  ' gl.Rotatef(oE.fParam[Me.ipaRotacion], 0, 0, 1)
  ' gl.Scalef(oE.fParam[Me.ipaEscX], oE.fParam[Me.ipaEscY], oE.fParam[Me.ipaEscZ])
  If oe.pBlock Then Draw_List(oe.pBlock.entities, oe, oe.pBlock.AbsoluteCoords)

End

Public Sub Draw_List(eList As Collection, eParent As Entity, Optional InsertionPlace As Integer = 0)
  'insertion place:
  ' 0 = entity.P[0],[1]
  ' 1 = entity.pBlock.entities.P[0],[1]
  ' 2 = entity.pBlock.x0,y0

  Dim et As Entity

  gl.PushMatrix
  If InsertionPlace = 0 Then
    gl.Translatef(gcd.Pixels(eParent.p[0]) / gcd.CurrentDrawing.ScaleZoom, gcd.Pixels(eParent.p[1]) / gcd.CurrentDrawing.ScaleZoom, 0)
  Else If InsertionPlace = 1 Then
    ' absolute coordinate, so each entity has its own position
    ' nothing to translate
  Else If InsertionPlace = 2 Then
    gl.Translatef(gcd.Pixels(eParent.pBlock.x0) / gcd.CurrentDrawing.ScaleZoom, gcd.Pixels(eParent.pBlock.y0) / gcd.CurrentDrawing.ScaleZoom, 0)

  End If

  gl.Rotatef(eParent.fParam[Me.ipaRotacion], 0, 0, 1)

  gl.Scalef(eParent.fParam[Me.ipaEscX], eParent.fParam[Me.ipaEscY], eParent.fParam[Me.ipaEscZ])

  For Each ET In eList
    et.visible = True
    et.LineType = eParent.LineType
    et.colour = eParent.colour
    et.LineWidth = eParent.LineWidth

    If et.Gender = "Insert" Then

      If et.pBlock Then Draw_List(et.pBlock.entities, et)
    Else
      et.ClassHandler.Draw(et)
    End If

  Next
  gl.PopMatrix

End

'' A selected version of the entity
Public Sub DrawSelected(oE As Entity)

  ' Dim ET As Entity, i As Integer
  '
  ' ' FIXME this does not work for Inserts cointaining other inserst
  '
  ' For i = oe.iInsert + 1 To gcd.CurrDrawing.arrEntities.max
  '   If gcd.CurrDrawing.arrEntities[i].iInsert <> oe.iInsert Then Break
  '   gcd.CurrDrawing.arrEntities[i].ClassHandler.DrawSelected(gcd.CurrDrawing.arrEntities[i])
  '
  ' Next

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

  Dim ET As Entity, i As Integer

  ' DEPRECADO
  ' For i = oe.iInsert + 1 To gcd.CurrDrawing.arrEntities.max
  '     If gcd.CurrDrawing.arrEntities[i].iInsert = -1 Then Break
  '     gcd.CurrDrawing.arrEntities[i].ClassHandler.DrawRemark(gcd.CurrDrawing.arrEntities[i])
  '
  ' Next

End

Public Function Draw2(oE As Entity)

  ' If Not oE.Visible Then Return
  '
  ' Dim ET As Entity, i As Integer
  ' paint.save
  ' paint.Translate(fMain.pixels(oE.p[0]) / gcd.CurrDrawing.ScaleZoom, fMain.pixels(oE.p[1]) / gcd.CurrDrawing.ScaleZoom)
  ' paint.Scale(oE.fParam[0], oE.fParam[1])
  ' paint.Rotate(oE.fParam[2])
  ' gcd.ScaleLines = (Abs(oE.fParam[0]) + Abs(oE.fParam[1])) / 2
  ' For Each ET In gcd.CurrDrawing.arrBlocks[i].entities
  '   et.Draw
  ' Next
  ' gcd.ScaleLines = 1
  ' paint.Restore

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

  ' si este valor no es provisto , estos POI son de la ultima entidad

  oe.PoiPoints.Clear
  oe.PoiType.Clear
  oe.Polygon.Clear

  ' points
  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiBasePoint)
  'oe.poiEntities.Add(arrIndex)

  ' polygon
  Dim fLimits As Float[]
  If IsNull(oe.pBlock) Then Return ' Stop
  fLimits = clsEntities.ComputeLimits(oe.pBlock.entities)
  If IsNull(fLimits) Then Return
  oe.Polygon.Insert([fLimits[0], fLimits[1], fLimits[2], fLimits[1], fLimits[2], fLimits[3], fLimits[0], fLimits[3]])
  puntos.Scale(oe.Polygon, oe.fParam[cadInsert.ipaEscX], oe.fParam[cadInsert.ipaEscY])
  puntos.Rotate(oe.Polygon, oe.fParam[cadInsert.ipaRotacion] * Pi / 180) ' TODO: verificar orden de esta y la siguiente linea
  puntos.Translate(oe.Polygon, oe.P[0], oe.P[1])
  'If oe.fParam[cadInsert.ipaRotacion] <> 0 Then Stop

End

'

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

  cExport.Add("INSERT", dxf.codEntity)
  clsEntities.DXFExportCommonCol(e, cExport)
  cExport.Add("AcDbBlockReference", "100")
  cExport.Add(e.pBlock.name, dxf.codName)
  cExport.Add(CStr(e.p[0]), dxf.codX0)
  cExport.Add(CStr(e.p[1]), dxf.codY0)
  cExport.Add("0", dxf.codZ0)

  cExport.Add(CStr(e.fParam[Me.ipaEscX]), "40")           ' X scale factor
  cExport.Add(CStr(e.fParam[Me.ipaEscY]), "41")           ' Y scale factor
  cExport.Add(CStr(e.fParam[Me.ipaEscZ]), "42")           ' Z scale factor
  cExport.Add(CStr(e.fParam[Me.ipaRotacion]), "50")       ' rotation

  cExport.Add("1", "70")
  cExport.Add("1", "71")
  cExport.Add("0", "44")
  cExport.Add("0", "45")

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer

  ' tengo q presuponer que las escalas son = 1
  e.fParam[Me.ipaEscX] = 1    ' esc X
  e.fParam[Me.ipaEscY] = 1    ' esc Y
  e.fParam[Me.ipaEscZ] = 1    ' esc Z

  For i = 0 To sClaves.Max

    If sClaves[i] = "2" Then e.pBlock = clsEntities.FIndBlock(sValues[i])
    If sClaves[i] = "10" Then e.P[0] = (CFloat(sValues[i]))         ' X
    If sClaves[i] = "20" Then e.P[1] = (CFloat(sValues[i]))         ' Y
    If sClaves[i] = "41" Then e.fParam[Me.ipaEscX] = CFloat(sValues[i])         ' esc X
    If sClaves[i] = "42" Then e.fParam[Me.ipaEscY] = CFloat(sValues[i])         ' esc Y
    If sClaves[i] = "43" Then e.fParam[Me.ipaEscZ] = CFloat(sValues[i])         ' esc Z
    If sClaves[i] = "50" Then e.fParam[Me.ipaRotacion] = CFloat(sValues[i])      ' rotacion
  Next

  If e.fParam[Me.ipaEscZ] = 0 Then e.fParam[Me.ipaEscZ] = 1    ' esc Z
  ' esc Z

  Return True

  '' catch

  Return False

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

  '    MANEJADO EN clsEntities
  '============================
  '   "entity": "INSERT",
  '   "index": 2370,
  '   "type": 7,
  '   "handle": [0, 1182141],
  '   "size": 64,
  '   "bitsize": 437,
  '   "ownerhandle": [12, 1, 27, 1182114],
  '   "_subclass": "AcDbEntity",
  '   "layer": [5, 2, 16840, 16840],
  '   "preview_exists": 0,
  '   "entmode": 0,
  '   "nolinks": 1,
  '   "color": 0,
  '   "ltype_scale": 0.2,
  '   "ltype_flags": 0,
  '   "plotstyle_flags": 0,
  '   "invisible": 0,
  '   "linewt": 30,
  '   "_subclass": "AcDbBlockReference",

  '   "ins_pt": [2897.47088581027083, 1635.43128744943124, 0.0],
  e.P.Clear
  e.P.Add(c["ins_pt"][0])
  e.P.Add(c["ins_pt"][1])

  '   "scale_flag": 2,
  '   "scale": [0.1, 0.1, 0.1],
  e.fParam[Me.ipaEscX] = c["scale"][0]
  e.fParam[Me.ipaEscY] = c["scale"][1]
  e.fParam[Me.ipaEscZ] = c["scale"][2]

  '   "rotation": 1.5707963267949,
  e.fParam[Me.ipaRotacion] = c["rotation"] * 180 / Pi

  '   "extrusion": [0.0, 0.0, 1.0],
  '   "has_attribs": 0,
  '   "block_header": [5, 2, 606, 606]
  'e.Block = gcd.CurrentDrawing.cModel["BLOCKS"][c["block_header"][3]]["name"]
  e.pBlock = clsEntities.FIndBlock(gcd.CurrentDrawing.cModel["BLOCKS"][c["block_header"][3]]["name"])

  Return True

  'Catch

  Return False

End
