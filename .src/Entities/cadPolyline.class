' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
'Fast
Inherits CadLWPolyline

Public Const Gender As String = "Polyline"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const HelperTrabajo As String = ("a polyline of segments")

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  If Me.StepsDone = 0 Then

    Try eBuild.P[0] = vParam[1]
    Try eBuild.P[1] = vParam[2]

    If definitive Then Return True

  Endif

End

Public Sub Draw(oE As Entity)

  Dim ePart As Entity

  If Not oE.Visible Then Return

  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.pLayer)
  ' construyo una poliliea
  oe.PolyLine.Clear
  For Each ePart In oe.pBlock.entities
    If ePart.Gender Like "Vertex*" Then
      oe.PolyLine.Add(ePart.P[0])
      oe.PolyLine.Add(ePart.P[1])
    End If
  Next
  ' If oe.PolyLine.Count > 0 Then
  '   If (oe.PolyLine[oe.PolyLine.max] = oe.PolyLine[1]) And (oe.PolyLine[oe.PolyLine.max - 1] = oe.PolyLine[0]) Then
  '
  '     Print "Poly cerradita"
  '   Else
  '     Print "Poly abierta"
  '
  '   Endif
  ' End If
  glPlus.PolyLines(oe.PolyLine, oe.ColorToPaint, oE.LineWidth, oE.LineType.index, oe.iParam[Me.iiiPolylineClosed])

End

'' The paint version of the entity
Public Function Draw2(oE As Entity)

  paintPlus.Lines(oe.PolyLine)

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

  ' si este valor no es provisto , estos POI son de la ultima entidad

  oe.PoiPoints.Clear
  oe.PoiType.Clear

  ' points: end-mid-end
  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiEndPoint)

End

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

  cExport.Add("POINT", dxf.codEntity)
  clsEntities.DXFExportCommonCol(e, cExport)
  cExport.Add("AcDbPoint", "100")
  cExport.Add(CStr(e.p[0]), dxf.codX0)
  cExport.Add(CStr(e.p[1]), dxf.codY0)
  cExport.Add("0", DXF.codZ0)
  cExport.Add(CStr(e.fParam[0]), "39")

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer

  e.P.Clear
  For i = 0 To sClaves.Max

    If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
    'If sClaves[i] = "30" Then e.P.Add(CFloat(sValues[i]))
    'If sClaves[i] = "39" Then e.fParam.Add(CFloat(sValues[i]))

    If sClaves[i] = "70" Then e.iParam[Me.iiiPolylineClosed] = (CInt(sValues[i]) And 1)

  Next
  Return True

  ' catch

  Return False

End

Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

  Dim i As Integer

  e.P.Clear

  ' FIXME: esto indica si es abierta o cerrada
  'If (CInt(c["flag"]) And 1) = 1 Then e.iParam[Me.iiiPolylineClosed] = 1

  Return True

  'Catch

  Return False

End
