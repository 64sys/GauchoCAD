' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast

Public Const Gender As String = "MText"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Inserts a multiline text")
Public Const ParamType As String = "PAFT"
Public Const ParamHelper As String = "Start point;Angle;Heigth;"     ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 0 ; 10 ; "
Public Const GAMBASCADENTITY As String = "EntityBase"
Public Const USEWITH As String = "clsEntityBuilder"
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public Selected As Boolean

Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

' esto es para texto RTF o complejos
Private TextLines As New String[]
Private TextHeigth As New Float[]
Private TextPosX As New Float[]
Private TextBoxWidth As New Float[]
Private TextPosY As New Float[]
Private TextBoxHeight As New Float[]
Private TextAlignment As New Integer[]
Private TextFont As New String[]
Private TextBold As New Boolean[]

Private CurrentTextLines As String
Private CurrentTextHeigth As Float
Private CurrentTextPosX As Float
Private CurrentTextBoxWidth As Float
Private CurrentTextPosY As Float
Private CurrentTextBoxHeight As Float
Private CurrentTextAlignment As Integer
Private CurrentTextFont As String
Private CurrentTextBold As Boolean
Private CurrentTextItalic As Boolean
Private CurrentTextCrossed As Boolean
Private CurrentTextAngle As Float
Private CurrentTextColor As Integer

' JSON and DXF Read/Export
Public Const JSON_Reading As Boolean = True
Public Const JSON_Export As Boolean = False
Public Const DXF_Reading As Boolean = True
Public Const DXF_Export As Boolean = True

' fParam helpers
Public Const TotalParams As Integer = 7
Public Const ipaTextHeight As Integer = 0
Public Const ipaTextAngle As Integer = 1
Public Const ipaGenerationFlags As Integer = 2
Public Const ipaHorizJustif As Integer = 3
Public Const ipaVertJustif As Integer = 4
Public Const ipaRelativeFactor As Integer = 5
Public Const ipaObliqueAngle As Integer = 6

' stringdata helpers
Public Const sdaTotalParams As Integer = 2
Public Const sdaText As Integer = 0
Public Const sdaStyle As Integer = 1

Public Sub setEntity(e As Entity)

  e.fParam.Resize(Me.TotalParams)
  e.StringData.Resize(Me.sdaTotalParams) ' text, style


End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  Dim i As Integer

  If OnlySelected Then

    For i = 0 To e.Psel.Max
      If e.Psel[i] Then

        e.P[i * 2] += dx
        e.P[i * 2 + 1] += dy

      Endif
    Next

  Else

    puntos.Translate(e.p, dx, dy)
  Endif

  CreatePolygon(e)
  BuildPOI(e)

End

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.P, radians)

  ' el parametro lo tengo que pasar a grados porque la rutina que dibuja el texto usa eso
  E.fParam[Me.ipaTextAngle] += radians * 180 / Pi

  CreatePolygon(e)
  BuildPOI(e)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  E.fParam[Me.ipaTextHeight] *= sY
  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX
    e.P[i + 1] = e.P[i + 1] * sY

  Next

  CreatePolygon(e)
  BuildPOI(e)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

  GLplus.Polygon(oE.Polygon, gcd.ColorForSelected, oE.LineWidth, gcd.stiDashed)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

  If Not oE.Visible Then Return

  GLplus.Polygon(oE.Polygon, oE.ColorToPaint, oE.LineWidth, gcd.stiDashed)

End

Public Function Draw2(oE As Entity)

  If Not oE.Visible Then Return

  Dim angulo As Float, hText As New PaintExtents, lText As String

  Dim FontScalePrev As Float

  paint.Save

  'FontScalePrev = paint.FontScale

  paint.LineWidth = 1
  ' La cota puede estar inclinada, entonces debo rotarla

  If oE.fParam.Count > 0 Then

    angulo = oE.fParam[0] / 180 * Pi

  Else

    angulo = 0

  End If

  If oE.stringdata[0] = "" Then

    ltext = "ABCdef123"

  Else

    ltext = oE.stringdata[0]

  End If

  If oE.fParam.Count > 1 Then

    If oE.fParam[1] <= 0 Then
      paint.Font.Size = 10
    Else ' FIXME: hay problemas con el ancho del total del texto que no acompaÃ±a el zooming
      paint.Font.Size = oE.fParam[1]
    End If

  Else
    ' cuando ScaleZoom es 0.15 el texto coincide con DXF
    ' entonces voy a trabajar con esa relacion

    paint.Font.Size = 10

  End If

  htext = paint.TextExtents(ltext)

  paint.brush = Paint.Color(oE.ColorToPaint)

  paint.Translate(oE.p[0], oE.p[1])
  paint.Rotate(-angulo)
  paint.Scale(1, -1)

  paint.DrawText(ltext)

  paint.Stroke

  paint.Restore

End

Public Sub CreatePolygon(oE As Entity)

  Dim tRect As New Float[]

  oE.Polygon.Clear

  tRect = glPlus.MTextExtends(oE.stringdata[Me.sdaText], oE.p[0], oE.p[1], oE.fParam[Me.ipaTextHeight])

  ' armo el poligono , que ya tiene la escala

  oE.Polygon.Insert([tRect[0], tRect[1], tRect[0] + tRect[2], tRect[1], tRect[0] + tRect[2], tRect[1] + tRect[3], tRect[0], tRect[1] + tRect[3]])

  puntos.Translate(oE.Polygon, -oE.P[0], -oE.P[1])
  puntos.Rotate(oE.Polygon, oE.fParam[0] * Pi / 180)
  puntos.Translate(oE.Polygon, oE.P[0], oE.P[1])

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer
  ' points

  oe.PoiPoints.Clear
  oe.PoiType.Clear

  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiBasePoint)
  'oe.poiEntities.Add(arrIndex)

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity, Optional ParamsDone As Integer = -1) As Boolean

  'Print "Finish en EntityBase"
  'CreatePolygon(oe)
  BuildPOI(oe)

  ' busco el tipo de linea, si hace falta
  If oE.LineTypeName = "Dashed" Then oE.LineType = 1
  ' tareas finales de armado del objeto

  oE.psel.resize(oE.p.count / 2)

  oE.DrawAble = True
  oE.Selected = False
  oE.Finished = True



End

Public Sub Draw(oE As Entity)

  If Not oE.Visible Then Return
  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.Layerid)

  ' voy a procesar texto
  CurrentTextPosX = oE.p[0]
  CurrentTextPosY = oE.p[1]
  CurrentTextHeigth = oE.fParam[Me.ipaTextHeight]
  CurrentTextAngle = oE.fParam[Me.ipaTextAngle]
  CurrentTextColor = oE.ColorToPaint

  'If InStr(oE.stringdata[0], "Cristia") > 0 Then Stop

  ProcessText(oE.stringdata[Me.sdaText])

  'glPlus.DrawMultilineText(oE.stringdata[0], oE.p[0], oE.p[1], oE.fParam[0], oE.fParam[1], oE.ColorToPaint)

  'If oE.stringdata[0] <> "" Then CreatePolygon(oe)

End

Public Sub ProcessText(RTF As String)

  ' hay 3 posibilidades , empieza con:
  ' {
  ' \
  ' TEXTO cualquiera

  ' busco lo que esta entre {}
  Dim p1, p2 As Integer

  'Debug rtf

  p1 = InStr(rtf, "{")
  If p1 > 0 Then
    p2 = InStr(rtf, "}")
    ProcessPart(Mid(rtf, p1 + 1, p2 - p1 - 1))
  Else
    ProcessPart(rtf)
  Endif

End

Public Sub ProcessPart(s As String)
  ' aca viene lo que esta ente {}, sin esos simbolos

  Dim s2, sFont, s3, s4 As String
  Dim p1, p2, p3, p4 As Integer



  s2 = s
  If Left$(s2, 1) = "\\" Then
    s2 = Mid(s2, 2)
    Select Case Mid$(s2, 1, 1)
      Case "f"            ' esta indicado un cambio en la fuente
        '  \fVerdana|b0|i0|c0|p34;
        p1 = InStr(s2, "|")
        CurrentTextFont = Mid$(s2, 2, p1 - 2)
        CurrentTextBold = Mid$(s2, p1 + 2, 1) = "1"
        CurrentTextItalic = Mid$(s2, p1 + 5, 1) = "1"
        CurrentTextCrossed = Mid$(s2, p1 + 8, 1) = "1"
        p2 = InStr(s2, ";", p1)
        CurrentTextHeigth = CFloat(Mid$(s2, p1 + 11, p2 - p1 - 11)) / 100
        s2 = Mid(s2, p2 + 1)

        If Len(s2) > 0 Then ProcessPart(s2)

      Case "P"            ' esta indicado un cambio en la fuente
        CurrentTextPosY -= glPlus.TextExtends("XXX", CurrentTextHeigth)[1] * 1.2
        s2 = Mid(s2, 2)
        If Len(s2) > 0 Then ProcessPart(s2)

      Case "p"            ' no se que significa esto, suele venir \p12.55;
        p2 = InStr(s2, ";", p1)
        s2 = Mid(s2, p2 + 1)
        If Len(s2) > 0 Then ProcessPart(s2)

      Case "W"            ' no se que significa esto, suele venir \W12.55;
        p2 = InStr(s2, ";", p1)
        CurrentTextPosX += CFloat(Mid(s2, 2, p2 - 2))
        s2 = Mid(s2, p2 + 1)
        If Len(s2) > 0 Then ProcessPart(s2)

    End Select
  Else     ' es un texto, pero puede terminar en un scape
    p2 = InStr(s2, "\\")
    If p2 > 0 Then

      If CurrentTextFont <> "" Then glPlus.SelectFont(CurrentTextFont)

      glPlus.DrawText(Mid(s2, 1, p2 - 1), CurrentTextPosX, CurrentTextPosY, CurrentTextangle, CurrentTextHeigth, CurrentTextColor)

      ProcessPart(Mid(s2, p2))
    Else

      If CurrentTextFont <> "" Then glPlus.SelectFont(CurrentTextFont)
      glPlus.DrawText(s2, CurrentTextPosX, CurrentTextPosY, CurrentTextAngle, CurrentTextHeigth, CurrentTextColor)

    Endif

  End If
  ' primero separo en diferentes partes

End

'
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Ing. Marcos Kupervaser }
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio: C. Pellegrini 627}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:      PerÃº 1015}
'  {\fVerdana|b0|i0|c0|p34;Ing. Marcos Kupervaser\P }
'  {\fVerdana|b0|i0|c0|p34; Construquen SRL}
'  {\fVerdana|b0|i0|c0|p34;Ing. MartÃ­n Cristia}
'  {\fVerdana|b0|i0|c0|p34;MMNÂ°:3549  MCPNÂ°:2207 }
'  {\fVerdana|b0|i0|c0|p34;MMNÂ°:3549  MCPNÂ°:2207 }
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Expte NÂ°: 77}
'  {\fVerdana|b0|i0|c0|p34;\W2.0681; \W1;Letra: "T"}
'  {\fVerdana|b0|i0|c0|p34;AÃ±o: 2014}
'  {\fVerdana|b0|i0|c0|p34;DÃ­gito}
'  {\fVerdana|b0|i0|c0|p34;Folio}
'  \pt14.35; {\fVerdana|b0|i0|c0|p34;Destino: \fVerdana|b1|i0|c0|p34;Viviendas Colectivas, Oficinas y Local Comercial}
'  {\fVerdana|b0|i0|c0|p34;Propietario: \fVerdana|b1|i0|c0|p34; Valeria Sara Titioski, Pablo AndrÃ©s Titiosky y Rolando SimÃ³n Titioski.}
'  \pt2.45; {\fVerdana|b0|i0|c0|p34;Calle: \fVerdana|b1|i0|c0|p34;Paraguay 940}
'  {\fVerdana|b0|i0|c0|p34;Entre: \fVerdana|b1|i0|c0|p34;Junin e H. Irigoyen}
'  {\fVerdana|b0|i0|c0|p34;Barrio: \fVerdana|b1|i0|c0|p34;Libertad}
'  {\fVerdana|b0|i0|c0|p34;Escala: \fVerdana|b1|i0|c0|p34;1:100}
'  {\fVerdana|b0|i0|c0|p34;\LPROPIETARIO\l:  }

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

  Me.setEntity(e)

  e.ClassHandler = Me
  e.P.Add(c["ins_pt"][0])
  e.P.Add(c["ins_pt"][1])
  e.StringData[Me.sdaText] = c["text"]

  ' FIXME: reparar esto
  e.fParam[Me.ipaTextAngle] = 0  ' Angulo en grados

  e.fParam[Me.ipaTextHeight] = CFloat(c["text_height"])

  Return True

End

' "entity": "MTEXT",
' "index": 2371,
' "type": 44,
' "handle": [0, 1182142],
' "size": 148,
' "bitsize": 1115,
' "eed": [
'   {
'     "size": 50,
'     "handle": [5, 18],
'     "code": 0,
'     "value": "MTEXTBEGIN"
'   },
'   {
'     "code": 70,
'     "value": 73
'   },
'   {
'     "code": 70,
'     "value": 1
'   },
'   {
'     "code": 70,
'     "value": 44
'   },
'   {
'     "code": 40,
'     "value": 1.0
'   },
'   {
'     "code": 70,
'     "value": 74
'   },
'   {
'     "code": 70,
'     "value": 0
'   },
'   {
'     "code": 0,
'     "value": "MTEXTEND"
'   }
' ],
' "ownerhandle": [12, 1, 28, 1182114],
' "_subclass": "AcDbEntity",
' "layer": [5, 2, 16840, 16840],
' "preview_exists": 0,
' "entmode": 0,
' "nolinks": 1,
' "color": 256,
' "ltype_scale": 0.2,
' "ltype_flags": 0,
' "plotstyle_flags": 0,
' "invisible": 0,
' "linewt": 29,
' "_subclass": "AcDbMText",
' "ins_pt": [2897.30935784301255, 1634.78046156619598, 0.0],
' "extrusion": [0.0, 0.0, 1.0],
' "x_axis_dir": [0.0, 1.0, 0.0],
' "rect_width": 0.0,
' "text_height": 0.14,
' "attachment": 5,
' "flow_dir": 1,
' "extents_height": 0.14305593451569,
' "extents_width": 0.35,
' "text": "\\A1;1.30",
' "style": [5, 1, 17, 17],
' "linespace_style": 1,
' "linespace_factor": 1.0,
' "unknown_b0": 0


Public Sub ExportDXF(e As Entity, hFile As File)

  Dim i As Integer
  Dim first As Boolean
  Dim sText As String

  Print #hFIle, "  0"
  Print #hFIle, "MTEXT"
  clsEntities.DXFExportCommon(e, hFile)
  Print #hFIle, "100"
  Print #hFIle, "AcDbMText"
  Print #hFIle, " 10"                      ' X0
  Print #hFIle, CStr(e.p[0])
  Print #hFIle, " 20"                      ' Y0
  Print #hFIle, CStr(e.p[1])
  Print #hFIle, " 30"                      ' Z0
  Print #hFIle, "  0"
  Print #hFIle, " 40"
  Print #hFIle, CStr(e.fParam[Me.ipaTextHeight])
  Print #hFIle, " 50"
  Print #hFIle, CStr(e.fParam[Me.ipaTextAngle])
  Print #hFIle, " 41"
  Print #hFIle, CStr(e.fParam[Me.ipaRelativeFactor])
  Print #hFIle, " 51"
  Print #hFIle, CStr(e.fParam[Me.ipaObliqueAngle])
  Print #hFIle, "  7"
  Print #hFIle, e.StringData[Me.sdaStyle]
  Print #hFIle, " 71"
  Print #hFIle, e.fParam[Me.ipaGenerationFlags]
  Print #hFIle, " 72"                      ' justification:
  ' Horizontal text justification type(Optional , Default = 0)integer codes(Not bit - coded):
  ' 0 = Left 1 = Center  2 = Right 3 = Aligned( If vertical alignment = 0)  4 = Middle( If vertical alignment = 0) 5 = Fit( If vertical alignment = 0)
  Print #hFIle, e.fParam[Me.ipaHorizJustif]
  Print #hFIle, " 11"                      ' second point
  If e.P.Count > 2 Then Print #hFIle, e.P[2] Else Print #hFile, "0"
  Print #hFIle, " 21"
  If e.P.Count > 2 Then Print #hFIle, e.P[3] Else Print #hFile, "0"
  Print #hFIle, " 31"
  Print #hFIle, "0"

  Print #hFIle, "73"                      ' vertical justification:
  ' Vertical text justification type(Optional , Default = 0): integer codes(Not bit - coded):
  ' 0 = Baseline 1 = Bottom 2 = Middle 3 = Top
  Print #hFIle, e.fParam[Me.ipaVertJustif]
  first = True

  If e.StringData[0].Len > 250 Then
    Print #hFIle, "  1"                       ' text, first part
    Print #hFIle, Left(sText, 250)
    i = 250
    Do

      If e.StringData[0].Len - i > 250 Then
        sText = Mid(e.StringData[0], i, 250)
        Print #hFIle, "  3"                       ' text, first part
        Print #hFIle, sText
        i += 250
      Else
        sText = Mid(e.StringData[0], i)
        Print #hFIle, "  3"                       ' text, first part
        Print #hFIle, sText
        Break


      End If

    Loop
  Else
    Print #hFIle, "  1"                       ' text, first part
    Print #hFIle, e.StringData[0]

  Endif



  Print #hFIle, "210"
  Print #hFIle, "  0"
  Print #hFIle, "220"
  Print #hFIle, "  0"
  Print #hFIle, "230"
  Print #hFIle, "1"

  Print #hFIle, " 44"
  Print #hFIle, "1"

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer
  Dim TextHeigthSet As Boolean = False
  Dim TextAngleSet As Boolean = False

  setEntity(e)

  For i = 0 To sClaves.Max

    If sClaves[i] = "10" Then e.p.Add(CFloat(sValues[i]))         ' X1
    If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))         ' Y1
    If sClaves[i] = "40" And Not TextHeigthSet Then
      e.fParam[Me.ipaTextHeight] = CFloat(sValues[i])         ' Altura
      TextHeigthSet = True
    End If
    If sClaves[i] = "1" Or sClaves[i] = "3" Then e.StringData[Me.sdaText] &= sValues[i]                ' Texto
    If sClaves[i] = "50" And Not TextAngleSet Then
      e.fParam[Me.ipaTextAngle] = CFloat(sValues[i])      ' rotacion
      TextAngleSet = True
    End If
    If sClaves[i] = "7" Then e.StringData[Me.sdaStyle] = sValues[i]                ' texy
    If sClaves[i] = "41" Then e.fParam[Me.ipaRelativeFactor] = CFloat(sValues[i])
    If sClaves[i] = "51" Then e.fParam[Me.ipaObliqueAngle] = CFloat(sValues[i])
    If sClaves[i] = "71" Then e.fParam[Me.ipaGenerationFlags] = CInt(sValues[i])
    If sClaves[i] = "72" Then e.fParam[Me.ipaHorizJustif] = CFloat(sValues[i])
    If sClaves[i] = "73" Then e.fParam[Me.ipaVertJustif] = CFloat(sValues[i])
  Next

  If e.StringData[Me.sdaStyle] = "" Then e.StringData[Me.sdaStyle] = "STANDARD"



End

