' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast

Public Const Gender As String = "MText"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Inserts a multiline text")
Public Const ParamType As String = "PAFT"
Public Const ParamHelper As String = "Start point;Angle;Heigth;"     ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 0 ; 10 ; "
Public Const GAMBASCADENTITY As String = "EntityBase"
Public Const USEWITH As String = "clsEntityBuilder"
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public Selected As Boolean
Public ForDeletion As Boolean = True        ' this must be falsed in Finish
Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

' esto es para texto RTF o complejos
Private TextLines As New String[]
Private TextHeigth As New Float[]
Private TextPosX As New Float[]
Private TextBoxWidth As New Float[]
Private TextPosY As New Float[]
Private TextBoxHeight As New Float[]
Private TextAlignment As New Integer[]
Private TextFont As New String[]
Private TextBold As New Boolean[]

Private CurrentTextLines As String
Private CurrentTextHeigth As Float
Private CurrentTextPosX As Float
Private CurrentTextBoxWidth As Float
Private CurrentTextPosY As Float
Private CurrentTextBoxHeight As Float
Private CurrentTextAlignment As Integer
Private CurrentTextFont As String
Private CurrentTextBold As Boolean
Private CurrentTextItalic As Boolean
Private CurrentTextCrossed As Boolean
Private CurrentTextAngle As Float
Private CurrentTextColor As Integer

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  Dim i As Integer

  If OnlySelected Then

    For i = 0 To e.Psel.Max
      If e.Psel[i] Then

        e.P[i * 2] += dx
        e.P[i * 2 + 1] += dy

      Endif
    Next

  Else

    puntos.Translate(e.p, dx, dy)
  Endif

  CreatePolygon(e)
  BuildPOI(e)

End

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.P, radians)

  ' el parametro lo tengo que pasar a grados porque la rutina que dibuja el texto usa eso
  E.fParam[0] += radians * 180 / Pi

  CreatePolygon(e)
  BuildPOI(e)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  E.fParam[1] *= sY
  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX
    e.P[i + 1] = e.P[i + 1] * sY

  Next

  CreatePolygon(e)
  BuildPOI(e)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

  GLplus.Polygon(oE.Polygon, gcd.ColorForSelected, oE.LineWidth, gcd.stiDashed)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

  If Not oE.Visible Then Return

  GLplus.Polygon(oE.Polygon, oE.ColorToPaint, oE.LineWidth, gcd.stiDashed)

End

Public Function Draw2(oE As Entity)

  If Not oE.Visible Then Return

  Dim angulo As Float, hText As New PaintExtents, lText As String

  Dim FontScalePrev As Float

  paint.Save

  'FontScalePrev = paint.FontScale

  paint.LineWidth = 1
  ' La cota puede estar inclinada, entonces debo rotarla

  If oE.fParam.Count > 0 Then

    angulo = oE.fParam[0] / 180 * Pi

  Else

    angulo = 0

  End If

  If oE.stringdata[0] = "" Then

    ltext = "ABCdef123"

  Else

    ltext = oE.stringdata[0]

  End If

  If oE.fParam.Count > 1 Then

    If oE.fParam[1] <= 0 Then
      paint.Font.Size = 10
    Else ' FIXME: hay problemas con el ancho del total del texto que no acompaÃ±a el zooming
      paint.Font.Size = oE.fParam[1]
    End If

  Else
    ' cuando ScaleZoom es 0.15 el texto coincide con DXF
    ' entonces voy a trabajar con esa relacion

    paint.Font.Size = 10

  End If

  htext = paint.TextExtents(ltext)

  paint.brush = Paint.Color(oE.ColorToPaint)

  paint.Translate(oE.p[0], oE.p[1])
  paint.Rotate(-angulo)
  paint.Scale(1, -1)

  paint.DrawText(ltext)

  paint.Stroke

  paint.Restore

End

Public Sub CreatePolygon(oE As Entity)

  Dim tRect As New Float[]

  oE.Polygon.Clear

  tRect = glPlus.MTextExtends(oE.stringdata[0], oE.p[0], oE.p[1], oE.fParam[1])

  ' armo el poligono , que ya tiene la escala

  oE.Polygon.Insert([tRect[0], tRect[1], tRect[0] + tRect[2], tRect[1], tRect[0] + tRect[2], tRect[1] + tRect[3], tRect[0], tRect[1] + tRect[3]])

  puntos.Translate(oE.Polygon, -oE.P[0], -oE.P[1])
  puntos.Rotate(oE.Polygon, oE.fParam[0] * Pi / 180)
  puntos.Translate(oE.Polygon, oE.P[0], oE.P[1])

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer
  ' points

  oe.PoiPoints.Clear
  oe.PoiType.Clear

  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiBasePoint)
  'oe.poiEntities.Add(arrIndex)

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity, Optional ParamsDone As Integer = -1) As Boolean

  'Print "Finish en EntityBase"
  'CreatePolygon(oe)
  BuildPOI(oe)

  ' busco el tipo de linea, si hace falta
  If oE.LineTypeName = "Dashed" Then oE.LineType = 1
  ' tareas finales de armado del objeto

  oE.psel.resize(oE.p.count / 2)
  oE.ForDeletion = False
  oE.DrawAble = True
  oE.Selected = False
  oE.Finished = True

  If Not True Then

    oE.ForDeletion = True
    oE.DrawAble = False

  End If

End

Public Sub Draw(oE As Entity)

  If Not oE.Visible Then Return
  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.Layerid)

  ' voy a procesar texto
  CurrentTextPosX = oE.p[0]
  CurrentTextPosY = oE.p[1]
  CurrentTextHeigth = oE.fParam[1]
  CurrentTextAngle = oE.fParam[0]
  CurrentTextColor = oE.ColorToPaint
  ProcessText(oE.stringdata[0])

  'glPlus.DrawMultilineText(oE.stringdata[0], oE.p[0], oE.p[1], oE.fParam[0], oE.fParam[1], oE.ColorToPaint)

  'If oE.stringdata[0] <> "" Then CreatePolygon(oe)

End

Public Sub ProcessText(RTF As String)

  ' hay 3 posibilidades , empieza con:
  ' {
  ' \
  ' TEXTO cualquiera

  ' busco lo que esta entre {}
  Dim p1, p2 As Integer

  p1 = InStr(rtf, "{")
  If p1 > 0 Then
    p2 = InStr(rtf, "}")
    ProcessPart(Mid(rtf, p1 + 1, p2 - p1 - 1))
  Else
    ProcessPart(rtf)
  Endif

End

Public Sub ProcessPart(s As String)
  ' aca viene lo que esta ente {}, sin esos simbolos

  Dim s2, sFont, s3, s4 As String
  Dim p1, p2, p3, p4 As Integer

  s2 = s
  If Left$(s2, 1) = "\\" Then
    s2 = Mid(s2, 2)
    Select Case Mid$(s2, 1, 1)
      Case "f"            ' esta indicado un cambio en la fuente
        '  \fVerdana|b0|i0|c0|p34;
        p1 = InStr(s2, "|")
        CurrentTextFont = Mid$(s2, 2, p1 - 2)
        CurrentTextBold = Mid$(s2, p1 + 2, 1) = "1"
        CurrentTextItalic = Mid$(s2, p1 + 5, 1) = "1"
        CurrentTextCrossed = Mid$(s2, p1 + 8, 1) = "1"
        p2 = InStr(s2, ";", p1)
        CurrentTextHeigth = CFloat(Mid$(s2, p1 + 11, p2 - p1 - 11)) / 100
        s2 = Mid(s2, p2 + 1)

        If Len(s2) > 0 Then ProcessPart(s2)

      Case "P"            ' esta indicado un cambio en la fuente
        CurrentTextPosY -= glPlus.TextExtends("XXX", CurrentTextHeigth)[1] * 1.2
        s2 = Mid(s2, 2)
        If Len(s2) > 0 Then ProcessPart(s2)

      Case "p"            ' no se que significa esto, suele venir \p12.55;
        p2 = InStr(s2, ";", p1)
        s2 = Mid(s2, p2 + 1)
        If Len(s2) > 0 Then ProcessPart(s2)

      Case "W"            ' no se que significa esto, suele venir \W12.55;
        p2 = InStr(s2, ";", p1)
        CurrentTextPosX += CFloat(Mid(s2, 2, p2 - 2))
        s2 = Mid(s2, p2 + 1)
        If Len(s2) > 0 Then ProcessPart(s2)

    End Select
  Else     ' es un texto, pero puede terminar en un scape
    p2 = InStr(s2, "\\")
    If p2 > 0 Then

      If CurrentTextFont <> "" Then glPlus.SelectFont(CurrentTextFont)

      glPlus.DrawText(Mid(s2, 1, p2 - 1), CurrentTextPosX, CurrentTextPosY, CurrentTextangle, CurrentTextHeigth, CurrentTextColor)

      ProcessPart(Mid(s2, p2))
    Else

      If CurrentTextFont <> "" Then glPlus.SelectFont(CurrentTextFont)
      glPlus.DrawText(s2, CurrentTextPosX, CurrentTextPosY, CurrentTextAngle, CurrentTextHeigth, CurrentTextColor)

    Endif

  End If
  ' primero separo en diferentes partes

End

'
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Ing. Marcos Kupervaser }
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio: C. Pellegrini 627}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:      PerÃº 1015}
'  {\fVerdana|b0|i0|c0|p34;Ing. Marcos Kupervaser\P }
'  {\fVerdana|b0|i0|c0|p34; Construquen SRL}
'  {\fVerdana|b0|i0|c0|p34;Ing. MartÃ­n Cristia}
'  {\fVerdana|b0|i0|c0|p34;MMNÂ°:3549  MCPNÂ°:2207 }
'  {\fVerdana|b0|i0|c0|p34;MMNÂ°:3549  MCPNÂ°:2207 }
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Firma:}
'  {\fVerdana|b0|i0|c0|p34;Domicilio:}
'  {\fVerdana|b0|i0|c0|p34;Expte NÂ°: 77}
'  {\fVerdana|b0|i0|c0|p34;\W2.0681; \W1;Letra: "T"}
'  {\fVerdana|b0|i0|c0|p34;AÃ±o: 2014}
'  {\fVerdana|b0|i0|c0|p34;DÃ­gito}
'  {\fVerdana|b0|i0|c0|p34;Folio}
'  \pt14.35; {\fVerdana|b0|i0|c0|p34;Destino: \fVerdana|b1|i0|c0|p34;Viviendas Colectivas, Oficinas y Local Comercial}
'  {\fVerdana|b0|i0|c0|p34;Propietario: \fVerdana|b1|i0|c0|p34; Valeria Sara Titioski, Pablo AndrÃ©s Titiosky y Rolando SimÃ³n Titioski.}
'  \pt2.45; {\fVerdana|b0|i0|c0|p34;Calle: \fVerdana|b1|i0|c0|p34;Paraguay 940}
'  {\fVerdana|b0|i0|c0|p34;Entre: \fVerdana|b1|i0|c0|p34;Junin e H. Irigoyen}
'  {\fVerdana|b0|i0|c0|p34;Barrio: \fVerdana|b1|i0|c0|p34;Libertad}
'  {\fVerdana|b0|i0|c0|p34;Escala: \fVerdana|b1|i0|c0|p34;1:100}
'  {\fVerdana|b0|i0|c0|p34;\LPROPIETARIO\l:  }
