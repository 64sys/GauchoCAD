' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast

Public Const Gender As String = "MText"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Inserts a multiline text")
Public Const ParamType As String = "PAFT"
Public Const ParamHelper As String = ("Start point;Angle;Heigth;")      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 0 ; 10 ; "
Public Const GAMBASCADENTITY As String = ("EntityBase")
Public Const USEWITH As String = "clsEntityBuilder"
Public Const OrtogonalIgnorado As Boolean = False
Public Const OrtogonalForzado As Boolean = False
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public Selected As Boolean
Public ForDeletion As Boolean = True        ' this must be falsed in Finish
Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

    Dim i As Integer

    If OnlySelected Then

        For i = 0 To e.Psel.Max
            If e.Psel[i] Then

                e.P[i * 2] += dx
                e.P[i * 2 + 1] += dy

            Endif
        Next

    Else

        puntos.Translate(e.p, dx, dy)
    Endif

    CreatePolygon(e)
    BuildPOI(e)

End

Public Sub Rotate(e As Entity, radians As Float)

    puntos.Rotate(e.P, radians)

    ' el parametro lo tengo que pasar a grados porque la rutina que dibuja el texto usa eso
    E.fParam[0] += radians * 180 / Pi

    CreatePolygon(e)
    BuildPOI(e)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

    Dim i As Integer

    E.fParam[1] *= sY
    For i = 0 To e.p.max Step 2

        e.P[i] = e.P[i] * sX
        e.P[i + 1] = e.P[i + 1] * sY

    Next

    CreatePolygon(e)
    BuildPOI(e)

End

Public Sub Draw(oE As Entity)

    If Not oE.Visible Then Return
    oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.Layerid)

    glPlus.DrawMultilineText(oE.stringdata[0], oE.p[0], oE.p[1], oE.fParam[0], oE.fParam[1], oE.ColorToPaint)

    If oE.stringdata[0] <> "" Then CreatePolygon(oe)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

    GLplus.Polygon(oE.Polygon, gcd.ColorForSelected, oE.LineWidth, gcd.stiDashed)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

    If Not oE.Visible Then Return

    GLplus.Polygon(oE.Polygon, oE.ColorToPaint, oE.LineWidth, gcd.stiDashed)

End

Public Function Draw2(oE As Entity)

    If Not oE.Visible Then Return

    Dim angulo As Float, hText As New PaintExtents, lText As String

    Dim FontScalePrev As Float

    paint.Save

    'FontScalePrev = paint.FontScale

    paint.LineWidth = 1
    ' La cota puede estar inclinada, entonces debo rotarla

    If oE.fParam.Count > 0 Then

        angulo = oE.fParam[0] / 180 * Pi

    Else

        angulo = 0

    End If

    If oE.stringdata[0] = "" Then

        ltext = "ABCdef123"

    Else

        ltext = oE.stringdata[0]

    End If

    If oE.fParam.Count > 1 Then

        If oE.fParam[1] <= 0 Then
            paint.Font.Size = 10
        Else ' FIXME: hay problemas con el ancho del total del texto que no acompaÃ±a el zooming
            paint.Font.Size = oE.fParam[1]
        End If

    Else
        ' cuando ScaleZoom es 0.15 el texto coincide con DXF
        ' entonces voy a trabajar con esa relacion

        paint.Font.Size = 10

    End If

    htext = paint.TextExtents(ltext)

    paint.brush = Paint.Color(oE.ColorToPaint)

    paint.Translate(oE.p[0], oE.p[1])
    paint.Rotate(-angulo)
    paint.Scale(1, -1)

    paint.DrawText(ltext)

    paint.Stroke

    paint.Restore

End

Public Sub CreatePolygon(oE As Entity)

    Dim tRect As New Float[]

    oE.Polygon.Clear

    tRect = glPlus.MTextExtends(oE.stringdata[0], oE.p[0], oE.p[1], oE.fParam[1])

    ' armo el poligono , que ya tiene la escala

    oE.Polygon.Insert([tRect[0], tRect[1], tRect[0] + tRect[2], tRect[1], tRect[0] + tRect[2], tRect[1] + tRect[3], tRect[0], tRect[1] + tRect[3]])

    puntos.Translate(oE.Polygon, -oE.P[0], -oE.P[1])
    puntos.Rotate(oE.Polygon, oE.fParam[0] * Pi / 180)
    puntos.Translate(oE.Polygon, oE.P[0], oE.P[1])

End
'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer
    ' points

    oe.PoiPoints.Clear
    oe.PoiType.Clear

    oe.poiPoints.insert([oE.p[0], oE.p[1]])
    oe.poiType.Add(gcd.poiBasePoint)
    'oe.poiEntities.Add(arrIndex)

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity, Optional ParamsDone As Integer = -1) As Boolean

    'Print "Finish en EntityBase"
    'CreatePolygon(oe)
    BuildPOI(oe)

    ' busco el tipo de linea, si hace falta
    If oE.LineTypeName = "Dashed" Then oE.LineType = 1
    ' tareas finales de armado del objeto

    oE.psel.resize(oE.p.count / 2)
    oE.ForDeletion = False
    oE.DrawAble = True
    oE.Selected = False
    oE.Finished = True

    If Not True Then

        oE.ForDeletion = True
        oE.DrawAble = False

    End If

End
