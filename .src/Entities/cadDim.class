' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
Inherits EntityBase
Public Const GENDER As String = "Cota"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Insert an acotation")
Public Const ParamType As String = "PP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point"

Public Sub Draw(oE As Object)

    Dim l As Float, angulo As Float, hText As New PaintExtents, lText As String, lPix As Integer
    Dim e As Float

    If Not oE.DrawAble Or Not oE.Visible Then Return
    If oE.Selected And Not modCAD.ToolActive Then oE.ColorToPaint = modCAD.ColorForSelected Else oE.ColorToPaint = modCAD.GetGBColor(oE.colour, oE.Layerid)
    Dim ET As Object, i As Integer
    i = clsEntities.FIndBlockID(oE.StringData2)
    If i < 0 Then Return

    If modCAD.drwDrawingClass = modCAD.drwPaintClass Then

        paint.Save

        paint.LineWidth = oE.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines
        If oE.flxDash Then paint.Dash = oE.flxDash
        If oE.Selected And Not modCAD.ToolActive Then
            paint.brush = Paint.Color(modCAD.ColorForSelected)
        Else
            paint.brush = Paint.Color(oE.ColorToPaint)
        Endif
        ' La cota puede estar inclinada, entonces debo rotarla
        l = puntos.distancia(oE.p[0], oE.p[1], oE.p[2], oE.p[3])
        lPix = appmain.hFcad.pixels(l)
        ltext = Format(l, modCAD.FormatoCotas)
        angulo = -Ang(oE.p[2] - oE.p[0], oE.p[1] - oE.p[3])
        paint.Translate(oE.p[0], oE.p[1])
        paint.Rotate(-angulo)
        htext = paint.TextExtents(ltext)
        ' e1 = puntos.distanciap(oE.p[0], oE.p[2])        ' lo que se separa la cota de los puntos marcados para acotar
        ' e2 = puntos.distanciap(oE.p[1], oE.p[2])        ' lo que se separa la cota de los puntos marcados para acotar
        ' If e1 > e2 Then e = e2 Else e = e1      ' tomo el menor, en metros
        ' e = appmain.hFcad.pixels(e)                     ' paso a pixels
        e = 0 ' TODO:  arregla esto
        'paint.brush = Paint.Color(Color.White)

        paint.relLineTo(lPix, 0) ' linea horizontal
        paint.relmoveto(0, -10)
        paint.relLineTo(0, 20) ' linea vertical 1
        paint.relmoveto(-lPix, 0)
        paint.relLineTo(0, -20) ' linea vertical 2
        paint.relmoveto(5, 5)
        paint.relLineTo(-10, 10) ' linea vertical 2
        paint.relmoveto(lPix, 0)
        paint.relLineTo(10, -10) ' linea vertical 2
        paint.Stroke
        If hText.Width * 0.8 < lPix Then
            paint.MoveTo(lPix / 2 - htext.Width / 2, htext.Height / 2 - 10 - e)
            Paint.Scale(1, -1)
            paint.Text(ltext)
        Endif

        paint.Stroke
        paint.Restore

    End If

    If modCAD.drwDrawingClass = modCAD.drwOpenGLClass Then

        gl.PushMatrix
        'gl.Translatef(appmain.hFcad.pixels(oE.p[0]) / appmain.hFcad.ScaleZoom, appmain.hFcad.pixels(oE.p[1]) / appmain.hFcad.ScaleZoom, 0)
        'gl.Rotatef(oE.fParam[2], 0, 0, 1)
        'gl.Scalef(oE.fParam[0], oE.fParam[1], 1)

        ' modCAD.ScaleLines = (Abs(oE.fParam[0]) + Abs(oE.fParam[1])) / 2   ' ??????????????????
        For Each ET In appmain.hFCAD.arrBlocks[i].entities
            et.Draw
        Next
        'modCAD.ScaleLines = 1
        gl.PopMatrix

    Endif

End

Public Sub CreateBoundingPoligon(oE As Object)

    ' checkk Viga / Beam to see how its done

    oE.BoundingPoligon.Clear

    Dim BpX, BpZ, l As Float, Rotated As Float[]
    l = puntos.distancia(oE.p[0], oE.p[1], oE.p[2], oE.p[3])

    ' From an unrotated point of view, our bouding points look like
    ' 1
    BpX = oE.p[0]
    BpZ = oE.p[1] - oE.fParam[0] / 2  ' thats wall thickness

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(oE.p[0], oE.p[1], (oE.p[3] - oE.p[1]) / l, (oE.p[2] - oE.p[0]) / l, BpX, Bpz)
    oE.BoundingPoligon.Insert(rotated)     ' pair

    ' 2
    BpX = oE.p[0] + l
    BpZ = oE.p[1] - oE.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(oE.p[0], oE.p[1], (oE.p[3] - oE.p[1]) / l, (oE.p[2] - oE.p[0]) / l, BpX, Bpz)
    oE.BoundingPoligon.Insert(rotated)     ' pair

    ' 3
    BpX = oE.p[0] + l
    BpZ = oE.p[1] + oE.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(oE.p[0], oE.p[1], (oE.p[3] - oE.p[1]) / l, (oE.p[2] - oE.p[0]) / l, BpX, Bpz)
    oE.BoundingPoligon.Insert(rotated)     ' pair

    ' 4
    BpX = oE.p[0]
    BpZ = oE.p[1] + oE.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(oE.p[0], oE.p[1], (oE.p[3] - oE.p[1]) / l, (oE.p[2] - oE.p[0]) / l, BpX, Bpz)
    oE.BoundingPoligon.Insert(rotated)     ' pair

End
