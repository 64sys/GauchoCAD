' Gambas class file

' Represents a simple acotation
' Element maintained by Terco
' V2
Inherits EntityBase
Public Const GENDER As String = "Cota"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Insert an acotation")
Public Const ParamType As String = "PP"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point"

Public Sub Draw()

    Dim l As Float, angulo As Float, hText As New PaintExtents, lText As String, lPix As Integer
    Dim e As Float

    If Not Me.DrawAble Or Not Me.Visible Then Return
    If Me.Selected And Not modCAD.ToolActive Then Me.ColorToPaint = modCAD.ColorForSelected Else Me.ColorToPaint = Me.gbColor
    Dim ET As Object, i As Integer
    i = clsEntities.FIndBlockID(Me.StringData2)
    If i < 0 Then Return

    If modCAD.drwDrawingClass = modCAD.drwPaintClass Then

        paint.Save

        paint.LineWidth = Me.LineWidth / appmain.hFcad.ScaleZoom / modCAD.ScaleLines
        If Me.flxDash Then paint.Dash = Me.flxDash
        If Me.Selected And Not modCAD.ToolActive Then
            paint.brush = Paint.Color(modCAD.ColorForSelected)
        Else
            paint.brush = Paint.Color(Me.ColorToPaint)
        Endif
        ' La cota puede estar inclinada, entonces debo rotarla
        l = puntos.distancia(Me.p[0], Me.p[1], Me.p[2], Me.p[3])
        lPix = appmain.hFcad.pixels(l)
        ltext = Format(l, modCAD.FormatoCotas)
        angulo = -Ang(Me.p[2] - Me.p[0], Me.p[1] - Me.p[3])
        paint.Translate(Me.p[0], Me.p[1])
        paint.Rotate(-angulo)
        htext = paint.TextExtents(ltext)
        ' e1 = puntos.distanciap(Me.p[0], Me.p[2])        ' lo que se separa la cota de los puntos marcados para acotar
        ' e2 = puntos.distanciap(Me.p[1], Me.p[2])        ' lo que se separa la cota de los puntos marcados para acotar
        ' If e1 > e2 Then e = e2 Else e = e1      ' tomo el menor, en metros
        ' e = appmain.hFcad.pixels(e)                     ' paso a pixels
        e = 0 ' TODO:  arregla esto
        'paint.brush = Paint.Color(Color.White)

        paint.relLineTo(lPix, 0) ' linea horizontal
        paint.relmoveto(0, -10)
        paint.relLineTo(0, 20) ' linea vertical 1
        paint.relmoveto(-lPix, 0)
        paint.relLineTo(0, -20) ' linea vertical 2
        paint.relmoveto(5, 5)
        paint.relLineTo(-10, 10) ' linea vertical 2
        paint.relmoveto(lPix, 0)
        paint.relLineTo(10, -10) ' linea vertical 2
        paint.Stroke
        If hText.Width * 0.8 < lPix Then
            paint.MoveTo(lPix / 2 - htext.Width / 2, htext.Height / 2 - 10 - e)
            Paint.Scale(1, -1)
            paint.Text(ltext)
        Endif

        paint.Stroke
        paint.Restore

    End If

    If modCAD.drwDrawingClass = modCAD.drwOpenGLClass Then

        gl.PushMatrix
        'gl.Translatef(appmain.hFcad.pixels(Me.p[0]) / appmain.hFcad.ScaleZoom, appmain.hFcad.pixels(Me.p[1]) / appmain.hFcad.ScaleZoom, 0)
        'gl.Rotatef(Me.fParam[2], 0, 0, 1)
        'gl.Scalef(Me.fParam[0], Me.fParam[1], 1)

        ' modCAD.ScaleLines = (Abs(Me.fParam[0]) + Abs(Me.fParam[1])) / 2   ' ??????????????????
        For Each ET In appmain.hFCAD.arrBlocks[i].entities
            et.Draw
        Next
        'modCAD.ScaleLines = 1
        gl.PopMatrix

    Endif

End

Public Sub CreateBoundingPoligon()

    ' checkk Viga / Beam to see how its done

    Me.BoundingPoligon.Clear

    Dim BpX, BpZ, l As Float, Rotated As Float[]
    l = puntos.distancia(Me.p[0], Me.p[1], Me.p[2], Me.p[3])

    ' From an unrotated point of view, our bouding points look like
    ' 1
    BpX = Me.p[0]
    BpZ = Me.p[1] - Me.fParam[0] / 2  ' thats wall thickness

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(Me.p[0], Me.p[1], (Me.p[3] - Me.p[1]) / l, (Me.p[2] - Me.p[0]) / l, BpX, Bpz)
    Me.BoundingPoligon.Insert(rotated)     ' pair

    ' 2
    BpX = Me.p[0] + l
    BpZ = Me.p[1] - Me.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(Me.p[0], Me.p[1], (Me.p[3] - Me.p[1]) / l, (Me.p[2] - Me.p[0]) / l, BpX, Bpz)
    Me.BoundingPoligon.Insert(rotated)     ' pair

    ' 3
    BpX = Me.p[0] + l
    BpZ = Me.p[1] + Me.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(Me.p[0], Me.p[1], (Me.p[3] - Me.p[1]) / l, (Me.p[2] - Me.p[0]) / l, BpX, Bpz)
    Me.BoundingPoligon.Insert(rotated)     ' pair

    ' 4
    BpX = Me.p[0]
    BpZ = Me.p[1] + Me.fParam[0] / 2

    ' and, the rotated are

    rotated = puntos.RotateFromPointWithSinCos(Me.p[0], Me.p[1], (Me.p[3] - Me.p[1]) / l, (Me.p[2] - Me.p[0]) / l, BpX, Bpz)
    Me.BoundingPoligon.Insert(rotated)     ' pair

End
