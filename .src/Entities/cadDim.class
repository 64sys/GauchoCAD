' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static

Public Const Gender As String = "Dimension"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Insert an acotation")
Public ParamType As String = "TPP"                             ' that is Point, Point, Float; could be Color Text, etc
Public ParamHelper As String = "Start point;End point"
Public Const USEWITH As String = ""
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Const ParamDefault As String = " "
Public Const StretchAble As Boolean = True           ' Si lo puedo deformar
Public Selected As Boolean

Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

Public TotalDimensions As Integer           ' the total dimensions present in this drawing

' dimstyle: Todas las variables numericas Float estaran multiplicadas por DimScale
Public DimType As Integer = 0            ' = fParam[0] and &X1111
Public DimAtatchPoint As Integer = 2     ' = fParam[1]
Public DimScale As Integer = 1           ' = fParam[2]
Public DimFormat As String = "0.00"      '
Public DimFormatAng As String = "0.0"    '
Public DimArrowSize As Float = 0.3       ' el largo de la flecha
Public DimArrowWidth As Float = 0.1      ' ancho de la flecha
Public DimTickSize As Float = 0.3        ' el tamaÃ±o de la diagonal
Public DimArrowOrThick As Boolean = True ' flecha (True) o diagonal (False)
Public DimTextHeight As Float = 0.3      '
Public DimSeparation As Float = 0.5      ' la separacion entre el punto que define la cota y el inicio de la linea q marca inicio y fin
Public DimExtension As Float = 0.5       ' la continuacion de esas lineas

' Pixeles

Public LastMouseDownX As Integer    ' change in MouseDown
Public LastMouseDownY As Integer
Public SelStartX As Integer         ' change in MouseDown
Public SelStartY As Integer
Public SelEndX As Integer           ' change in MouseMove/MouseUp
Public SelEndY As Integer

' Metros
Public SelStartXr As Float          ' Seleccion libre rectangular
Public SelStartZr As Float          ' en metros
Public SelEndXr As Float            ' aca Y es Z
Public SelEndZr As Float

' Clicks en Metros
Public ClickXr As Float
Public ClickYr As Float
Public ClickPrevXr As Float
Public ClickPrevYr As Float

Public TextEntry As String

' indicadores
'Public elem.StepsDone As Integer = 0          ' La cantidad de puntos que marco para el trabajo actual--->Gurdado en la entidad
Public StepsTotal As Integer = 0          ' Tomado de la lista de tipo de paramtros
Public PointsTotal As Integer = 0          ' Tomado de la lista de tipo de paramtros
Public NextParamType As String          ' What kind of input the element expects P=point, F=float, C=color, S=string, M=mixed either Point, or Float that is taken from Max(Px-Px', Pz-Pz')
Public ParamHelperList As String[]

' indices de valores ingresados
Public iPoints As Integer
Public iFloat As Integer
Public iString As Integer

' conserva los ultimos valores del mouse
Public CursorX As Integer
Public CursorY As Integer

Public elem As Entity

Public PoiChecking As Boolean = True
Public EntityChecking As Boolean = False
Public LastEntity As Entity

Public XYreal As Float[]

Public extension As Float
Public iBloque As Integer

' Para mejor generalidad y para compatibilidad futura usaremos los P[] asi con los CODE del DXF
' P[] = DXF CODE
' 0 = 10
' 1 = 20
' 2 = 30    Definition points
' 3 = 11
' 4 = 12
' ......
' 20 = 36

' 21 = 210
' 22 = 220	Extrusion direction(Optional ; Default = 0, 0, 1)
' 23 = 230

' fParam[] = DXF CODE
' se usara asi
' 0 =  70, Dimension type:  Values 0 - 6 are integer values that represent the dimension type.Values 32, 64, And 128 are bit values, which are added To the integer values(value 32 Is Always set In R13 And later releases)
'       0 = Rotated; 1 = Aligned; 2 = Angular; 3 = Diameter; 4 = Radius; 5 = Angular3point; 6 = Ordinate
'       32 = Indicates that the block reference(group code 2) Is Referenced by this dimension only
'       64 = Ordinate type.This Is A bit value(bit 7)used only With integer value 6. If set, ordinate Is X - type; If Not set, ordinate Is Y - type
'       128 = This Is A bit value(bit 8)added To the other group 70 values If the dimension text has been positioned at a user - defined location rather than at the Default location
'
' 1 =  71 Attachment point:
'       1 = Top left ; 2 = Top center; 3 = Top right; 4 = Middle left; 5 = Middle center; 6 = Middle right; 7 = Bottom left; 8 = Bottom center; 9 = Bottom right

' 2 = DimScale

'' Mode = DimType ver gcd.DimXXXX constants
Public Function Start(Optional Mode As Integer = gcd.dimRadius)

  Dim newBlock As New Block
  'Dim eParte As Entity
  Dim f1, f2 As New Float[]

  Inc TotalDimensions

  elem = New Entity

  Me.DimType = Mode

  elem.Gender = Me.Gender
  elem.ClassHandler = cadDim
  elem.p.Resize(24)
  elem.fParam.Resize(6)
  elem.Visible = False

  ' como esto sera tratado como un inserto
  elem.fParam[0] = 1  ' scaleX
  elem.fParam[1] = 1  ' scaleY
  elem.fParam[2] = 0  ' rotate

  StepsDone = 0
  iPoints = 0

  ' init arrays
  Select DimType
    Case -1                 ' tengo que pregunta que dim quiere
      clsDrawingAids.HelperTrabajo = "DimType? Horizontal;Vertical;Aligned;aNgular;rOtated,Radial;Diameter"
      NextParamType = "T"

    Case gcd.DimAligned
      Me.StepsTotal = 3 ' 1-punto 2-punto 3-ubicacion del texto
      NextParamType = "P"
      ' ahora creo el bloque asociado
      newBlock.entities = New Entity[]
      newBlock.name = "*D" & Str$(gcd.CurrentDrawing.arrBlocks.Count)
      gcd.CurrentDrawing.arrBlocks.Add(newBlock)
      ' linea principal
      clsEntities.AddLine(newBlock.entities, [0, 0, 0, 0], elem.colour, elem.LineWidth, elem.LineType, elem.layerid, newBlock.name)

      ' lineas de demarcacion
      clsEntities.AddLine(newBlock.entities, [0, Me.DimExtension, 0, -Me.DimExtension], elem.colour, elem.LineWidth, elem.LineType, elem.layerid, newBlock.name)
      clsEntities.AddLine(newBlock.entities, [0, Me.DimExtension, 0, -Me.DimExtension], elem.colour, elem.LineWidth, elem.LineType, elem.layerid, newBlock.name)

      ' flechas

      f1.Insert([0, 0, Me.DimArrowSize, Me.DimArrowWidth, Me.DimArrowSize, -Me.DimArrowWidth, 0, 0])
      f2.Insert([0, 0, -Me.DimArrowSize, Me.DimArrowWidth, -Me.DimArrowSize, -Me.DimArrowWidth, 0, 0])

      clsEntities.Addsolid(newBlock.entities, f1, elem.colour, elem.LineWidth, elem.LineType, elem.layerid, newBlock.name)
      clsEntities.Addsolid(newBlock.entities, f2, elem.colour, elem.LineWidth, elem.LineType, elem.layerid, newBlock.name)

      ' texto
      clsEntities.AddMText(newBlock.entities, [0, 0, 0, 0], 0, Me.DimTextHeight, "0.00", elem.colour, elem.LineWidth, elem.LineType, elem.layerid, newBlock.name)

      ' y ahora e




  End Select

  'elem.gbcolor = appmain.CurrentColor
  elem.Block = newBlock.name

  iPoints = 0
  iFloat = 0
  iString = 0

  ' Pointstotal = elem.p.count / 2                                          ' at this point P is either set or 0 if non determined
  ' StepsTotal = Len(elem.ClassHandler.ParamType)
  '
  ' NextParamType = UCase(Mid(elem.ClassHandler.ParamType, elem.StepsDone + 1, 1))
  ' clsDrawingAids.HelperTrabajoNext = ParamHelperList[0]

  ' instructions to FCAD
  gcd.OrthogonalIgnored = Me.OrthogonalIgnored
  gcd.OrthogonalForced = Me.OrthogonalForced


  elem.layerid = appmain.CurrentLayer

  clsDrawingAids.HelperTrabajo = elem.ClassHandler.HelperTrabajo

End

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  cadInsert.Translate(e, dx, dy, OnlySelected)

End

Public Sub Rotate(e As Entity, radians As Float)

  cadInsert.Rotate(e, radians)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  cadInsert.Scale(e, sx, sy)

End

Public Sub Draw(Optional e As Entity)

  If e Then
    cadInsert.Draw(e)
  Else

    cadInsert.Draw(elem)
  End If

End

'' A fat version of the entity
Public Sub DrawRemark(oE As Entity)

  cadInsert.DrawRemark(oe)

End

'' A fat version of the entity
Public Sub DrawSelected(oE As Entity)

  cadInsert.DrawSelected(oe)

End

Public Function KeyText(EnteredText As String) ' esta rutina es llamada por FCAD en el evento FCAD_KeyPress cuando recibe una texto + <Enter>

  ' this could be many things, but lets concentrate in what to expect and check if its correct
  ' The element provides a constant called ParamType wich is a string like "PPFCTB"
  ' P = point in X,Y format with decimal point as dot "."
  '     it can also be @X,Y wich means that the coordinates are relative to the last point
  ' F = float, thats any number
  ' T = a text or a single character too
  ' C = color input
  ' B = boolean, Yes/Si or No
  ' Lets see what are we expecting
  Dim Xt, Zt As Float, ErrTxt As String, Relative As Boolean

  Select NextParamType

    Case "P", "+"
      errtxt = ", expected a valid point like 12.4,9.5  or @12.34,10.5"
      ' lets filter
      EnteredText = Trim$(UCase$(EnteredText))
      ' So we expect a position x,y , but in some cases it can be
      ' C = close
      ' U = undo, delete last segment
      ' and others

      If Left(EnteredText, 1) = "C" Then          ' close the element
        ' got othe first point and exit
        elem.P[iPoints * 2] = elem.P[0]
        elem.P[iPoints * 2 + 1] = elem.P[1]
        Me.Finish

      Else If Left(EnteredText, 1) = "U" Then     ' undo last command and go

        elem.P.remove(elem.P.max)
        elem.P.remove(elem.P.max)
        Me.Finish
      Else                                        ' an X,Y or @X,Y

        If InStr(EnteredText, "@") > 0 Then    ' may be a point
          Relative = True
          EnteredText = Replace(EnteredText, "@", "")
        Endif
        Xt = CFloat(Split(EnteredText, ",")[0])
        Zt = CFloat(Split(EnteredText, ",")[1])

        ' if we are stll here, input was good
        elem.P[iPoints * 2] = Xt
        elem.P[iPoints * 2 + 1] = Zt

        If Relative And (elem.P.count > 2) Then
          elem.P[iPoints * 2] += elem.P[(iPoints - 1) * 2]
          elem.P[iPoints * 2 + 1] += elem.P[(iPoints - 1) * 2 + 1]

        Endif
        Inc iPoints
        AdvanceStep

      End If

    Case "T"
      errtxt = ", expected text, not a point"

      TextEntry = EnteredText

      AdvanceStep

    Case "F", "M", "A", "L"                 ' Float, Mixed, Angle, Longitud
      errtxt = "enter a valid text size"

      If EnteredText = "" Then

        Try elem.fParam[iFloat] = ParamDefault[elem.StepsDone]

      Else

        elem.fParam[iFloat] = CFloat(EnteredText)

      Endif

      Inc iFloat
      AdvanceStep

    Case "C"                                ' color
      If Dialog.SelectColor() Then
        elem.fParam[iFloat] = CFloat(Dialog.Color)
        Inc iFloat
        AdvanceStep

      Endif
      Key.Cod

  End Select

Finally

  Return

Catch

  ' unexpected input
  clsDrawingAids.ErrorMessage = ("Bad input" & ErrTxt)

End

Public Sub ReBuildBlock()

  Dim d As Float, flxTextExt As Float[]
  Dim fRotXY As Float[]

  ' -> el bloque
  iBloque = clsEntities.FIndBlockID(elem.Block)

  Select DimType
    Case -1 'clsDrawingAids.HelperTrabajo = "DimType? Horizontal;Vertical;Aligned;aNgular;rOtated,Radial;Diameter"
      Select UCase(TextEntry)
        Case "H"
          DimType = gcd.dimHorizontal
        Case "V"
          DimType = gcd.dimVertical
        Case "A"
          DimType = gcd.dimAligned
        Case "N"
          DimType = gcd.dimAngular
        Case "O"
          DimType = gcd.dimRotated
        Case "R"
          DimType = gcd.dimRadius
        Case "D"
          DimType = gcd.dimDiameter
        Case Else
          clsDrawingAids.ErrorMessage = ("Bad input")
          Return
      End Select
      ' good input

    Case gcd.DimAligned
      If iPoints = 0 Then     ' marco el primer punto
        elem.P[0] = ClickXr     ' posicion base del inserto
        elem.P[1] = ClickYr

        elem.fParam[0] = 1      ' ScaleX del inserto
        elem.fParam[1] = 1      ' ScaleY del inserto
        elem.fParam[2] = 0      ' degAngle del inserto

      Else If iPoints = 1 Then ' marco el segundo punto, lo que modifica los parametros del bloque
        elem.Visible = True
        elem.P[2] = ClickXr     ' posicion base del inserto
        elem.P[3] = ClickYr

        ' el largo de la linea principal viene dado por la distancia entre ambos puntos
        d = puntos.distancia(elem.P[0], elem.P[1], ClickXr, ClickYr)

        ' con este click calculo el angulo
        elem.fParam[2] = Ang(ClickXr - elem.P[0], ClickYr - elem.P[1]) * 180 / Pi

        ' la primer entidad del bloque es la linea principal
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[0].P[0] = 0           ' X0
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[0].P[1] = 0           ' Y0

        gcd.CurrentDrawing.arrBlocks[iBloque].entities[0].P[2] = d           ' X1
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[0].P[3] = 0           ' Y1

        ' la segunda es la primer linea de demarcacion (sin cambios)
        'gcd.CurrentDrawing.arrBlocks[iBloque].entities[1].P[0] = 0           ' X0
        'gcd.CurrentDrawing.arrBlocks[iBloque].entities[1].P[1] = 0           ' Y0

        'gcd.CurrentDrawing.arrBlocks[iBloque].entities[1].P[2] = d           ' X1
        'gcd.CurrentDrawing.arrBlocks[iBloque].entities[1].P[3] = 0           ' Y1

        ' la tercera es la segunda linea de demarcacion
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[2].P[0] = d           ' X0
        'gcd.CurrentDrawing.arrBlocks[iBloque].entities[2].P[1] = 0           ' Y0

        gcd.CurrentDrawing.arrBlocks[iBloque].entities[2].P[2] = d           ' X1
        'gcd.CurrentDrawing.arrBlocks[iBloque].entities[2].P[3] = 0           ' Y1

        ' la sexta es el texto
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[5].StringData[0] = Format(d, Me.DimFormat)

        flxTextExt = glPlus.MTextExtends(gcd.CurrentDrawing.arrBlocks[iBloque].entities[5].StringData[0], 0, 0, gcd.CurrentDrawing.arrBlocks[iBloque].entities[5].fParam[1])

        ' la cuarta y quinta son las flechas , tengo que verificar si entran, o el texto
        If flxTextExt[2] * 1.1 > d Then                      ' no entra

          gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[0] = d           ' X0
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[2] = Me.DimArrowSize + d           ' X0
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[4] = Me.DimArrowSize + d           ' X0
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[6] = d           ' X0

          gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[0] = 0           ' X0
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[2] = -Me.DimArrowSize
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[4] = -Me.DimArrowSize
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[6] = 0           ' X0

          ' el texto va afuera
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[5].P[0] = d + Me.DimArrowSize / 2
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[5].P[1] = Me.DimArrowWidth

        Else                                                                ' entra
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[0] = 0           ' X0
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[2] = Me.DimArrowSize
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[4] = Me.DimArrowSize
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[6] = 0           ' X0

          gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[0] = d           ' X0
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[2] = -Me.DimArrowSize + d           ' X0
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[4] = -Me.DimArrowSize + d           ' X0
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[6] = d           ' X0

          ' el texto va adentro
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[5].P[0] = d / 2 - flxTextExt[2] / 2
          gcd.CurrentDrawing.arrBlocks[iBloque].entities[5].P[1] = Me.DimArrowWidth

        End If

      Else If iPoints = 2 Then ' marco la extension

        extension = -puntos.PointToLineDistance([ClickXr, ClickYr], [elem.P[0], elem.P[1], elem.P[2], elem.P[3]])
        'Debug extension

        ' linea principal
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[0].P[1] = extension           ' Y0
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[0].P[3] = extension           ' Y1

        ' linea de demarcacion
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[1].P[1] = Me.DimExtension + extension           ' Y0
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[1].P[3] = -Me.DimExtension + extension           ' Y1

        ' segunda linea de demarcacion
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[2].P[1] = Me.DimExtension + extension           ' Y0
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[2].P[3] = -Me.DimExtension + extension           ' Y1

        ' texto
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[5].P[1] = Me.DimArrowWidth + extension

        ' flechas
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[1] = extension           ' X0
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[3] = extension + Me.DimArrowWidth
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[5] = extension - Me.DimArrowWidth
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[3].P[7] = extension           ' X0

        gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[1] = extension           ' X0
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[3] = extension + Me.DimArrowWidth
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[5] = extension - Me.DimArrowWidth
        gcd.CurrentDrawing.arrBlocks[iBloque].entities[4].P[7] = extension           ' X0

      End If


  End Select

  appmain.redraw

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

  If InStr("LAP", NextParamType) = 0 Then Return ' we are expecting a parameter

  ' if we expect a parameter, it will be passed
  If NextParamType = "A" Then

    ' return the angle from horizontal to us
    elem.fParam[iFloat] = Ang(appmain.Xreal(mouseX) - elem.p[elem.p.max - 1], appmain.Yreal(mouseY) - elem.p[elem.p.max])
    elem.fParam[iFloat] *= 180 / Pi
    appmain.redraw
    Return              ' nothing more to do here
  End If

  If NextParamType = "L" Then

    ' return the angle from horizontal to us
    elem.fParam[iFloat] = puntos.distancia(puntos.Near(appmain.Xreal(mouseX)), puntos.Near(appmain.Yreal(mouseY)), elem.p[elem.p.max - 1], elem.p[elem.p.max])

    appmain.redraw
    Return              ' nothing more to do here
  End If

  ' we are waiting for a point
  ClickXr = puntos.Near(appmain.Xreal(mouseX))
  ClickYr = puntos.Near(appmain.Yreal(mouseY))

  ' y si tengo enganche?
  If (gcd.CurrentDrawing.iEntity[2] >= 0) And (gcd.OrthogonalForced = False) Then

    ' esto re enganchado
    ClickXr = gcd.CurrentDrawing.iEntity[0]
    ClickYr = gcd.CurrentDrawing.iEntity[1]

    ' aca tengo que verificar el ortogonal
  Else If Me.StepsDone > 0 Then                                                                          ' puedo hacer ortogonal
    If gcd.OrthogonalForced Or (Not gcd.OrthogonalIgnored And gcd.Orthogonal) Then          ' hablame de operadores logicos

      If Abs(ClickXr - ClickPrevXr) > Abs(ClickYr - ClickPrevYr) Then ' prevalece X
        ClickYr = ClickPrevYr
      Else
        ClickXr = ClickPrevXr
      Endif

    End If

  End If

  RebuildBlock

  appmain.redraw

End

Public Function MouseDown(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseDown

  clsDrawingAids.ErrorMessage = ""
  If InStr("LAP", NextParamType) = 0 Then Return ' we are expecting a parameter

  ' if we expect a parameter, it will be passed
  If NextParamType = "A" Then

    ' return the angle from horizontal to us
    elem.fParam[iFloat] = Ang(appmain.Xreal(mouseX) - elem.p[elem.p.max - 1], appmain.Yreal(mouseY) - elem.p[elem.p.max])
    elem.fParam[iFloat] *= 180 / Pi

    Inc iFloat
    AdvanceStep
    Return              ' nothing more to do here
  End If

  If NextParamType = "L" Then

    ' return the angle from horizontal to us
    elem.fParam[iFloat] = puntos.distancia(puntos.Near(appmain.Xreal(mouseX)), puntos.Near(appmain.Yreal(mouseY)), elem.p[elem.p.max - 1], elem.p[elem.p.max])
    Inc iFloat
    AdvanceStep
    Return              ' nothing more to do here
  End If

  ' we are waiting for a point

  ClickXr = puntos.Near(appmain.Xreal(mouseX))
  ClickYr = puntos.Near(appmain.Yreal(mouseY))

  ' y si tengo enganche?

  If (gcd.CurrentDrawing.iEntity[2] >= 0) And (gcd.OrthogonalForced = False) Then

    ' esto re enganchado

    ClickXr = gcd.CurrentDrawing.iEntity[0]
    ClickYr = gcd.CurrentDrawing.iEntity[1]

    ' aca tengo que verificar el ortogonal

  Else If Me.StepsDone > 0 Then                                                                          ' puedo hacer ortogonal
    If gcd.OrthogonalForced Or (Not gcd.OrthogonalIgnored And gcd.Orthogonal) Then          ' hablame de operadores logicos

      If Abs(ClickXr - ClickPrevXr) > Abs(ClickYr - ClickPrevYr) Then ' prevalece X
        ClickYr = ClickPrevYr
      Else
        ClickXr = ClickPrevXr
      Endif

    End If

  End If

  ClickPrevXr = ClickXr
  ClickPrevYr = ClickYr

  Inc iPoints
  AdvanceStep

End

' Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseUp
'
' End

Public Sub AdvanceStep()

  Inc StepsDone
  If Me.StepsDone = Me.StepsTotal Then
    EntityBuilder.elem = elem
    EntityBuilder.Finish
    elem = Null

  End If

End

Public Function Draw2(oE As Entity)

  cadInsert.Draw2(oe)

End

Public Sub CreatePolygon(oE As Entity)

  cadInsert.CreatePolygon(oe)

End

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer

  cadInsert.BuildPOI(oe, arrIndex)

End

Public Sub Cancel()

  elem = Null
  gcd.clsJobPrevious = Me
  gcd.clsJob = clsDefaultJob
  clsDrawingAids.CleanTexts
  appmain.redraw

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(oE As Entity) As Boolean

  ' primero agregamos la entidad al array

  cadInsert.Finish(oe)

End









' "entity": "LARGE_RADIAL_DIMENSION",
' "index": 312,
' "type": 516,
' "handle": [0, 4860],
' "size": 1500,
' "bitsize": 11864,
' "preview_exists": 1,
' "eed": [
'   {
'     "size": 26,
'     "handle": [5, 23],
'     "code": 0,
'     "value": "DSTYLE"
'   },
'   {
'     "code": 2,
'     "value": 0
'   },
'   {
'     "code": 70,
'     "value": 50
'   },
'   {
'     "code": 40,
'     "value": 0.78539816339745
'   },
'   {
'     "code": 2,
'     "value": 1
'   },
'   {
'     "size": 30,
'     "handle": [5, 4701],
'     "code": 70,
'     "value": 387
'   },
'   {
'     "code": 70,
'     "value": 1
'   },
'   {
'     "code": 70,
'     "value": 388
'   },
'   {
'     "code": 40,
'     "value": 0.0
'   },
'   {
'     "code": 70,
'     "value": 390
'   },
'   {
'     "code": 40,
'     "value": 0.0
'   }
' ],
' "reactors": [
'   [4, 2, 4862, 4862]
' ],
' "xdicobjhandle": [3, 2, 4861, 4861],
' "_subclass": "AcDbEntity",
' "prev_entity": [8, 0, 0, 4859],
' "next_entity": [10, 1, 75, 4935],
' "layer": [5, 2, 5261, 5261],
' "preview_exists": 1,
' "preview_is_proxy": 0,
' "preview_size": 1288,
' "preview
' "entmode": 2,
' "nolinks": 0,
' "color": 256,
' "ltype_scale": 1.0,
' "ltype_flags": 0,
' "plotstyle_flags": 0,
' "invisible": 0,
' "linewt": 29,
' "_subclass": "AcDbDimension",
' "extrusion": [0.0, 0.0, 1.0],
' "text_midpt": [381.6653012244023, 214.72001678258115],
' "elevation": 0.0,
' "flag1": 10,
' "user_text": "",
' "text_rotation": 0.0,
' "horiz_dir": 0.0,
' "ins_scale": [1.0, 1.0, 1.0],
' "ins_rotation": 0.0,
' "attachment": 5,
' "lspace_style": 1,
' "lspace_factor": 1.0,
' "act_measurement": 10.50494238347625,
' "clone_ins_pt": [0.0, 0.0],
' "flag": 128,
' "_subclass": "AcDbRadialDimensionLarge",
' "def_pt": [388.81386432399268, 209.7637151214733, 0.0],
' "first_arc_pt": [380.1809085759985, 215.74918833027891, 0.0],
' "leader_len": 0.0,
' "ovr_center": [372.43041130472159, 200.53585464993569, 0.0],
' "jog_point": [376.3056599403601, 208.14252149010716, 0.0],
' "dimstyle": [5, 1, 57, 57],
' "block": [5, 2, 4863, 4863]

' "entity": "DIMENSION_ORDINATE",
' "index": 319,
' "type": 20,
' "handle": [0, 4936],
' "size": 122,
' "bitsize": 876,
' "_subclass": "AcDbEntity",
' "prev_entity": [8, 0, 0, 4935],
' "next_entity": [10, 1, 9, 4945],
' "layer": [5, 2, 5261, 5261],
' "preview_exists": 0,
' "entmode": 2,
' "nolinks": 0,
' "color": 256,
' "ltype_scale": 1.0,
' "ltype_flags": 0,
' "plotstyle_flags": 0,
' "invisible": 0,
' "linewt": 29,
' "_subclass": "AcDbDimension",
' "extrusion": [0.0, 0.0, 1.0],
' "text_midpt": [339.406966706015, 201.3821301658075],
' "elevation": 0.0,
' "flag1": 11,
' "user_text": "",
' "text_rotation": 0.0,
' "horiz_dir": 0.0,
' "ins_scale": [1.0, 1.0, 1.0],
' "ins_rotation": 0.0,
' "attachment": 5,
' "lspace_style": 1,
' "lspace_factor": 1.0,
' "act_measurement": 126.38743121141022,
' "clone_ins_pt": [0.0, 0.0],
' "_subclass": "AcDbOrdinateDimension",
' "def_pt": [142.92093415289901, 73.80422276392108, 0.0],
' "feature_location_pt": [326.91019506733892, 200.19165397533129, 0.0],
' "leader_endpt": [335.5974428964912, 200.19165397533129, 0.0],
' "flag2": 0,
' "flag": 128,
' "dimstyle": [5, 1, 57, 57],
' "block": [5, 2, 4937, 4937]

' If lpcode = "2" Then mDim.bloque = lpvalue
' If lpcode = "10" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "20" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "11" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "21" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "70" Then mDim.tipo = CInt(lpvalue)
' If lpcode = "71" Then mDim.alineacion = CInt(lpvalue)
' If lpcode = "42" Then mDim.medida = CFloat(lpvalue)
' If lpcode = "42" Then mDim.texto = lpvalue
' If lpcode = "12" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "13" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "14" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "15" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "16" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "26" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "22" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "23" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "24" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "25" Then mDim.p.Add(CFloat(lpvalue))
' If lpcode = "50" Then mDim.angulo = CFloat(lpvalue)
