' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
'Fast
Inherits EntityBase
Public Const Gender As String = "Point"
Public Const HelperTrabajo As String = ("a point")
Public Const ParamType As String = "P"                             ' that is Point, Point; could be Color Text, etc
Public Const ParamHelper As String = "Point"

' The entity handler receives a user action, and returns the number of expected parameter
' If definitive = true, means the parameter is set
Public Function NewParameter(eBuild As Entity, vParam As Variant[], Optional Definitive As Boolean = False) As Boolean

  If Me.StepsDone = 0 Then

    Try eBuild.P[0] = vParam[1]
    Try eBuild.P[1] = vParam[2]

    If definitive Then Return True

  Endif

End

Public Sub Draw(oE As Entity)

  If Not oE.Visible Then Return

  gl.PointSize(oe.LineWidth)
  gl.Begin(gl.POINTS)
  gl.Vertex2f(oe.P[0], oe.P[1])
  gl.End

End

'' The paint version of the entity
Public Function Draw2(oE As Entity)

  Paint.Arc(oE.p[0], oE.p[1], 1 / gcd.PrintingScale)
  paint.Stroke

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity) As Integer

  ' si este valor no es provisto , estos POI son de la ultima entidad

  oe.PoiPoints.Clear
  oe.PoiType.Clear

  ' points: end-mid-end
  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiEndPoint)

End

Public Sub ExportDXFCol(e As Entity, ByRef cExport As Collection) As Boolean

  cExport.Add("POINT", dxf.codEntity)
  clsEntities.DXFExportCommonCol(e, cExport)
  cExport.Add("AcDbPoint", "100")
  cExport.Add(CStr(e.p[0]), dxf.codX0)
  cExport.Add(CStr(e.p[1]), dxf.codY0)
  cExport.Add("0", DXF.codZ0)
  cExport.Add(CStr(e.fParam[0]), "39")

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer

  e.P.Clear
  For i = 0 To sClaves.Max

    If sClaves[i] = "10" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))
    'If sClaves[i] = "30" Then e.P.Add(CFloat(sValues[i]))
    If sClaves[i] = "39" Then e.fParam.Add(CFloat(sValues[i]))

  Next
  Return True

  ' catch

  Return False

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As JSONCollection, e As Entity) As Boolean

  'Common Pack
  '   e.dwg = c
  ' e.dwg["index"] = c["index"]
  ' e.dwg["type"] = c["type"]
  ' e.dwg["handle"] = c["handle"]
  ' e.dwg["size"] = c["size"]
  ' e.dwg["bitsize"] = c["bitsize"]
  ' If c.Exist("ownerhandle") Then
  '   e.dwg["ownerhandle"] = c["ownerhandle"]
  ' Endif
  ' e.dwg["_subclass"] = c["_subclass"]
  ' e.dwg["prev_entity"] = c["prev_entity"]
  ' e.dwg["next_entity"] = c["next_entity"]
  ' e.dwg["layer"] = c["layer"]
  ' e.dwg["preview_exists"] = c["preview_exists"]
  ' e.dwg["entmode"] = c["entmode"]
  ' e.dwg["nolinks"] = c["nolinks"]
  ' e.dwg["color"] = 0
  ' e.dwg["ltype_scale"] = 1.0
  ' e.dwg["ltype_flags"] = 1
  ' e.dwg["plotstyle_flags"] = 0
  ' e.dwg["invisible"] = 0
  ' e.dwg["linewt"] = 30
  e.P.Clear
  e.P.Add(c["x"])
  e.P.Add(c["y"])

  Return True

Catch

  Return False

End

'' Return if that position is over the entity within the tolerance
Public Function OverMe(e As Entity, Xr As Float, Yr As Float, tolerance As Float) As Boolean

  If puntos.Around(xr, yr, E.P[0], E.P[1], tolerance) Then Return True

  Return False

End
