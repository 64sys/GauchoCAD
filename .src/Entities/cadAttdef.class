' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
Create Static
' Fast

Public Const Gender As String = "Attdef"
Public Const DrawingOrder As Integer = 100 ' 1 a 32.724 esto debe Drawse primero y ser sobreescrito por el resto
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const HelperTrabajo As String = ("Inserts an attdef")
Public Const ParamType As String = "PAFT"
Public Const ParamHelper As String = "Start point;Angle;Heigth;"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ; 0 ; 10 ; "
Public Const StretchAble As Boolean = False
Public Const GAMBASCADENTITY As String = "EntityBase"
Public Const USEWITH As String = "EntityBuilder"
Public Const OrthogonalIgnored As Boolean = False
Public Const OrthogonalForced As Boolean = False
Public Selected As Boolean

Public DrawAble As Boolean = False          ' True si durante la construccion ya tiene suficientes elementos para poder hacer una representacion digna
Public Visible As Boolean = True            ' si esta entidad puede ser mostrada independientmente
Public Finished As Boolean = False          ' colocar en true cuando se llegue a completar
Public StepsDone As Integer                 ' esto lo cambia cls ElementBuilder durante la construccion

' JSON and DXF Read/Export
Public Const JSON_Reading As Boolean = True
Public Const JSON_Export As Boolean = False

Public Const DXF_Reading As Boolean = False
Public Const DXF_Export As Boolean = False

' fParam helpers
Public Const TotalParams As Integer = 2
Public Const iTextHeight As Integer = 1
Public Const iTextAngle As Integer = 0

Public Sub Translate(e As Entity, dX As Float, dY As Float, Optional OnlySelected As Boolean = False)

  Dim i As Integer

  If OnlySelected Then

    For i = 0 To e.Psel.Max
      If e.Psel[i] Then

        e.P[i * 2] += dx
        e.P[i * 2 + 1] += dy

      Endif
    Next

  Else

    puntos.Translate(e.p, dx, dy)
  Endif

  'CreatePolygon(e)
  BuildPOI(e)

End

Public Sub Rotate(e As Entity, radians As Float)

  puntos.Rotate(e.P, radians)

  ' el parametro lo tengo que pasar a grados porque la rutina que dibuja el texto usa eso
  E.fParam[0] += radians * 180 / Pi

  'CreatePolygon(e)
  BuildPOI(e)

End

Public Sub Scale(e As Entity, sX As Float, sY As Float)

  Dim i As Integer

  E.fParam[1] *= sY
  For i = 0 To e.p.max Step 2

    e.P[i] = e.P[i] * sX
    e.P[i + 1] = e.P[i + 1] * sY

  Next

  'CreatePolygon(e)
  BuildPOI(e)

End

Public Sub Draw(oE As Entity)

  If Not oE.Visible Then Return

  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.Layerid)

  ' Debug oE.stringdata[0]

  glPlus.DrawText(oE.stringdata[0], oE.p[0], oE.p[1], oE.fParam[0], oE.fParam[1], oE.ColorToPaint)

End

'' A fat version of the line
Public Sub DrawSelected(oE As Entity)

  GLplus.Polygon(oE.Polygon, gcd.ColorForSelected, oE.LineWidth, gcd.stiDashed)

End

'' A fat version of the line
Public Sub DrawRemark(oE As Entity)

  If Not oE.Visible Then Return

  GLplus.Polygon(oE.Polygon, oE.ColorToPaint, oE.LineWidth, gcd.stiDashed)

End

Public Function Draw2(oE As Entity)

  If Not oE.Visible Then Return

  Dim angulo As Float, hText As New PaintExtents, lText As String
  Dim FontScalePrev As Float

  paint.Save

  'FontScalePrev = paint.FontScale
  paint.LineWidth = 1
  ' La cota puede estar inclinada, entonces debo rotarla

  If oE.fParam.Count > 0 Then

    angulo = oE.fParam[0] / 180 * Pi    ' ojo OPENGL--> GRADOS, GAMBAS-->RADIANESDXF

  Else

    angulo = 0

  End If

  If oE.stringdata[0] = "" Then

    ltext = "ABCdef123"

  Else

    ltext = oE.stringdata[0]

  End If

  If oE.fParam.Count > 1 Then

    If oE.fParam[1] <= 0 Then
      paint.Font.Size = 10
    Else
      paint.Font.Size = oE.fParam[1]
    End If

  Else
    ' cuando ScaleZoom es 0.15 el texto coincide con DXF
    ' entonces voy a trabajar con esa relacion

    paint.Font.Size = 10

  End If

  htext = paint.TextExtents(ltext)

  paint.brush = Paint.Color(oE.ColorToPaint)

  paint.Translate(oE.p[0], oE.p[1])
  paint.Rotate(-angulo)
  paint.Scale(1, -1)

  paint.DrawText(ltext)

  paint.Stroke

  paint.Restore

End

'' Creo los puntos de interes
'' Build point of interest

Public Function BuildPOI(oE As Entity, Optional arrIndex As Integer = -1) As Integer

  If arrIndex < 0 Then arrIndex = gcd.CurrentDrawing.arrEntities.Max       ' si este valor no es provisto , estos POI son de la ultima entidad

  oe.PoiPoints.Clear
  oe.PoiType.Clear

  ' points
  oe.poiPoints.insert([oE.p[0], oE.p[1]])
  oe.poiType.Add(gcd.poiBasePoint)
  'oe.poiEntities.Add(arrIndex)

  ' line

  ' Polygon

  Dim tRect As New Float[], poli As New Float[]

  tRect = glPlus.TextExtends(oE.stringdata[0], oE.fParam[1])
  poli.Insert([0, 0, tRect[0], 0, tRect[0], tRect[1], 0, tRect[1]]) ' armo el poligono , que ya tiene la escala
  puntos.Rotate(Poli, oE.fParam[0] * Pi / 180)
  puntos.Translate(Poli, oE.P[0], oE.P[1])

  oe.Polygon.Clear
  oe.Polygon.Insert(poli)

End
' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it

Public Sub Finish(oE As Entity) As Boolean

  'Print "Finish en EntityBase"
  'CreatePolygon(oe)
  BuildPOI(oe)

  ' busco el tipo de linea, si hace falta
  If oE.LineTypeName = "Dashed" Then oE.LineType = 1
  ' tareas finales de armado del objeto
  oE.ColorToPaint = gcd.GetGBColor(oE.colour, oE.Layerid)

  oE.psel.resize(oE.p.count / 2)

  oE.DrawAble = True
  oE.Selected = False
  oE.Finished = True

End

' Importo los datos que puedo procesar de una coleccion y genero un Entity para ser agregado a un array
Public Function ImportJsonCol(c As Collection, e As Entity) As Boolean

  e.ClassHandler = Me
  e.P.Add(c["ins_pt"][0])
  e.P.Add(c["ins_pt"][1])
  e.StringData.Add(c["tag"])
  If Not IsNull(c["default_value"]) Then e.StringData.Add(c["default_value"]) Else e.StringData.Add("")
  e.StringData.Add(c["prompt"])

  ' FIXME: reparar esto
  e.fParam.Add(0) ' Angulo en grados

  e.fParam.Add(c["height"])

  Return True

End

' "entity": "ATTDEF",
' "index": 134,
' "type": 3,
' "handle": [0, 1492],
' "size": 96,
' "bitsize": 708,
' "ownerhandle": [12, 1, 3, 1489],
' "_subclass": "AcDbEntity",
' "layer": [5, 1, 6, 6],
' "preview_exists": 0,
' "entmode": 0,
' "nolinks": 1,
' "color": 3,
' "ltype_scale": 1.0,
' "ltype_flags": 1,
' "plotstyle_flags": 0,
' "invisible": 0,
' "linewt": 30,
' "_subclass": "AcDbText",
' "dataflags": 109,
' "ins_pt": [-0.24, 0.125],
' "alignment_pt": [-0.24, 0.135],
' "extrusion": [0.0, 0.0, 1.0],
' "thickness": 0.000000,
' "height": 0.02,
' "width_factor": 0.8,
' "default_value": "",
' "vert_alignment": 2,
' "_subclass": "AcDbAttributeDefinition",
' "tag": "TAG002",
' "field_length": 0,
' "flags": 0,
' "prompt": "HOJA_N°_DE_TOTAL_N°",
' "style": [5, 1, 25, 25]

Public Sub ExportDXF(e As Entity, hFile As File)

  Print #hFIle, "  0"
  Print #hFIle, "ATTDEF"
  clsEntities.DXFExportCommon(e, hFile)
  Print #hFIle, "100"
  Print #hFIle, "AcDbText"
  Print #hFIle, " 10"                      ' X0
  Print #hFIle, CStr(e.p[0])
  Print #hFIle, " 20"                      ' Y0
  Print #hFIle, CStr(e.p[1])
  Print #hFIle, " 30"                      ' Z0
  Print #hFIle, "0"
  Print #hFIle, " 40"
  Print #hFIle, CStr(e.fParam[1])
  Print #hFIle, "  1"
  Print #hFIle, e.StringData[0]
  Print #hFIle, " 50"
  Print #hFIle, CStr(e.fParam[0])
  Print #hFIle, " 41"
  Print #hFIle, "1"
  Print #hFIle, " 51"
  Print #hFIle, "0"
  Print #hFIle, "  7"
  Print #hFIle, "romanc" ' txtStyle
  Print #hFIle, " 71"
  Print #hFIle, "0"
  Print #hFIle, " 72"                      ' justification:
  ' Horizontal text justification type(Optional , Default = 0)integer codes(Not bit - coded):
  ' 0 = Left 1 = Center  2 = Right 3 = Aligned( If vertical alignment = 0)  4 = Middle( If vertical alignment = 0) 5 = Fit( If vertical alignment = 0)
  Print #hFIle, "3"
  Print #hFIle, " 11"                      ' second point
  Print #hFIle, "0" 'fPuntos[2]  TODO: fix this
  Print #hFIle, " 21"
  Print #hFIle, "0" ' fPuntos[3]
  Print #hFIle, " 31"
  Print #hFIle, "0"

  Print #hFIle, "73"                      ' vertical justification:
  ' Vertical text justification type(Optional , Default = 0): integer codes(Not bit - coded):
  ' 0 = Baseline 1 = Bottom 2 = Middle 3 = Top
  Print #hFIle, "  0"
  Print #hFIle, "210"
  Print #hFIle, "  0"
  Print #hFIle, "220"
  Print #hFIle, "  0"
  Print #hFIle, "230"
  Print #hFIle, "1"
  Print #hFIle, "100"
  Print #hFIle, "AcDbText"

End

Public Function ImportDXF(e As Entity, sClaves As String[], sValues As String[]) As Boolean

  Dim i As Integer

  e.fParam.Resize(Me.TotalParams)
  e.StringData.Add("")

  For i = 0 To sClaves.Max

    If sClaves[i] = "10" Then e.p.Add(CFloat(sValues[i]))                       ' X1
    If sClaves[i] = "20" Then e.P.Add(CFloat(sValues[i]))                       ' Y1
    If sClaves[i] = "40" Then e.fParam[Me.iTextHeight] = CFloat(sValues[i])     ' Altura
    If sClaves[i] = "1" Or sClaves[i] = "3" Then e.StringData[0] &= sValues[i]  ' Texto
    If sClaves[i] = "50" Then e.fParam[Me.iTextAngle] = CFloat(sValues[i])      ' rotacion

  Next

End

' 100 Subclass marker (AcDbText)
'
' 39 Thickness (optional; default = 0)
'
' 10 20 30 First alignment point (in OCS) DXF: X value; APP: 3D point
'
' 40 Text height
'
' 1 Default value (string)
'
' 50 Text rotation (optional; default = 0)
'
' 41 Relative X scale factor (width) (optional; default = 1). This value is also adjusted when fit-type text is used
'
' 51 Oblique angle (optional; default = 0)
'
' 7 Text style name (optional; default = STANDARD)
'
' 71 Text generation flags (optional; default = 0); see TEXT group codes
'
' 72 Horizontal text justification type (optional; default = 0); see TEXT group codes
'
' 11 Second alignment point (in OCS) (optional) DXF: X value; APP: 3D point
'
' Meaningful only if 72 or 74 group values are nonzero
'
' 21, 31 DXF: Y and Z values of second alignment point (in OCS) (optional)
'
' 210 220 230

' 100 Subclass marker (AcDbAttributeDefinition)
'
' 280 Version number: 0 = 2010
'
' 3 Prompt string
'
' 2 Tag string (cannot contain spaces)
'
' 70 Attribute flags: 1 = Attribute is invisible (does not appear) 2 = This is a constant attribute 4 = Verification is required on input of this attribute 8 = Attribute is preset (no prompt during insertion)
'
' 73 Field length (optional; default = 0) (not currently used)
'
' 74 Vertical text justification type (optional, default = 0); see group code 73 inTEXT
'
' 280 Lock position flag. Locks the position of the attribute within the block reference
'
' 100 Subclass marker (AcDbXrecord)
'
' 280 Duplicate record cloning flag (determines how to merge duplicate entries): 1 = Keep existing
'
' 70 MText flag: 2 = multiline attribute  4 = constant multiline attribute definition
'
' 70 isReallyLocked flag:  0 = unlocked  1 = locked
'
' 70  Number of secondary attributes or attribute definitions
'
' 340 hard-pointer id of secondary attribute(s) or attribute definition(s)
'
' 10 Alignment point of attribute or attribute definition
'
' DXF: X value; APP: 3D point
'
' 20,30 DXF: Y and Z values of insertion point
'
' 40 current annotation scale
'
' 2 attribute or attribute definition tag string
'
' 0 Entity type (MTEXT)
'
' 100 Subclass marker (AcDbEntity)
'
' 67 Absent or zero indicates entity is in model space. 1 indicates entity is in paper space (optional)
'
' 8 Layer name
'
' 100 Subclass marker (AcDbMText)
'
' 10 20 30 Insertion point
' '
' DXF: Y and Z values of insertion point
'
' 40 Nominal (initial) text height
'
' 41 Reference rectangle width
'
' 46 Defined annotation height
'
' 71 Attachment point:
'
' 1 = Top left; 2 = Top center; 3 = Top right
'
' 4 = Middle left; 5 = Middle center; 6 = Middle right
'
' 7 = Bottom left; 8 = Bottom center; 9 = Bottom right
'
' 72 Drawing direction:  1 = Left to right 3 = Top to bottom  5 = By style (the flow direction is inherited from the associated text style)
'
' 1 Text string
'
' If the text string is less than 250 characters, all characters appear in group 1. If the text string is greater than 250 characters, the string is divided into 250-character chunks, which appear in one or more group 3 codes. If group 3 codes are used, the last group is a group 1 and has fewer than 250 characters.
'
' 3 Additional text (always in 250-character chunks) (optional)
'
' 7 DXF: X value; APP: 3D vectText style name (STANDARD if not provided) (optional)
'
' 210 220 230  Extrusion direction (optional; default = 0, 0, 1)
'
' 11 21, 31 X Y And Z values Of X - axis direction vector( In WCS)
'
' 42 Horizontal width of the characters that make up the mtext entity.
'
' This value will always be equal to or less than the value of group code 41 (read-only, ignored if supplied).
'
' 43 Vertical height of the mtext entity (read-only, ignored if supplied)
'
' 50 Rotation angle in radians
'
' 73 Mtext line spacing style (optional): 1 = At least (taller characters will override) 2 = Exact (taller characters will not override)
'
' 44 Mtext line spacing factor (optional): Percentage of default (3-on-5) line spacing to be applied. ( 0.25 to 4.00)
'
' 90 Background fill setting: 0 = Background fill off 1 = Use background fill color  2 = Use drawing window color as background fill color
'
' 63  Background color (if color index number)
'
' 420-429  Background color (if RGB color)
'
' 430-439  Background color (if color name)
'
' 45 Fill box scale (optional): Determines how much border is around the text.
'
' 63  Background fill color (optional):  Color to use for background fill when group code 90 is 1.
'
' 441   Transparency of background fill color (not implemented)
'
' If group 72 and/or 74 values are nonzero then the first alignment point values are ignored and new values are calculated by AutoCAD, based on the second alignment point and the length and height of the text string itself (after applying the text style). If the 72 and 74 values are zero or missing, then the second alignment point is meaningless.
