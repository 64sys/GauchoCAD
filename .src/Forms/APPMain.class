' Gambas class file

' Gambas module file

' RADG
' Rapid Application Development for Gambas
'
' Copyright (C) Martín Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'
' Variables que se pasaron desde el módulo de inicio
Public Observer As Observer         ''Observador usaod para avisar si hay cambios sin aplicar
Private cex As New Collection       '' Variables básicas para pasar a los demas formularios
Private con As New Connection       '' Conexión a la base de datos
Private adi As String               '' Directorio del programa
Private dbc As String               '' Archivo de configuracion de la base de datos
Private apc As String               '' Archivo de configuracion del programa
Private etx As String               '' Editor de texto plano por ddefecto
Private lgg As Logger               '' Registro de eventos de la aplicación.
'------------------------------------------------------------------------------

'Variables del formulario
Public hFCAD As FCAD                    '' CAD Editor
Public CurrentForm As Form
Public CurrentFile As String
Public CurrentColor As Integer
Public CurrentLayer As String

'variables de ambiente
Public flgShowInspector As Boolean = True
Public HistoCom As New String[]     '' Commands history
Public ListCom As New String[]      '' Commands list
Public AliasCom As New String[]     '' Commands alias
Private p As Integer

Public cMod As New Collection       '' All drawings common collection

Public Sub Run(cin As Collection)

    Dim obj As Object
    Dim ictn As New Collection
    Dim mnu As Menu
    Dim tob As ToolButton
    Dim i As Integer
    Dim iSet As String
    Dim z As Integer

    CurrentColor = Color.Green

    '------------------------------------------------------------------------------
    '' Estableciendo las variables de conexion y otras más
    cex = cin
    con = cin["Connex"]           ' Conexión a la base de datos
    adi = cin["AppDir"]           ' Directorio del programa
    apc = cin["AppCfg"]           ' Archivo de configuracion del programa
    dbc = cin["DbsCfg"]           ' Archivo de configuracion de la base de datos
    etx = cin["AppEdi"]           ' Editor de texto plano por defecto
    lgg = cin["AppLog"]           ' Registro de eventos de la aplicación.
    '------------------------------------------------------------------------------
    'iSet = xmg.GetVar("Desktop.Icons", apc)
    iSet = "/usr/share/icons/Numix/64"
    ictn = dsk.GNumix(iSet & "/")
    '------------------------------------------------------------------------------
    For Each mnu In Me.Menus
        For Each obj In mnu.Children
            'Agregando item del menu en el menu alternativo
            If obj.Visible = True Then
                Select mnu.Name
                    Case "grpEntities"
                        tob = New ToolButton(pnlEntities) As "entity"
                        z = 48
                    Case "grpTools"
                        tob = New ToolButton(pnlTools) As "tool"
                        z = 48
                    Case "grpSmart"
                        tob = New ToolButton(pnlSmart) As "tool"
                        z = 48

                    Case "grpFile"
                        tob = New ToolButton(pnlFile) As "menuapp"
                        z = 32

                    Case "grpOptions"
                        tob = New ToolButton(pnlFile) As "menuapp"
                        z = 32

                    Case "grpView"
                        tob = New ToolButton(pnlToolsH) As "tool"
                        z = 32

                    Case Else
                        tob = New ToolButton(pnlFile) As "menuapp"
                        z = 32
                End Select

                With tob
                    .Name = "tob" & obj.Tag & CStr(i)
                    .Tag = obj.Tag
                    .Tooltip = obj.Text
                    .Enabled = obj.Enabled

                    .W = z
                    .H = z

                    If Exist(ictn[obj.Tag]) Then
                        If Stat(ictn[obj.Tag]).Type = gb.File Or Stat(ictn[obj.Tag]).Type = gb.Link Then
                            Select mnu.Name
                                Case "grpFile", "grpOptions", "grpHelp", "grpView", "grpSmart"
                                    tob.Picture = Image.Load(ictn[obj.Tag]).Stretch(z - 8, z - 8).Picture

                                Case Else
                                    tob.Picture = obj.Picture
                                    .Border = True
                            End Select
                        Else
                            tob.Picture = obj.Picture
                            .Border = True
                        Endif
                    Else
                        tob.Picture = obj.Picture
                        .Border = True
                    Endif
                End With
            Endif
            Inc i
        Next
    Next

    Me.Show()

End

' Public Sub Action_Activate(sTask As String) As Boolean
'
'     '     'Dim hFImport As FImport                 '' Impor from others formats
'
'     Dim FileDef As String
'     Dim i As Integer
'     Dim FilePath As String            ''Nombre del archivo que se abrira
'     Dim cModel As New Collection
'     Dim wtag As String
'     Dim w As Window
'     Dim template As Boolean
'     Dim stx As New String[]
'     Dim mdl As New Collection
'     Dim s As String
'     Dim ctn As New Collection
'     Dim hFConfig As FConfig                 '' Edit program configuration
'     Dim cfg As New Collection
'     Dim hFAbout As FAbout                  '' Formulario que muestra informacin del programa
'
'     Select sTask
'         Case "new"
'             FileDef = adi &/ "default.xml"
'             If Exist(FileDef) = False Then
'                 Copy "./def.xml" To FileDef
'             Endif
'
'             For i = 1 To 99
'                 FilePath = User.Home &/ "drawing" & CStr(i) & ".xml"
'                 If ExistWin(FilePath, Workspace1) = False Then
'                     Break
'                 Endif
'             Next
'
'             FileDef = adi &/ "default.xml"
'             If Exist(FileDef) Then
'                 If Exist(FilePath) = False Then
'                     Copy FileDef To FilePath
'                 Endif
'             Endif
'
'             cModel = cad.LoadGaucho(FilePath)
'             LoadComboboxes(cModel.Copy())
'
'             wtag = FilePath
'             If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
'
'                 hFCAD = New FCAD(cModel)
'                 hFCAD.Tag = wtag
'                 hFCAD.Title = File.Name(FilePath)
'                 Workspace1.Add(hFCAD)
'             Else
'                 For Each w In Workspace1.Windows
'                     If w.Tag = wtag Then
'                         Workspace1.ActiveWindow = w
'                         Break
'                     Endif
'                 Next
'             Endif
'
'         Case "open"
'             Dialog.Filter = ["*.xml", "GauchoCAD"]
'             Dialog.OpenFile(False)
'             FilePath = Dialog.Path
'
'             If Exist(FilePath) Then
'                 Select String.LCase(File.Ext(FilePath))
'                     Case "xml"
'                         'cModel = FileLoad(FilePath)
'                         cModel = cad.LoadGaucho(FilePath)
'                         LoadComboboxes(cModel)
'
'                         wtag = FilePath
'                         If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
'                             hFCAD = New FCAD(cModel.Copy())
'                             hFCAD.Tag = wtag
'                             hFCAD.Title = File.Name(FilePath)
'                             Workspace1.Add(hFCAD)
'                         Else
'                             For Each w In Workspace1.Windows
'                                 If w.Tag = wtag Then
'                                     Workspace1.ActiveWindow = w
'                                     Break
'                                 Endif
'                             Next
'                         Endif
'                 End Select
'             Endif
'
'         Case "save"
'             For i = 1 To 99
'                 If File.Name(CurrentFile) = "drawing" & CStr(i) & "." & File.Ext(CurrentFile) Then
'                     template = True
'                     Break
'                 Endif
'             Next
'
'             If template = True Then
'                 Task("saveas")
'             Else
'                 cad.SaveGaucho(CurrentFile, hFCAD.cModel)
'             Endif
'
'         Case "saveas"
'             Dialog.Filter = ["*.xml", "GauchoCAD"]
'             If Dialog.SaveFile() Then Return
'             FilePath = Dialog.Path
'             If File.Ext(FilePath) <> "xml" Then
'                 FilePath = FilePath & ".xml"
'             Endif
'             cad.SaveGaucho(FilePath, hFCAD.cModel)
'         Catch
'             Message.Info(Error.Text)
'
'         Case "import"
'             stx = dsk.FileChooser(User.Home, ["dxf", "dwg"])
'             If stx.count > 0 Then
'                 FilePath = stx[0]
'
'                 Select String.LCase(File.Ext(FilePath))
'                     Case "dxf"
'                         mdl = cad.ImportDxf(FilePath)
'                         If mdl.Count > 0 Then
'                             hFCAD.cImport = mdl
'                         Endif
'
'                     Case "dwg"
'                         Message.Info(("Not implemented yet"))
'                         ' mdl = cad.ImportDwg(FilePath)
'                         ' If mdl.Count > 0 Then
'                         '     hFCAD.cImport = mdl
'                         ' Endif
'                 End Select
'
'             Endif
'
'         Case "export"
'
'         Case "print"
'
'         Case "close"
'
'         Case "quit"
'             Me.Close
'
'         Case "options"
'             wtag = sTask
'             If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
'                 '---------------------------------------------------
'                 s = adi &/ "cfg.xml"
'                 If Exist(File.Dir(s)) = False Then
'                     Mkdir File.Dir(s)
'                 Endif
'                 If Exist(s) = False Then
'                     'ctn = xmg.XmlIni()
'                     ctn = cad.CADConfig()
'                     xmg.XmlConfMaker(s, ctn, Application.Name)
'                 Endif
'                 hFConfig = New FConfig(cex)
'                 hFConfig.Title = ("Configuration")
'                 hFConfig.Tag = wtag
'                 Workspace1.Add(hFConfig)
'                 '---------------------------------------------------
'             Else
'                 For Each w In Workspace1.Windows
'                     If w.Tag = wtag Then
'                         Workspace1.ActiveWindow = w
'                         Break
'                     Endif
'                 Next
'             Endif
'
'         Case "line"
'
'         Case "pline"
'
'         Case "circle"
'
'         Case "arc"
'
'         Case "ellipse"
'
'         Case "solid"
'
'         Case "text"
'
'         Case "mtext"
'
'         Case "block"
'
'         Case "dim"
'
'         Case "leader"
'
'         Case "spline"
'
'         Case "hatch"
'
'         Case "rectangle"
'
'         Case "point"
'
'         Case "move"
'
'         Case "copy"
'
'         Case "Scale"
'
'         Case "rotate"
'
'         Case "mirror"
'
'         Case "trim"
'
'         Case "fillet"
'
'         Case "chamfer"
'
'         Case "array"
'
'         Case "stretch"
'
'         Case "offset"
'
'         Case "divide"
'
'         Case "erase"
'
'         Case "slab4"
'
'         Case "slab3"
'
'         Case "column"
'
'         Case "beam"
'
'         Case "wallcolumn"
'
'         Case "zoomw"
'
'         Case "pan"
'
'         Case "zoome"
'
'         Case "info"
'             wtag = sTask
'             If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
'                 File.Save("/tmp/apppath.txt", Application.Dir)
'                 cfg = sog.ProjInfo(Application.Path & "/.project")
'                 hFAbout = New FAbout(cfg)
'                 hFAbout.Tag = wtag
'                 hFAbout.Title = ("About") & " " & Application.Name
'                 Workspace1.Add(hFAbout)
'             Else
'                 For Each w In Workspace1.Windows
'                     If w.Tag = wtag Then
'                         Workspace1.ActiveWindow = w
'                         Break
'                     Endif
'                 Next
'             Endif
'
'         Case "help"
'             Print "Help"
'
'     End Select
'
' End

Public Sub Form_Open()

    Dim n As Integer
    Dim b As Integer
    Dim x As Integer

    For n = 0 To Screens.Count - 1
        If Screens[n].AvailableWidth > b Then
            b = Screens[n].AvailableWidth
            x = n
        Endif
    Next

    Me.x = Screens[x].AvailableX
    Me.y = Screens[x].AvailableY

    Me.Maximized = True

    gTask("new")

End

Public Sub entity_Click()

    Dim obj As Object

    obj = Last

    If Workspace1.ActiveWindow Then
        modCAD.clsJob.KeyText(String.UCaseFirst(obj.Tag))
    Endif

End

Public Sub tool_Click()

    Dim obj As Object

    obj = Last

    If Workspace1.ActiveWindow Then
        modCAD.clsJob.KeyText(String.UCaseFirst(obj.Tag))
    Endif

End

Public Sub menuapp_Click()

    Dim obj As Object

    obj = Last

    gTask(obj.Tag)

End

Public Sub view_Click()

    Dim obj As Object

    obj = Last

    If Workspace1.ActiveWindow Then
        modCAD.clsJob.KeyText(String.UCaseFirst(obj.Tag))
    Endif

End

'' This create a collection whith all the drawing information, graphical and no
'' t graphical. The collections made here will be used in each instance of FCAD

' Public Function FileLoad(sFile As String) As Collection
'
'     Dim cMdl As New Collection
'
'     cMdl = cad.LoadGaucho(sFile)
'
'     Return cMdl
'
' End

'' This
Public Sub FileCreate(sTemplate As String)

End

Public Sub LoadComboboxes(cMdl As Collection)

    Dim aLayer As Variant
    Dim aStyle As Variant
    Dim aWidth As Variant
    Dim aDimSt As Variant

    cMod = cMdl

    cboLayers.Clear
    cboStyles.Clear
    cboWidths.Clear
    cboDimSts.Clear

    If cMdl.Count > 0 Then
        If cMdl.Exist("Layers") Then
            For Each aLayer In cMdl["Layers"]
                cboLayers.Add(aLayer["name"])
            Next
            For Each aLayer In cMdl["Layers"]
                cboLayers.Text = aLayer["name"]
                Break
            Next
        Endif

        If cMdl.Exist("Styles") Then
            For Each aStyle In cMdl["Styles"]
                cboStyles.Add(aStyle["name"])
            Next
            For Each aStyle In cMdl["Styles"]
                cboStyles.Text = aStyle["name"]
                Break
            Next
        Endif

        If cMdl.Exist("Widths") Then
            For Each aWidth In cMdl["Widths"]
                cboWidths.Add(aWidth["value"])
            Next
            For Each aWidth In cMdl["Widths"]
                cboWidths.Text = aWidth["value"]
                Break
            Next
        Endif

        If cMdl.Exist("DimSts") Then
            For Each aDimSt In cMdl["DimSts"]
                cboDimSts.Add(aDimSt["name"])
            Next
            For Each aDimSt In cMdl["DimSts"]
                cboDimSts.Text = aDimSt["name"]
                Break
            Next
        Endif

    Endif

End

Public Sub gTask(sTask As String)

    Dim s As String
    Dim cModel As New Collection
    Dim ctn As New Collection
    Dim cfg As New Collection

    Dim hFConfig As FConfig                 '' Edit program configuration
    Dim hFAbout As FAbout                  '' Formulario que muestra informacin del programa
    'Dim hFImport As FImport                 '' Impor from others formats
    Dim w As Window
    Dim wtag As String

    Dim stx As New String[]
    Dim FilePath As String            ''Nombre del archivo que se abrira
    Dim FileDef As String
    Dim i As Integer
    Dim mdl As New Collection
    Dim template As Boolean

    ' if the drawing is drawingX.xml, drawingX.gcad where X is a integer number then the Ssave is changed to Save As

    Select sTask

        Case "save"
            For i = 1 To 99
                If File.Name(CurrentFile) = "drawing" & CStr(i) & "." & File.Ext(CurrentFile) Then
                    template = True
                    Break
                Endif
            Next

            If template = True Then
                gTask("saveas")
            Else
                cad.SaveGaucho(CurrentFile, hFCAD.cModel)
            Endif

        Case "saveas"

            Dialog.Filter = ["*.xml", "GauchoCAD"]
            If Dialog.SaveFile() Then Return
            FilePath = Dialog.Path
            If File.Ext(FilePath) <> "xml" Then
                FilePath = FilePath & ".xml"
            Endif
            cad.SaveGaucho(FilePath, hFCAD.cModel)
        Catch
            Message.Info(Error.Text)

        Case "import"
            stx = dsk.FileChooser(User.Home, ["dxf", "dwg"])
            If stx.count > 0 Then
                FilePath = stx[0]

                Select String.LCase(File.Ext(FilePath))
                    Case "dxf"
                        mdl = cad.ImportDxf(FilePath)
                        If mdl.Count > 0 Then
                            hFCAD.cImport = mdl
                        Endif

                    Case "dwg"
                        Message.Info(("Not implemented yet"))
                        ' mdl = cad.ImportDwg(FilePath)
                        ' If mdl.Count > 0 Then
                        '     hFCAD.cImport = mdl
                        ' Endif
                End Select

            Endif

            'mdl = cad.Import(FilePath)

            'wtag = sTask
            'hFImport = New FImport(cex)
            'hFImport.Tag = wtag
            'hFImport.Title = ("Import")
            'hFImport.Show()

        Case "open"

            Dialog.Filter = ["*.xml", "GauchoCAD"]
            Dialog.OpenFile(False)
            FilePath = Dialog.Path

            If Exist(FilePath) Then
                Select String.LCase(File.Ext(FilePath))
                    Case "xml"
                        'cModel = FileLoad(FilePath)
                        cModel = cad.LoadGaucho(FilePath)
                        LoadComboboxes(cModel)

                        wtag = FilePath
                        If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
                            hFCAD = New FCAD(cModel.Copy())
                            hFCAD.Tag = wtag
                            hFCAD.Title = File.Name(FilePath)
                            Workspace1.Add(hFCAD)
                        Else
                            For Each w In Workspace1.Windows
                                If w.Tag = wtag Then
                                    Workspace1.ActiveWindow = w
                                    Break
                                Endif
                            Next
                        Endif
                End Select
            Endif
        Case "new"

            FileDef = adi &/ "default.xml"
            If Exist(FileDef) = False Then
                Copy "./def.xml" To FileDef
            Endif

            For i = 1 To 99
                FilePath = User.Home &/ "drawing" & CStr(i) & ".xml"
                If ExistWin(FilePath, Workspace1) = False Then
                    Break
                Endif
            Next

            FileDef = adi &/ "default.xml"
            If Exist(FileDef) Then
                If Exist(FilePath) = False Then
                    Copy FileDef To FilePath
                Endif
            Endif

            'cModel = FileLoad(FilePath)
            cModel = cad.LoadGaucho(FilePath)
            LoadComboboxes(cModel.Copy())

            wtag = FilePath
            If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then

                hFCAD = New FCAD(cModel)
                hFCAD.Tag = wtag
                hFCAD.Title = File.Name(FilePath)
                Workspace1.Add(hFCAD)
            Else
                For Each w In Workspace1.Windows
                    If w.Tag = wtag Then
                        Workspace1.ActiveWindow = w
                        Break
                    Endif
                Next
            Endif

        Case "info"
            wtag = sTask
            If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
                File.Save("/tmp/apppath.txt", Application.Dir)
                cfg = sog.ProjInfo(Application.Path & "/.project")
                hFAbout = New FAbout(cfg)
                hFAbout.Tag = wtag
                hFAbout.Title = ("About") & " " & Application.Name
                Workspace1.Add(hFAbout)
            Else
                For Each w In Workspace1.Windows
                    If w.Tag = wtag Then
                        Workspace1.ActiveWindow = w
                        Break
                    Endif
                Next
            Endif

        Case "help"
            Print "Help"

        Case "options"
            wtag = sTask
            If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
                '---------------------------------------------------
                s = adi &/ "cfg.xml"
                If Exist(File.Dir(s)) = False Then
                    Mkdir File.Dir(s)
                Endif
                If Exist(s) = False Then
                    'ctn = xmg.XmlIni()
                    ctn = cad.CADConfig()
                    xmg.XmlConfMaker(s, ctn, Application.Name)
                Endif
                hFConfig = New FConfig(cex)
                hFConfig.Title = ("Configuration")
                hFConfig.Tag = wtag
                Workspace1.Add(hFConfig)
                '---------------------------------------------------
            Else
                For Each w In Workspace1.Windows
                    If w.Tag = wtag Then
                        Workspace1.ActiveWindow = w
                        Break
                    Endif
                Next
            Endif

        Case "quit"
            Me.Close

    End Select

End

'' This vierify if the drawing is already opened

Public Function ExistWin(wtag As String, ws As Workspace) As Boolean

    Dim wExist As Boolean
    Dim w As Window

    wExist = False

    For Each w In ws.Windows
        If w.Tag = wtag Then
            wExist = True
            Break
        Endif
    Next

    Return wExist

End

'' This is very important because switch the cModel collection between drawings

Public Sub Workspace1_Activate()

    Dim aWin As Window

    aWin = Workspace1.ActiveWindow

    If aWin.Name = "FCAD" Then

        hFCAD = aWin
        LoadComboboxes(hFCAD.cModel)

        Print aWin.Tag
        CurrentFile = aWin.Tag
    Endif

End

Public Sub tobLayers_Click()

    Dim FLay As FLayers

    FLay = New FLayers
    'FLay.Run(cMod)                             ' si le cargo la copia no se guardan los cambios,
    FLay.Run(hFCAD.cModel)

End

Public Sub ColorPalette1_Click()

    CurrentColor = ColorPalette1.Current
    Print CurrentColor

End

Public Sub dprop_Click()

    Dim obj As Object

    obj = Last

    Select obj.Tag
        Case "layer"
            CurrentLayer = obj.Text
            Print CurrentLayer
    End Select

End

Public Sub txoCom_KeyRelease()

    Dim sCom As String
    Dim i As Integer
    Dim obj As Object
    Dim enty As Entity

    Dim x As Float
    Dim y As Float

    Select Key.Code
        Case Key.Enter, Key.Return, Key.Space
            sCom = txoCom.Text
            If Workspace1.ActiveWindow Then
                obj = modCAD.clsJob
                Select Object.Type(obj)
                    Case "clsEntityBuilder"
                        enty = obj.elem
                        Select enty.Gender
                            Case "Line"
                                If InStr(sCom, ",") > 0 Then

                                    x = Split(sCom, ",")[0]
                                    y = Split(sCom, ",")[1]

                                    Select p ' P es una variable global tipo Private
                                        Case 0
                                            enty.P[0] = x
                                            enty.P[1] = y
                                            Inc p

                                        Case Else

                                            enty.P[0 + p] = x
                                            enty.P[1 + p] = y
                                            p = 0

                                    End Select

                                Endif
                        End Select
                End Select
            Endif

            If sCom <> "" Then
                If Starter.cCommands.Exist(sCom) Then

                Endif
                HistoCom.Push(sCom)
                Print sCom
                If Workspace1.ActiveWindow Then
                    modCAD.clsJob.KeyText(sCom)
                Endif
                txoCom.Text = ""
            Endif

    End Select

End
