' Gambas class file

' Gambas module file

' RADG
' Rapid Application Development for Gambas
'
' Copyright (C) Martín Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'
' Variables que se pasaron desde el módulo de inicio
Public Observer As Observer         ''Observador usaod para avisar si hay cambios sin aplicar
Private cex As New Collection       '' Variables básicas para pasar a los demas formularios
Private con As New Connection       '' Conexión a la base de datos
Private adi As String               '' Directorio del programa
Private dbc As String               '' Archivo de configuracion de la base de datos
Private apc As String               '' Archivo de configuracion del programa
Private etx As String               '' Editor de texto plano por ddefecto
Private lgg As Logger               '' Registro de eventos de la aplicación.
'------------------------------------------------------------------------------

'Variables del formulario
Public hFCAD As FCAD                    '' CAD Editor
Public CurrentForm As Form
Public CurrentFile As String

Public SelectedColour As Boolean
Public CurrentColor As Integer
Public imgColor As Image

Public SelectedLayer As Boolean
Public CurrentLayer As String

Public SelectedLtype As Boolean
Public CurrentLtype As Integer

Public SelectedWidth As Boolean

'variables de ambiente
Public flgShowInspector As Boolean = True
Public HistoCom As New String[]     '' Commands history
Public ListCom As New String[]      '' Commands list
Public AliasCom As New String[]     '' Commands alias
Private p As Integer

Public cMod As New Collection       '' All drawings common collection
Public cProp As New Collection      '' Properties list
Private iTheme As Integer           '' Theme luminance (determine if Dark or Light)

Public Sub Run(cin As Collection)

    Dim obj As Object
    Dim ictn As New Collection
    Dim mnu As Menu
    Dim tob As ToolButton
    Dim i As Integer
    Dim iSet As String
    Dim z As Integer
    Dim ctr As Object
    Dim r As Integer
    Dim g As Integer
    Dim b As Integer
    Dim img As Image

    'CurrentColor = Color.Green

    '------------------------------------------------------------------------------
    '' Estableciendo las variables de conexion y otras más
    cex = cin
    con = cin["Connex"]           ' Conexión a la base de datos
    adi = cin["AppDir"]           ' Directorio del programa
    apc = cin["AppCfg"]           ' Archivo de configuracion del programa
    dbc = cin["DbsCfg"]           ' Archivo de configuracion de la base de datos
    etx = cin["AppEdi"]           ' Editor de texto plano por defecto
    lgg = cin["AppLog"]           ' Registro de eventos de la aplicación.
    '------------------------------------------------------------------------------
    iSet = xmg.GetVar("Desktop.Icons", apc)
    'iSet = "/usr/share/icons/Numix/64"
    ictn = dsk.GNumix(iSet & "/")
    '------------------------------------------------------------------------------
    For Each mnu In Me.Menus
        For Each obj In mnu.Children
            'Agregando item del menu en el menu alternativo
            If obj.Visible = True Then
                Select mnu.Name
                    Case "grpEntities"
                        tob = New ToolButton(pnlEntities) As "entity"
                        z = 48
                    Case "grpTools"
                        tob = New ToolButton(pnlEntities) As "tool"
                        z = 48
                    Case "grpSmart"
                        tob = New ToolButton(pnlSmart) As "tool"
                        z = 48

                    Case "grpFile", "grpHelp"
                        tob = New ToolButton(pnlFile) As "menuapp"
                        z = 32

                    Case "grpOptions"
                        tob = New ToolButton(pnlFile) As "menuapp"
                        z = 32

                    Case "grpView"
                        'tob = New ToolButton(pnlToolsH) As "tool"
                        tob = New ToolButton(pnlFile) As "tool"
                        z = 32
                        'Case "grpHelp"
                        'Skip

                        ' Case Else
                        '     tob = New ToolButton(pnlFile) As "menuapp"
                        '     z = 32
                End Select

                With tob
                    .Name = "tob" & obj.Tag & CStr(i)
                    .Tag = obj.Tag
                    .Tooltip = obj.Text
                    .Enabled = obj.Enabled

                    .W = z
                    .H = z

                    ' If Exist(ictn[obj.Tag]) Then
                    '     If Stat(ictn[obj.Tag]).Type = gb.File Or Stat(ictn[obj.Tag]).Type = gb.Link Then
                    Select mnu.Name
                        Case "grpFile", "grpOptions", "grpHelp" ', "grpView" ', "grpSmart", "grpEntities"
                            If Exist(ictn[obj.Tag]) Then
                                If Stat(ictn[obj.Tag]).Type = gb.File Or Stat(ictn[obj.Tag]).Type = gb.Link Then
                                    tob.Picture = Image.Load(ictn[obj.Tag]).Stretch(z - 8, z - 8).Picture
                                Else
                                    tob.Picture = obj.Picture
                                    .Border = True
                                Endif
                            Else
                                tob.Picture = obj.Picture
                                .Border = True
                            Endif

                        Case "grpSmart", "grpEntities", "grpView", "grpTools"
                            tob.Picture = obj.Picture.Image.Stretch(z - 8, z - 8).Picture
                            .Border = True
                    End Select

                End With

                obj.Picture = obj.Picture.Image.Stretch(22, 22).Picture

            Endif
            Inc i

        Next
    Next

    'For Each ctr In Panel2.Children
    'If Object.Type(ctr) <> "Panel" Then
    btnColors.Reparent(pnlFile)
    btnLtypes.Reparent(pnlFile)
    btnLayers.Reparent(pnlFile)
    'mubColors.Reparent(pnlFile)
    cboLayers.Reparent(pnlFile)
    tobLayers.Reparent(pnlFile)
    'cboStyles.Reparent(pnlFile)
    cboWidths.Reparent(pnlFile)
    cboDimSts.Reparent(pnlFile)
    'Endif
    'Next

    'Loading menu colors
    'LoadColors()
    ' AddColorsPics()

    AddLtypesPics()
    btnLtypes.Picture = Starter.cLtypes["0"][2].Picture
    btnLtypes.Tooltip = Starter.cLtypes["0"][1]

    ' 'LoadLtypes()
    'LoadLocks()

    If CurrentColor = 0 Then
        CurrentColor = 3
    Endif

    r = CInt(Split(Starter.ColorsRGB[CurrentColor], ",")[0])
    g = CInt(Split(Starter.ColorsRGB[CurrentColor], ",")[1])
    b = CInt(Split(Starter.ColorsRGB[CurrentColor], ",")[2])

    imgColor = New Image(btnColors.H - 2, btnColors.H - 2, Color.RGB(r, g, b), 0)
    img = dsk.ImageFrame(imgColor.Stretch(btnColors.W - 4, btnColors.H - 4))

    btnColors.Picture = img.Picture

    btnColors.Tooltip = ("Color") & ": " & CStr(CurrentColor)

    Me.Show()

End

Public Sub LoadColorsOriginalDeTincho()

    Dim hMenu As Menu
    Dim mui As Menu
    Dim cCol As Collection
    Dim ix As Variant[]
    Dim isvg As String

    cCol = Starter.cColors

    mubColors.Menu = "Clx"

    ' Relleno el Menu del MenuButton
    hMenu = New Menu(Me) As "Clx" '' Crea el menu inicial

    For Each ix In cCol
        mui = New Menu(hMenu) As "Clx"
        mui.Text = ix[0]
        mui.Tag = ix[1]
        Select ix[1]
            Case 255, 256, 0
                isvg = "./svg/colors/" & "7" & ".svg"
            Case 1, 2, 3, 4, 5, 6, 7
                isvg = "./svg/colors/" & cCol.Key & ".svg"
        End Select

        If Exist(isvg) Then
            mui.Picture = Image.Load(isvg).Stretch(16, 16).Picture
        Endif

        If cCol.Key = "7" Then
            mubColors.Picture = Image.Load(isvg).Stretch(16, 16).Picture
            mubColors.Tooltip = ix[0]
            mubColors.Text = ix[0]
            'mubColors.Refresh
        Endif

    Next

End

Public Sub LoadColors()

    Dim hMenu As Menu
    Dim mui As Menu
    Dim cCol As Collection
    Dim ix As Variant[]
    Dim isvg As String
    Dim imgColorCircle As Image

    cCol = Starter.cColors

    mubColors.Menu = "Clx"

    ' Relleno el Menu del MenuButton
    hMenu = New Menu(Me) As "Clx" '' Crea el menu inicial

    For Each ix In cCol
        mui = New Menu(hMenu) As "Clx"
        mui.Text = ix[0]
        mui.Tag = ix[1]

        imgColorCircle = New Image(16, 16, mubColors.Background)    ' creo la imagen dinamicamente de tamaño 16x16 , pero puede ser cualquiera

        Paint.Begin(imgColorCircle)                                 ' voy a dibujar sobre la imagen que acabo de crear
        Paint.Arc(8, 8, 7, 0, 2 * Pi)                               ' le agrego un circulo, pero podria ser cualquier forma
        Paint.Brush = Paint.Color(Starter.gColor[Val(cCol.Key)])     ' el color lo saco directamente de la tabla de colores CAD
        Paint.Fill(True)                                            ' relleno
        Paint.Brush = Paint.Color(Color.Black)                      ' opcionalmente le dibujo el contorno que hace mejor contraste con el menubutton
        Paint.Stroke()                                              ' contorno
        Paint.End                                                   ' fin del ciclo Paint sobre esta imagen

        mui.Picture = imgColorCircle.Picture                        ' la inserto en el Button

        If cCol.Key = "7" Then                                      ' si es la 7, la elijo como default
            mubColors.Picture = imgColorCircle.Picture
            mubColors.Tooltip = ix[0]
            mubColors.Text = ix[0]
        Endif

    Next

End

Public Sub Clx_Click()

    Dim obj As Object

    obj = Last

    CurrentColor = obj.Tag
    mubColors.Picture = obj.Picture
    mubColors.Text = obj.Text
    mubColors.Tooltip = obj.Text

    txaDebug.Pos = 0
    txaDebug.Insert(obj.Text & " is the current color\n")

End

Public Sub AddLtypesPics()

    Dim lt As Variant
    Dim dash As Float[]
    Dim img As Image
    Dim hColor As ColorInfo
    'Dim iTheme As Integer

    hColor = Color[Color.ButtonBackground]

    If iTheme <> hColor.Luminance Then
        iTheme = hColor.Luminance

        For Each lt In Starter.cLtypes

            dash = lt[0]

            img = New Image(btnLtypes.Width, 8, btnLtypes.Background)

            Paint.Begin(img)
            Paint.NewPath
            Select dash.Count
                Case 0, 1

                Case Else
                    Paint.Dash = dash

            End Select

            hColor = Color[Color.ButtonBackground]

            If hColor.Luminance > 160 Then
                Paint.Brush = Paint.Color(Color.Black)
            Else
                Paint.Brush = Paint.Color(Color.White)
            Endif

            Paint.LineWidth = 1
            Paint.MoveTo(4, 4)
            Paint.LineTo(btnLtypes.Width - 4, 4)
            Paint.Stroke
            Paint.End

            If Starter.cLtypes[Starter.cLtypes.Key].Count = 3 Then
                Starter.cLtypes[Starter.cLtypes.Key][2] = img
            Else
                Starter.cLtypes[Starter.cLtypes.Key].Add(img)
            Endif

        Next

    Endif

End

Public Sub AddColorsPics()

    Dim lt As Variant
    Dim img As Image

    For Each lt In Starter.cColors

        img = New Image(16, 16, btnLtypes.Background)

        Paint.Begin(img)
        Paint.NewPath

        Select Starter.flgWhiteAndBlack
            Case 0
                Paint.Brush = Paint.Color(Color.Black)
            Case Else
                Paint.Brush = Paint.Color(Color.White)
        End Select

        Paint.Begin(img)
        Paint.Arc(8, 8, 7, 0, 2 * Pi)
        Paint.Brush = Paint.Color(Val(Starter.cColors.Key))
        Paint.Fill(True)
        Paint.Brush = Paint.Color(Color.Black)
        Paint.Stroke()
        Paint.End

        Starter.cColors[Starter.cColors.Key].Add(img)

    Next

End

Public Sub LoadLocks()

    Dim obj As Object

    For Each obj In pnlLocks.Children
        Select Object.Type(obj)
            Case "ToolButton"
                Select obj.Tag
                    Case "grid"
                        obj.Picture = Image.Load("./svg/locks/grid.svg").Stretch(22, 22).Picture

                    Case "debug"
                        obj.Picture = Image.Load("./svg/locks/debug.svg").Stretch(22, 22).Picture

                End Select

        End Select

    Next

End

Public Sub locks_Click()

    Dim obj As Object

    obj = Last

    Select obj.Tag

        Case "off"
            pnlDebug.Visible = False
            pnlProperties.Visible = False

        Case "properties"
            pnlDebug.Visible = False
            pnlProperties.Visible = True

        Case "debug"

            pnlProperties.Visible = False
            pnlDebug.Visible = True

            'If pnlDebug.Visible = False Then
            '    pnlDebug.Visible = True
            '    ToolButton1.Value = True
            'Else
            '    pnlDebug.Visible = False
            '    ToolButton1.Value = False
            'Endif

    End Select

End

' Public Sub Action_Activate(sTask As String) As Boolean
'
'     '     'Dim hFImport As FImport                 '' Impor from others formats
'
'     Dim FileDef As String
'     Dim i As Integer
'     Dim FilePath As String            ''Nombre del archivo que se abrira
'     Dim cModel As New Collection
'     Dim wtag As String
'     Dim w As Window
'     Dim template As Boolean
'     Dim stx As New String[]
'     Dim mdl As New Collection
'     Dim s As String
'     Dim ctn As New Collection
'     Dim hFConfig As FConfig                 '' Edit program configuration
'     Dim cfg As New Collection
'     Dim hFAbout As FAbout                  '' Formulario que muestra informacin del programa
'
'     Select sTask
'         Case "new"
'             FileDef = adi &/ "default.xml"
'             If Exist(FileDef) = False Then
'                 Copy "./def.xml" To FileDef
'             Endif
'
'             For i = 1 To 99
'                 FilePath = User.Home &/ "drawing" & CStr(i) & ".xml"
'                 If ExistWin(FilePath, Workspace1) = False Then
'                     Break
'                 Endif
'             Next
'
'             FileDef = adi &/ "default.xml"
'             If Exist(FileDef) Then
'                 If Exist(FilePath) = False Then
'                     Copy FileDef To FilePath
'                 Endif
'             Endif
'
'             cModel = cad.LoadGaucho(FilePath)
'             LoadComboboxes(cModel.Copy())
'
'             wtag = FilePath
'             If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
'
'                 hFCAD = New FCAD(cModel)
'                 hFCAD.Tag = wtag
'                 hFCAD.Title = File.Name(FilePath)
'                 Workspace1.Add(hFCAD)
'             Else
'                 For Each w In Workspace1.Windows
'                     If w.Tag = wtag Then
'                         Workspace1.ActiveWindow = w
'                         Break
'                     Endif
'                 Next
'             Endif
'
'         Case "open"
'             Dialog.Filter = ["*.xml", "GauchoCAD"]
'             Dialog.OpenFile(False)
'             FilePath = Dialog.Path
'
'             If Exist(FilePath) Then
'                 Select String.LCase(File.Ext(FilePath))
'                     Case "xml"
'                         'cModel = FileLoad(FilePath)
'                         cModel = cad.LoadGaucho(FilePath)
'                         LoadComboboxes(cModel)
'
'                         wtag = FilePath
'                         If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
'                             hFCAD = New FCAD(cModel.Copy())
'                             hFCAD.Tag = wtag
'                             hFCAD.Title = File.Name(FilePath)
'                             Workspace1.Add(hFCAD)
'                         Else
'                             For Each w In Workspace1.Windows
'                                 If w.Tag = wtag Then
'                                     Workspace1.ActiveWindow = w
'                                     Break
'                                 Endif
'                             Next
'                         Endif
'                 End Select
'             Endif
'
'         Case "save"
'             For i = 1 To 99
'                 If File.Name(CurrentFile) = "drawing" & CStr(i) & "." & File.Ext(CurrentFile) Then
'                     template = True
'                     Break
'                 Endif
'             Next
'
'             If template = True Then
'                 Task("saveas")
'             Else
'                 cad.SaveGaucho(CurrentFile, hFCAD.cModel)
'             Endif
'
'         Case "saveas"
'             Dialog.Filter = ["*.xml", "GauchoCAD"]
'             If Dialog.SaveFile() Then Return
'             FilePath = Dialog.Path
'             If File.Ext(FilePath) <> "xml" Then
'                 FilePath = FilePath & ".xml"
'             Endif
'             cad.SaveGaucho(FilePath, hFCAD.cModel)
'         Catch
'             Message.Info(Error.Text)
'
'         Case "import"
'             stx = dsk.FileChooser(User.Home, ["dxf", "dwg"])
'             If stx.count > 0 Then
'                 FilePath = stx[0]
'
'                 Select String.LCase(File.Ext(FilePath))
'                     Case "dxf"
'                         mdl = cad.ImportDxf(FilePath)
'                         If mdl.Count > 0 Then
'                             hFCAD.cImport = mdl
'                         Endif
'
'                     Case "dwg"
'                         Message.Info(("Not implemented yet"))
'                         ' mdl = cad.ImportDwg(FilePath)
'                         ' If mdl.Count > 0 Then
'                         '     hFCAD.cImport = mdl
'                         ' Endif
'                 End Select
'
'             Endif
'
'         Case "export"
'
'         Case "print"
'
'         Case "close"
'
'         Case "quit"
'             Me.Close
'
'         Case "options"
'             wtag = sTask
'             If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
'                 '---------------------------------------------------
'                 s = adi &/ "cfg.xml"
'                 If Exist(File.Dir(s)) = False Then
'                     Mkdir File.Dir(s)
'                 Endif
'                 If Exist(s) = False Then
'                     'ctn = xmg.XmlIni()
'                     ctn = cad.CADConfig()
'                     xmg.XmlConfMaker(s, ctn, Application.Name)
'                 Endif
'                 hFConfig = New FConfig(cex)
'                 hFConfig.Title = ("Configuration")
'                 hFConfig.Tag = wtag
'                 Workspace1.Add(hFConfig)
'                 '---------------------------------------------------
'             Else
'                 For Each w In Workspace1.Windows
'                     If w.Tag = wtag Then
'                         Workspace1.ActiveWindow = w
'                         Break
'                     Endif
'                 Next
'             Endif
'
'         Case "line"
'
'         Case "pline"
'
'         Case "circle"
'
'         Case "arc"
'
'         Case "ellipse"
'
'         Case "solid"
'
'         Case "text"
'
'         Case "mtext"
'
'         Case "block"
'
'         Case "dim"
'
'         Case "leader"
'
'         Case "spline"
'
'         Case "hatch"
'
'         Case "rectangle"
'
'         Case "point"
'
'         Case "move"
'
'         Case "copy"
'
'         Case "Scale"
'
'         Case "rotate"
'
'         Case "mirror"
'
'         Case "trim"
'
'         Case "fillet"
'
'         Case "chamfer"
'
'         Case "array"
'
'         Case "stretch"
'
'         Case "offset"
'
'         Case "divide"
'
'         Case "erase"
'
'         Case "slab4"
'
'         Case "slab3"
'
'         Case "column"
'
'         Case "beam"
'
'         Case "wallcolumn"
'
'         Case "zoomw"
'
'         Case "pan"
'
'         Case "zoome"
'
'         Case "info"
'             wtag = sTask
'             If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
'                 File.Save("/tmp/apppath.txt", Application.Dir)
'                 cfg = sog.ProjInfo(Application.Path & "/.project")
'                 hFAbout = New FAbout(cfg)
'                 hFAbout.Tag = wtag
'                 hFAbout.Title = ("About") & " " & Application.Name
'                 Workspace1.Add(hFAbout)
'             Else
'                 For Each w In Workspace1.Windows
'                     If w.Tag = wtag Then
'                         Workspace1.ActiveWindow = w
'                         Break
'                     Endif
'                 Next
'             Endif
'
'         Case "help"
'             Print "Help"
'
'     End Select
'
' End

Public Sub Form_Open()

    Dim n As Integer
    Dim b As Integer
    Dim x As Integer

    For n = 0 To Screens.Count - 1
        If Screens[n].AvailableWidth > b Then
            b = Screens[n].AvailableWidth
            x = n
        Endif
    Next

    Me.x = Screens[x].AvailableX
    Me.y = Screens[x].AvailableY

    gTask("new")

    Me.Maximized = True

End

Public Sub entity_Click()

    Dim obj As Object

    obj = Last

    If Workspace1.ActiveWindow Then
        txoCom.Text = obj.Tag & "\n"
        'gcd.clsJob.KeyText(String.UCaseFirst(obj.Tag))

    Endif

End

Public Sub tool_Click()

    Dim obj As Object

    obj = Last

    If Workspace1.ActiveWindow Then
        'txoCom.Text = obj.Tag & Key.Enter
        gcd.clsJob.KeyText(String.UCaseFirst(obj.Tag))
    Endif

End

Public Sub menuapp_Click()

    Dim obj As Object

    obj = Last

    gTask(obj.Tag)

End

Public Sub view_Click()

    Dim obj As Object

    obj = Last

    If Workspace1.ActiveWindow Then
        gcd.clsJob.KeyText(String.UCaseFirst(obj.Tag))
    Endif

End

'' This create a collection whith all the drawing information, graphical and no
'' t graphical. The collections made here will be used in each instance of FCAD

' Public Function FileLoad(sFile As String) As Collection
'
'     Dim cMdl As New Collection
'
'     cMdl = cad.LoadGaucho(sFile)
'
'     Return cMdl
'
' End

'' This
Public Sub FileCreate(sTemplate As String)

End

Public Sub LoadComboboxes(cMdl As Collection)

    Dim aLayer As Variant
    Dim aStyle As Variant
    Dim aWidth As Variant
    Dim aDimSt As Variant

    cMod = cMdl

    cboLayers.Clear
    'cboStyles.Clear
    cboWidths.Clear
    cboDimSts.Clear

    If cMdl.Count > 0 Then
        If cMdl.Exist("Layers") Then
            For Each aLayer In cMdl["Layers"]
                cboLayers.Add(aLayer["name"])
            Next
            For Each aLayer In cMdl["Layers"]
                cboLayers.Text = aLayer["name"]
                Break
            Next
        Endif

        ' If cMdl.Exist("Styles") Then
        '     For Each aStyle In cMdl["Styles"]
        '         cboStyles.Add(aStyle["name"])
        '     Next
        '     For Each aStyle In cMdl["Styles"]
        '         cboStyles.Text = aStyle["name"]
        '         Break
        '     Next
        ' Endif

        If cMdl.Exist("Widths") Then
            For Each aWidth In cMdl["Widths"]
                cboWidths.Add(aWidth["value"])
            Next
            For Each aWidth In cMdl["Widths"]
                cboWidths.Text = aWidth["value"]
                Break
            Next
        Endif

        If cMdl.Exist("DimSts") Then
            For Each aDimSt In cMdl["DimSts"]
                cboDimSts.Add(aDimSt["name"])
            Next
            For Each aDimSt In cMdl["DimSts"]
                cboDimSts.Text = aDimSt["name"]
                Break
            Next
        Endif

    Endif

End

Public Sub gTask(sTask As String)

    Dim s As String
    Dim cModel As New Collection
    Dim ctn As New Collection
    Dim cfg As New Collection

    Dim hFConfig As FConfig                 '' Edit program configuration
    Dim hFAbout As FAbout                  '' Formulario que muestra informacin del programa
    'Dim hFImport As FImport                 '' Impor from others formats
    Dim w As Window
    Dim wtag As String

    Dim stx As New String[]
    Dim FilePath As String            ''Nombre del archivo que se abrira
    Dim FileDef As String
    Dim i As Integer
    Dim mdl As New Collection
    Dim template As Boolean

    ' if the drawing is drawingX.xml, drawingX.gcad where X is a integer number then the Ssave is changed to Save As

    Select sTask

        Case "save"
            For i = 1 To 99
                If File.Name(CurrentFile) = "drawing" & CStr(i) & "." & File.Ext(CurrentFile) Then
                    template = True
                    Break
                Endif
            Next

            If template = True Then
                gTask("saveas")
            Else
                cad.SaveGaucho(CurrentFile, hFCAD.cModel)
            Endif

        Case "saveas"

            Dialog.Filter = ["*.xml", "GauchoCAD"]
            If Dialog.SaveFile() Then Return
            FilePath = Dialog.Path
            If File.Ext(FilePath) <> "xml" Then
                FilePath = FilePath & ".xml"
            Endif
            cad.SaveGaucho(FilePath, hFCAD.cModel)
        Catch
            Message.Info(Error.Text)

        Case "export"

            Dialog.Filter = ["*.dxf", "DXF 2007 files"]
            If Dialog.SaveFile() Then Return
            FilePath = Dialog.Path
            If File.Ext(FilePath) <> "xml" Then
                FilePath = FilePath & ".xml"
            Endif
            cadDxf.Start(, 1)

        Case "import"
            stx = dsk.FileChooser(User.Home, ["dxf", "dwg"])
            If stx.count > 0 Then
                FilePath = stx[0]

                Select String.LCase(File.Ext(FilePath))
                    Case "dxf"
                        mdl = cad.ImportDxf(FilePath)
                        If mdl.Count > 0 Then
                            hFCAD.cImport = mdl
                        Endif

                    Case "dwg"
                        Message.Info(("Not implemented yet"))
                        ' mdl = cad.ImportDwg(FilePath)
                        ' If mdl.Count > 0 Then
                        '     hFCAD.cImport = mdl
                        ' Endif
                End Select

            Endif

            'mdl = cad.Import(FilePath)

            'wtag = sTask
            'hFImport = New FImport(cex)
            'hFImport.Tag = wtag
            'hFImport.Title = ("Import")
            'hFImport.Show()

        Case "open"

            Dialog.Filter = ["*.xml", "GauchoCAD"]
            Dialog.OpenFile(False)
            FilePath = Dialog.Path

            If Exist(FilePath) Then
                Select String.LCase(File.Ext(FilePath))
                    Case "xml"
                        'cModel = FileLoad(FilePath)
                        cModel = cad.LoadGaucho(FilePath)
                        LoadComboboxes(cModel)

                        wtag = FilePath
                        If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
                            hFCAD = New FCAD(cModel.Copy())
                            hFCAD.Tag = wtag
                            hFCAD.Title = File.Name(FilePath)
                            Workspace1.Add(hFCAD)
                        Else
                            For Each w In Workspace1.Windows
                                If w.Tag = wtag Then
                                    Workspace1.ActiveWindow = w
                                    Break
                                Endif
                            Next
                        Endif
                End Select
            Endif
        Case "new"

            FileDef = adi &/ "default.xml"
            If Exist(FileDef) = False Then
                Copy "./def.xml" To FileDef
            Endif

            For i = 1 To 99
                FilePath = User.Home &/ "drawing" & CStr(i) & ".xml"
                If ExistWin(FilePath, Workspace1) = False Then
                    Break
                Endif
            Next

            FileDef = adi &/ "default.xml"
            If Exist(FileDef) Then
                If Exist(FilePath) = False Then
                    Copy FileDef To FilePath
                Endif
            Endif

            'cModel = FileLoad(FilePath)
            cModel = cad.LoadGaucho(FilePath)
            LoadComboboxes(cModel.Copy())

            wtag = FilePath
            If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then

                hFCAD = New FCAD(cModel)
                hFCAD.Tag = wtag
                hFCAD.Title = File.Name(FilePath)
                Workspace1.Add(hFCAD)
            Else
                For Each w In Workspace1.Windows
                    If w.Tag = wtag Then
                        Workspace1.ActiveWindow = w
                        Break
                    Endif
                Next
            Endif

        Case "info"
            wtag = sTask
            If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
                File.Save("/tmp/apppath.txt", Application.Dir)
                cfg = sog.ProjInfo(Application.Path & "/.project")
                hFAbout = New FAbout(cfg)
                hFAbout.Tag = wtag
                hFAbout.Title = ("About") & " " & Application.Name
                Workspace1.Add(hFAbout)
            Else
                For Each w In Workspace1.Windows
                    If w.Tag = wtag Then
                        Workspace1.ActiveWindow = w
                        Break
                    Endif
                Next
            Endif

        Case "help"
            Print "Help"

        Case "options"
            wtag = sTask
            If Workspace1.Count = 0 Or ExistWin(wtag, Workspace1) = False Then
                '---------------------------------------------------
                s = adi &/ "cfg.xml"
                If Exist(File.Dir(s)) = False Then
                    Mkdir File.Dir(s)
                Endif
                If Exist(s) = False Then
                    'ctn = xmg.XmlIni()
                    ctn = cad.CADConfig()
                    xmg.XmlConfMaker(s, ctn, Application.Name)
                Endif
                hFConfig = New FConfig(cex)
                hFConfig.Title = ("Configuration")
                hFConfig.Tag = wtag
                Workspace1.Add(hFConfig)
                '---------------------------------------------------
            Else
                For Each w In Workspace1.Windows
                    If w.Tag = wtag Then
                        Workspace1.ActiveWindow = w
                        Break
                    Endif
                Next
            Endif

        Case "quit"
            Me.Close

    End Select

End

'' This vierify if the drawing is already opened

Public Function ExistWin(wtag As String, ws As Workspace) As Boolean

    Dim wExist As Boolean
    Dim w As Window

    wExist = False

    For Each w In ws.Windows
        If w.Tag = wtag Then
            wExist = True
            Break
        Endif
    Next

    Return wExist

End

'' This is very important because switch the cModel collection between drawings

Public Sub Workspace1_Activate()

    Dim aWin As Window

    aWin = Workspace1.ActiveWindow

    If aWin.Name = "FCAD" Then

        hFCAD = aWin
        LoadComboboxes(hFCAD.cModel)

        Print aWin.Tag
        CurrentFile = aWin.Tag

    Endif

End

Public Sub tobLayers_Click()

    Dim FLay As FLayers

    FLay = New FLayers
    'FLay.Run(cMod)                             ' si le cargo la copia no se guardan los cambios,
    FLay.Run(hFCAD.cModel)

End

' Public Sub ColorPalette1_Click()
'
'     CurrentColor = ColorPalette1.Current
'     Print CurrentColor
'
' End

Public Sub dprop_Click()

    Dim obj As Object
    Dim FLay As FLayers

    obj = Last

    Select obj.Tag
        Case "layer"
            CurrentLayer = obj.Text
            Print CurrentLayer
        Case "OpenFormLayer"
            FLay = New FLayers
            FLay.Run(hFCAD.cModel)
    End Select

End

' Public Sub txoCom_KeyRelease()
'
'     Dim sCom As String
'     Dim i As Integer
'     Dim obj As Object
'     Dim enty As Entity
'
'     Dim x As Float
'     Dim y As Float
'
'     Select Key.Code
'         Case Key.Enter, Key.Return, Key.Space
'             sCom = txoCom.Text
'             If Workspace1.ActiveWindow Then
'                 obj = gcd.clsJob
'                 Select Object.Type(obj)
'                     Case "clsEntityBuilder"
'                         enty = obj.elem
'                         txaDebug.Pos = 0
'                         txaDebug.Insert(enty.Gender & " command\n")
'                         Select enty.Gender
'
'                             Case "Line"
'                                 If InStr(sCom, ",") > 0 Then
'
'                                     x = Split(sCom, ",")[0]
'                                     y = Split(sCom, ",")[1]
'
'                                     Select p ' P es una variable global tipo Private
'                                         Case 0
'                                             enty.P[0] = x
'                                             enty.P[1] = y
'                                             p = p + 2
'                                             lblCommand.Text = obj.ParamHelperList[1]
'                                             txoCom.Text = ""
'                                         Case -1
'                                             txoCom.Text = ""
'                                             lblCommand.Text = "Command"
'
'                                         Case Else
'
'                                             enty.P[0 + p] = x
'                                             enty.P[1 + p] = y
'                                             enty.Finished = True
'                                             'p = -1
'                                             txoCom.Text = ""
'
'                                     End Select
'
'                                 Endif
'
'                         End Select
'                     Case Else
'                         If sCom <> "" Then
'                             If Starter.cCommands.Exist(sCom) Then
'                                 HistoCom.Push(sCom)
'                                 Print sCom
'                                 If Workspace1.ActiveWindow Then
'                                     gcd.clsJob.KeyText(sCom)
'
'                                     obj = gcd.clsJob
'                                     Select Object.Type(obj)
'                                         Case "clsEntityBuilder"
'                                             txoCom.Text = ""
'                                             lblCommand.Text = obj.ParamHelperList[0]
'
'                                         Case Else
'                                             p = 0
'                                     End Select
'                                 Endif
'                             Endif
'                         Endif
'                 End Select
'             Endif
'     End Select
'
' End
Public Sub txoCom_Change()

    Dim sCom As String
    Dim i As Integer
    Dim obj As Object
    Dim enty As Entity

    Dim x As Float
    Dim y As Float

    If String.Len(txoCom.Text) > 0 Then
        Select String.Right(txoCom.Text)
            Case " ", "\n"
                'Select Key.Code
                'Case Key.Enter, Key.Return, Key.Space
                sCom = String.Mid(txoCom.Text, 1, String.Len(txoCom.Text) - 1)
                If Workspace1.ActiveWindow Then
                    obj = gcd.clsJob
                    Select Object.Type(obj)
                        Case "clsEntityBuilder"
                            'KillJob()
                            enty = obj.elem
                            ' txaDebug.Pos = 0
                            ' txaDebug.Insert(enty.Gender & " command\n")
                            ' txaDebug.Refresh
                            Select enty.Gender

                                Case "Line"
                                    If InStr(sCom, ",") > 0 Then

                                        x = Split(sCom, ",")[0]
                                        y = Split(sCom, ",")[1]

                                        Select p ' P es una variable global tipo Private
                                            Case 0
                                                enty.P[0] = x
                                                enty.P[1] = y
                                                p = p + 2
                                                lblCommand.Text = obj.ParamHelperList[1]
                                                txoCom.Text = ""
                                            Case -1
                                                txoCom.Text = ""
                                                lblCommand.Text = "Command"

                                            Case Else

                                                enty.P[0 + p] = x
                                                enty.P[1 + p] = y
                                                enty.Finished = True
                                                'p = -1
                                                txoCom.Text = ""

                                        End Select

                                    Endif

                            End Select
                        Case Else
                            If sCom <> "" Then
                                If Starter.cCommands.Exist(sCom) Then
                                    HistoCom.Push(sCom)

                                    Print sCom
                                    If Workspace1.ActiveWindow Then
                                        'KillJob()
                                        gcd.clsJob.KeyText(sCom)

                                        obj = gcd.clsJob
                                        Select Object.Type(obj)
                                            Case "clsEntityBuilder"
                                                enty = obj.elem

                                                txaDebug.Pos = 0
                                                txaDebug.Insert(enty.Gender & " command\n")
                                                txaDebug.Refresh
                                                txoCom.Text = ""
                                                lblCommand.Text = obj.ParamHelperList[0]

                                            Case Else
                                                p = 0
                                        End Select
                                    Endif
                                Endif
                            Endif
                    End Select
                Endif
        End Select
    Endif

End

Public Sub KillJob() ' no funciona bien
    ''TODO: Mejorar esta sub o hacer una nueva para CANCELAR el comando actual

    gcd.clsJob.Finish()
    gcd.clsJobPrevious = gcd.clsJob
    gcd.clsJob = clsDefaultJob
    'redraw
    'Return

End

Public Sub btnLtypes_MouseDown()

    Dim lst As FLtypes
    Dim lty As New Collection
    Dim vrx As Variant[]
    Dim img2 As Image

    lst = New FLtypes(Starter.cLtypes, [btnLtypes.ScreenX, btnLtypes.ScreenY + btnLtypes.H])

    Print btnLtypes.Value

    If SelectedLtype = False Then
        lst.Run()
        Do
            If SelectedLtype = True Then
                vrx = Starter.cLtypes[CStr(CurrentLtype)]
                If vrx.Count > 2 Then
                    If Object.Type(vrx[2]) = "Image" Then
                        img2 = vrx[2]
                        btnLtypes.Picture = img2.Picture
                        btnLtypes.Tooltip = vrx[1]
                        'SelectedLineType = False
                    Endif
                Endif
                SelectedLtype = False
                Break
            Else
                Wait 0.1
            Endif
        Loop
    Endif

End

Public Sub btnColors_MouseDown()

    Dim r As Integer
    Dim g As Integer
    Dim b As Integer
    Dim img As Image

    FColors.ShowModal()

    r = CInt(Split(Starter.ColorsRGB[CurrentColor], ",")[0])
    g = CInt(Split(Starter.ColorsRGB[CurrentColor], ",")[1])
    b = CInt(Split(Starter.ColorsRGB[CurrentColor], ",")[2])

    imgColor = New Image(btnColors.H - 2, btnColors.H - 2, Color.RGB(r, g, b), 0)

    img = dsk.ImageFrame(imgColor)

    btnColors.Picture = img.Picture
    Select CurrentColor
        Case 256
            btnColors.Tooltip = ("Color") & ": " & "ByBlock"
        Case 257
            btnColors.Tooltip = ("Color") & ": " & "ByLayer"
        Case Else
            btnColors.Tooltip = ("Color") & ": " & CStr(CurrentColor)
    End Select

End

Public Sub btnLayers_MouseDown()

    Dim FLay As FLayers1

    FLay = New FLayers1([Workspace1.ScreenX, Workspace1.ScreenY])

    FLay.Border = False

    FLay.Run(hFCAD.cModel)

End

Public Sub Button1_Click()
    ''TODO: Poner esta accion en otro evento, por ejemplo despues de seleccionar entidades.

    Dim e As Entity
    Dim etype As New String[]
    Dim i As Integer
    Dim j As Integer
    'Dim inx As New Integer[]

    ComboBox1.Clear
    ComboBox1.Text = ""
    cProp.Clear
    TableView1.Clear

    For i = 0 To APPMain.hFCAD.arrEntities.Max
        e = APPMain.hFCAD.arrEntities[i]

        If e.Selected Then
            'inx.Add(i)
            If etype.Exist(e.Gender) = False Then
                etype.Add(e.Gender)
            Endif
        Endif
    Next

    Select etype.Count
        Case 0
            'Aca se puede poner en off el panel de seleccion ya que no hay entidades seleccionadas
            'skip

        Case 1
            ComboBox1.Add(etype[0])
            ComboBox1.Text = etype[0]
            LoadPropertiesList(etype[0])
        Case Else
            ComboBox1.Add(("All"))
            For j = 0 To etype.Max
                ComboBox1.Add(etype[j])
            Next
            ComboBox1.Text = ("All")
            LoadPropertiesList("varies")
    End Select

End

Public Sub ComboBox1_Click()

    'Print ComboBox1.Text
    LoadPropertiesList(ComboBox1.Text)

End

Public Sub LoadPropertiesList(eFilter As String)

    Dim e As Entity
    Dim i As Integer

    cProp.Clear
    TableView1.Clear

    For i = 0 To APPMain.hFCAD.arrEntities.Max
        e = APPMain.hFCAD.arrEntities[i]

        If e.Selected Then

            ' Layers
            If cProp.Exist("Layer") = False Then
                cProp.Add([e.Layer], "Layer")
            Else
                If cProp["Layer"].Exist(e.Layer) = False Then
                    cProp["Layer"].Add(e.Layer)
                Endif
            Endif

            'Colors
            If cProp.Exist("Color") = False Then
                cProp.Add([e.colour], "Color")
            Else
                If cProp["Color"].Exist(e.colour) = False Then
                    cProp["Color"].Add(e.colour)
                Endif
            Endif

        Endif
    Next

    TableView1.Columns.Count = 2
    TableView1.Rows.Count = 0
    TableView1.Rows.Count = cProp.Count

End

Public Sub TableView1_Data(Row As Integer, Column As Integer)

    Dim prop As Variant
    Dim i As Integer

    For Each prop In cProp
        If i = Row Then
            Select Column
                Case 0
                    TableView1[Row, Column].Text = cProp.Key
                Case 1
                    Select Object.Type(prop)
                        Case "String[]"
                            Select prop.count
                                Case 0
                                    'TableView1[Row, Column].Text = 0
                                Case 1
                                    TableView1[Row, Column].Text = prop[0]

                                Case Else
                                    TableView1[Row, Column].Text = "*" & ("varies") & "*"

                            End Select

                    End Select

            End Select

        Endif

        Inc i
    Next

End

Public Sub TableView1_Click()

    Dim lrx As New String[]         ''Layers list
    Dim lay As Variant

    For Each lay In APPMain.hFCAD.cModel["Layers"]
        lrx.Add(lay["name"])
    Next

    lrx.Add("*" & ("varies") & "*")

    Select TableView1[TableView1.Row, 0].Text
        Case "Layer"
            TableView1.Edit(lrx, True)
    End Select

End

Public Sub TableView1_Save(Row As Integer, Column As Integer, Value As String)

    TableView1[Row, Column].Text = Value

    Select TableView1[Row, 0].Text
        Case "Layer"
            TableView1[Row, Column].Text = Value

        Case "Color"

        Case "Style"

    End Select

End

Public Sub Form_KeyPress()

    Print Key.Code

    If Workspace1.ActiveWindow Then
        Select Key.Code
            Case Key.Del
                gcd.clsJob.KeyText("Erase")

        End Select

    Endif

End

Public Sub btnColors_Click()

End
