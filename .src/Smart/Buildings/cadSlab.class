' Gambas class file

' GauchoCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' Represents a concrete slab
' Element maintained by Terco
' V3
Inherits BIMEntityBase
Public Const Gender As String = "Slab"
Public Const DrawingOrder As Integer = 1        ' 1 = draws first
Public Const PointsToDraw As Integer = 1             ' minimal point requered for drawing something usefull
Public Const OrthogonalIgnored As Boolean = True
Public Const HelperTrabajo As String = ("Insert a slab")
Public Const ParamType As String = "PPF"                             ' that is Point, Point, Float; could be Color Text, etc
Public Const ParamHelper As String = "Start point;End point;Thickness"      ' a little text that is shown at the prompt waiting for user input during build
Public Const ParamDefault As String = " ;  ; 0.08 "

' ESTRU3D
'  + ----------------->X
'  |  P0            P2
'  |  c1------------c2
'  |  |             |        Convencion para la definicion
'  |  |             |        de las losas
'  |  c3------------c4
'  |  P3            P1
'  v Z

Public Sub Draw()                   ' try to make this as fast as possible
  ' FIXME: eliminar variables o argumentos que no se usan
  ' FIXME: requiere reparacion -> OpenGL

  Return
  Dim l As Float, angulo As Float

  If Not Me.DrawAble Or Not Me.Visible Then Return

  paint.LineWidth = 1 / gcd.CurrentDrawing.ScaleZoom

  paint.Rectangle(Me.p[0], Me.p[1], Me.p[2] - Me.p[0], Me.p[3] - Me.p[1])
  ' veo si esta seleccionada
  If Me.selected And gcd.DrawMarcados Then
    paint.brush = Paint.Color(&HA0A063)
  Else
    paint.brush = Paint.Color(&HEBEBEB)
  Endif
  paint.Fill(True)

  paint.brush = Paint.Color(Color.Black)
  paint.Stroke

  If (Abs(Me.p[2] - Me.p[0]) >= 1 And Abs(Me.p[3] - Me.p[1]) >= 1) And Me.Finished Then
    paint.brush = Paint.Color(Color.Black)
    paint.Arc(Me.p[0] + (Me.p[2] - Me.p[0]) / 2, Me.p[1] + (Me.p[3] - Me.p[1]) / 2, 0.4)

    paint.Stroke
  End If

End

' This function will return False if the element couldn't be created for some reason: bad or incomple user input
' True means all is good, False will instruct the clsEntityBuilder to delete it
Public Sub Finish(ParamsDone As Integer) As Boolean

  Me.CreatePolygon
  Me.ForDeletion = False
  Me.DrawAble = True
  Me.Selected = False
  Me.Finished = True

  If Me.p[0] = Me.p[2] Or Me.p[1] = Me.p[3] Then ' this is a line , not a square

    Me.ForDeletion = True ' queda marcado para eliminarse
    Me.DrawAble = False

  End If

End

Public Sub CreatePolygon()

  ' this is entity specific

  ' we need 4 points for this

  '        me.p[0],me.p[1] 1+------------+2
  '                   |            |
  '                   |            |
  '                   |            |
  '                   |            |
  '                   |            |
  '                  3+------------+4
  '                                 me.p[2],me.p[3]
  '
  Me.Polygon.Clear
  Me.Polygon.Insert([Me.p[0], Me.p[1], Me.p[2], Me.p[1], Me.p[2], Me.p[3], Me.p[0], Me.p[3]])

End
