' Gambas module file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

' El mundo segun OpenGL
'       +-------------------------------------------------------------------------------------------+
'       | 0,0                                     |top         x  P2 x,y                            |
'       |                                         |           /                                     |
'       |                                         |          /                                      |
'       |                                         |         /                                       |
'       |                                         |        /                                        |
'       |                                         |       x P1 x,y                                  |
'       |left                                     |                                           rigth | = glOrtho(left, rigth, bottom, top)
'       |-----------------------------------------+-------------------------------------------------|   el papel donde voy a dibujar
'       |                xxxxxxxxxxx              |0,0                                              |   = metros o lo que sea
'       |                xxxxxxxxxxx              |                                                 |   Establece la ProjectionMatrix
'       |                xxxx0,0xxxx              |                                                 |   y no se la toca mas
'       |                xxxxxxxxxxx              |                                                 |
'       |                xxxxxxxxxxx              |                                                 |
'       |                                         |                                                 |
'       |                     |<------------------|                                                 |
'       |             ModelMatrix>Translate       |                                                 |
'       |                                         |bottom                                           |gldrwArea.w,.h = Gl.Viewport = el area donde dibujo
'       +-------------------------------------------------------------------------------------------+           = pixeles
'Fast Unsafe
' una lbreria de funciones para pasar de Paint a OpenGL
Public Initialized As Boolean = False
Public ActualFont As LFFFonts                      ' the class
Public UnicodeFont As LFFFonts
Public ActualFontName As String = "romanc"          ' the name
Public ActualFontHeigth As Float = 1                ' the letter heigth
Public FontScale As Float = 0.1                     ' the general scale factor

Public FontsNameList As String[]            ' lista de fuentes LFF disponibles ya cargadas

Public FontsCAllLists As Integer[]          ' listas de listas de caracteres

Public glFont As New LFFFonts[]

Public Struct textureSt
  FileName As String
  TextureName As String
  handle As Integer
  hImage As Image
End Struct

Public glTextures As New TextureSt[]

Public Struct GLColorSt

  r As Float
  g As Float
  b As Float
  Alpha As Float

End Struct
' A shader is a small C program that the GPU understands
' minimal shaders we need to compile at the GPU

Public shaVertexShaderSource As String
Public shaFragmentShaderSource As String

Public shaVert1 As Integer              '  main vertex shader
Public shaFrag1 As Integer              '  main fragment shader
Public shaderProgram As Integer       '  el programa que corre en la GPU

Public escalaGL As Float

Public ViewportWidth As Integer
Public ViewportHeight As Integer

Public hText As New Integer[]

' new OpenGL stuff
Public GLDrwList As New Integer[]                       ' all entities, each one
Public GLDrwListEditing As New Integer[]                ' all entities on edit by some tool, including new ones

' lineas de puntos
Public LineStipples As New Integer[]
Public LineStippleScales As New Integer[]

' modo inmediato o programado
Public InmediateMode As Boolean = True
Public InmediateModeRequired As Boolean
Public VBO_present As Boolean = False   ' si tenemos VBO que dibujar

' VBO
Public VBO_lines As New Single[]
Public VBO_vertex As New Single[]
Public VBO_colors As New Single[]
Public VBO_normals As New Single[]
Public VBO_pixels As New Single[]

'' Clears the VBO from memory
Public Sub VBOFlush()

  VBO_vertex.Clear
  VBO_colors.Clear
  VBO_normals.Clear
  VBO_pixels.Clear

  VBO_vertex = New Single[]
  VBO_colors.Clear
  VBO_normals.Clear
  VBO_pixels.Clear

End

Public Sub Resize(drwContext As Object) ' only glArea for now

  ' establecemos adonde vamos a dibujar, porque puede ser en algun lugar mas chico de la misma glDrawingArea
  ' pero en general sera en todo el control
  gl.Viewport(0, 0, drwContext.W, drwContext.h)

  If Not Me.Initialized Then Me.Init(drwContext)
  Me.Initialized = True
  ' le avisamos a GL que queremos usar texturas
  gl.Enable(gl.TEXTURE_2D)

  ' borramos lo que haya dibujado
  gl.Clear(gl.DEPTH_BUFFER_BIT Or gl.COLOR_BUFFER_BIT)

  ' le decimos que queremos usar cosas 3D y lo que esta mas lejos quede tapado por lo que esta mas cerca, esto en 2D no es necesario
  gl.Enable(gl.DEPTH_TEST)

  ' no tengo idea, debe ser algo de AntiAlias
  gl.Enable(gl.SMOOTH)
  gl.Enable(gl.BLEND)
  gl.BlendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA)
  ' usaremos luces
  ' Gl.Enable(Gl.LIGHTING)
  ' Gl.Enable(Gl.LIGHT0)
  ' esto le dice que las normales las tiene que normalizar a 1
  Gl.Enable(Gl.NORMALIZE)

  ' las coordenadas que le pasemos deberan estar entre -1 y 1
  ' todo lo que sea > 1 NO SE MOSTRARA

  gl.MatrixMode(gl.PROJECTION)
  gl.LoadIdentity
  'Glu.Ortho2D(-drwContext.w / 2, drwContext.w / 2, -drwContext.h / 2, drwContext.h / 2)
  Gl.Ortho(-drwContext.w / 2, drwContext.w / 2, -drwContext.h / 2, drwContext.h / 2, 1, -1)

  gl.MatrixMode(gl.MODELVIEW)
  gl.LoadIdentity

End

Public Sub Init(drwContext As Object) ' only glArea for now

  Dim sExt As String
  Dim bREt As Boolean

  'Resize(drwContext)
  gcd.debuginfo("Init OpenGL",,, True)

  Dim gbcolor As Integer
  Dim r, g, b, a As Float

  gbcolor = drwContext.background

  a = 1 - Color.GetAlpha(gbColor) / 255
  r = (Shr(gbColor, 16) And 255) / 255
  g = (Shr(gbColor, 8) And 255) / 255
  b = (gbColor And 255) / 255

  gl.ClearColor(r, g, b, a)

  ' line stipples

  ' continuo
  LineStipples.Add(&X00000000000000001111111111111111)
  LineStippleScales.Add(1)

  ' Dashed
  LineStipples.Add(&X00000000000000000000111100001111)
  LineStippleScales.Add(1)

  ' Dash-Dot
  LineStipples.Add(&X00000000000000000001100011111111)
  LineStippleScales.Add(1)

  ' Dot
  LineStipples.Add(&X00000000000000000001000100010001)
  LineStippleScales.Add(1)

  ' Divide
  LineStipples.Add(&X00000000000000000011001100111111)
  LineStippleScales.Add(1)
  gcd.debuginfo("Support VBO: " & gl.CheckExtensions("GL_ARB_vertex_buffer_object"),,, True)
  gcd.debuginfo("Support GLSL: " & gl.CheckExtensions("GL_ARB_vertex_program"),,, True)
  gcd.debuginfo("Shading version: " & GL.GetString(gl.SHADING_LANGUAGE_VERSION),,, True)
  gcd.debuginfo("GL version: " & GL.GetString(gl.VERSION),,, True)
  gcd.debuginfo("Chipset vendor: " & GL.GetString(gl.VENDOR),,, True)
  'gcd.debuginfo("Extensions" &  GL.GetString(gl.EXTENSIONS))

  ' lets make shaders
  'Me.shaderProgram = Me.LoadShader("VertexShader1.txt", "FragmentShader1.txt")
  ' gcd.debuginfo("Shader loading result:", gl.GetShaderInfoLog(Me.shaderProgram)

End

'' Dibuja un rectangulo, relleno o vacio.
'' Puede dibujar un contorno del mismo de otro color->Bounding
'' Mode: 0=relleno, 1=relleno y recuadro, 2=solo recuadro
Public Sub Rectangle2D(x1 As Float, y1 As Float, w As Float, h As Float, Optional colour1 As Integer = Color.Blue, colour2 As Integer = -14, colour3 As Integer = -14, colour4 As Integer = -14, BoundingColor As Integer, BoundingWidth As Integer = 1, Dashes As Integer = 0, mode As Integer = 0)

  Dim c2, c3, c4 As Integer

  ' Quad esta obsoleto , reemplazo por dos triangulos
  If mode = 0 Or mode = 1 Then

    If colour2 = -14 Then c2 = colour1 Else c2 = colour2
    If colour3 = -14 Then c3 = colour1 Else c3 = colour3
    If colour4 = -14 Then c4 = colour1 Else c4 = colour4

    gl.begin(gl.TRIANGLES)

    Vertex2D(x1, y1, colour1)
    Vertex2D(x1 + w, y1, c2)
    Vertex2D(x1 + w, y1 + h, c3)

    gl.End

    gl.begin(gl.TRIANGLEs)

    Vertex2D(x1, y1, colour1)
    Vertex2D(x1 + w, y1 + h, c4)
    Vertex2D(x1, y1 + h, c3)

    gl.end

  End If

  If mode >= 1 Then                                      ' solo recuadro

    gl.LineWidth(BoundingWidth)

    If dashes > 0 Then
      gl.LineStipple(LineStippleScales[dashes], LineStipples[dashes])
      gl.Enable(GL.LINE_STIPPLE)
    Else

      gl.Disable(GL.LINE_STIPPLE)

    Endif
    gl.Begin(gl.LINE_LOOP)

    Vertex2D(x1, y1, BoundingColor)
    Vertex2D(x1 + w, y1, BoundingColor)
    Vertex2D(x1 + w, y1 + h, BoundingColor)
    Vertex2D(x1, y1 + h, BoundingColor)

    gl.End
    If dashes > 0 Then gl.Disable(GL.LINE_STIPPLE)

  End If

End

'' Dibuja un serie de lineas
Public Function Lines(vertices As Float[], Optional colour As Integer = 0, LineWidth As Float = 1, dashes As Integer = 0)

  Dim i As Integer
  Dim r As Float, g As Float, b As Float

  'If gbcolor > 0 Then Stop
  r = (Shr(Colour, 16) And 255) / 256
  g = (Shr(Colour, 8) And 255) / 256
  b = (Colour And 255) / 256

  If InmediateMode Then
    'glColorRGB(colour)
    gl.LineWidth(LineWidth) ' obsoleto en WebGL
    If dashes > 0 Then
      gl.LineStipple(LineStippleScales[dashes], LineStipples[dashes])
      gl.Enable(GL.LINE_STIPPLE)
    Else

      gl.Disable(GL.LINE_STIPPLE)

    Endif

    gl.Begin(gl.Lines)

    For i = 0 To vertices.Max Step 2
      glColorRGB(colour)
      gl.Vertex2f(vertices[i], vertices[i + 1])

    Next
    gl.end

    If dashes > 0 Then gl.Disable(GL.LINE_STIPPLE)
  Else ' we as writing to an array
    For i = 0 To vertices.Max Step 2
      VBO_vertex.Add(vertices[i])         'X
      VBO_vertex.Add(vertices[i + 1])     'Y
      VBO_vertex.Add(0)                   'Z

      VBO_colors.Add(r)                    'R
      VBO_colors.Add(g)                    'G
      VBO_colors.Add(b)                    'B

      VBO_normals.Add(0)                    'Normales apuntan al user
      VBO_normals.Add(0)                    '
      VBO_normals.Add(1)                    '

    Next

  End If

End

'' Dibuja un seria de polilinea
Fast Unsafe Public Function PolygonFilled(vertices As Float[], Optional colour As Integer = 0, FillColor As Integer = 0, LineWidth As Float = 1, dashes As Integer)

  Dim i As Integer

  'glColorRGB(colour)
  gl.LineWidth(LineWidth) ' obsoleto en WebGL

  If dashes > 0 Then
    gl.LineStipple(LineStippleScales[dashes], LineStipples[dashes])
    gl.Enable(GL.LINE_STIPPLE)
  Else

    gl.Disable(GL.LINE_STIPPLE)

  Endif

  gl.Begin(gl.POLYGON)

  For i = 0 To vertices.Max Step 2
    glColorRGB(colour)
    gl.Vertex2f(vertices[i], vertices[i + 1])

  Next
  gl.end

End

'' Dibuja un seria de polilinea
Fast Unsafe Public Function Polygon(vertices As Float[], Optional colour As Integer = 0, LineWidth As Float = 1, dashes As Integer)

  Dim i As Integer

  'glColorRGB(colour)
  gl.LineWidth(LineWidth) ' obsoleto en WebGL
  If dashes > 0 Then
    gl.LineStipple(LineStippleScales[dashes], LineStipples[dashes])
    gl.Enable(GL.LINE_STIPPLE)
  Else

    gl.Disable(GL.LINE_STIPPLE)

  Endif

  gl.Begin(gl.LINE_LOOP)

  For i = 0 To vertices.Max Step 2
    glColorRGB(colour)
    gl.Vertex2f(vertices[i], vertices[i + 1])

  Next
  gl.end

  If dashes > 0 Then gl.Disable(GL.LINE_STIPPLE)

End
'' Dibuja un arco, suponiendo que el centro esta en 0,0 (despues de un Translate())
'' Siempre gira en sentido anti-horario
'' Las medidas de los angulo inicial y recorrido estan en RADIANES

Fast Unsafe Public Function Arc(Optional radio As Float, start_angle As Float, length As Float, colour As Integer = 0, LineWidth As Float = 1, dashes As Integer)

  GL.Begin(gl.LINE_STRIP)
  Dim theta, angle_increment As Float

  'double max_angle = 2 * Math.PI
  'double angle_increment = Math.PI / 1000
  angle_increment = Pi * 2 / 360

  ' verifico los angulos
  ' If length < 0 Then angle_increment *= -1

  For theta = 0 To length Step angle_increment

    Vertex2D(radio * Cos(start_angle + theta), radio * Sin(start_angle + theta), colour)
  Next

  GL.End

End

Public Sub Arrow(fBase As Float[], fPunta As Float[], Optional colour As Integer = 0, LineWidth As Float = 1, Style As Integer = 0, ArrowSize As Integer = 0)

  ' Style: 0 = Simple lines, 1 = ...to do
  ' ArrowSize: 0 = 20% of length, other = length of angled lines

  Dim i As Integer

  'glColorRGB(colour)
  gl.LineWidth(LineWidth) ' obsoleto en WebGL

  gl.Begin(gl.LINE_STRIP)

  ' Select vertices.Count
  '     Case 2
  '
  '         For i = 0 To 1 ' Step 2
  '             glColorRGB(colour)
  '             gl.Vertex2f(vertices[i], vertices[i + 1])
  '
  '         Next
  '     Case 3
  '         For i = 0 To 2 'Step 2
  '             glColorRGB(colour)
  '             gl.Vertex2f(vertices[i], vertices[i + 1])
  '         Next
  '
  '     Case Else
  '
  '         gcd.debuginfo("Error mas puntos"
  '
  ' End Select
  ' '
  ' For i = 0 To vertices.Max Step 2
  '   glColorRGB(colour)
  '   gl.Vertex2f(vertices[i], vertices[i + 1])
  ' Next
  '
  ' If iClosed Then
  '   gl.Vertex2f(vertices[0], vertices[1])
  ' End If
  '
  ' gl.end
  ' If dashes > 0 Then gl.Disable(GL.LINE_STIPPLE)

End
'' Dibuja un seria de polilinea

Fast Unsafe Public Function PolyLines(vertices As Float[], Optional colour As Integer = 0, LineWidth As Float = 1, dashes As Integer, Optional iClosed As Boolean = False)

  Dim i As Integer

  'glColorRGB(colour)
  gl.LineWidth(LineWidth) ' obsoleto en WebGL
  If dashes > 0 Then
    gl.LineStipple(LineStippleScales[dashes], LineStipples[dashes])
    gl.Enable(GL.LINE_STIPPLE)
  Else

    gl.Disable(GL.LINE_STIPPLE)

  Endif

  gl.Begin(gl.LINE_STRIP)

  ' Select vertices.Count
  '     Case 2
  '
  '         For i = 0 To 1 ' Step 2
  '             glColorRGB(colour)
  '             gl.Vertex2f(vertices[i], vertices[i + 1])
  '
  '         Next
  '     Case 3
  '         For i = 0 To 2 'Step 2
  '             glColorRGB(colour)
  '             gl.Vertex2f(vertices[i], vertices[i + 1])
  '         Next
  '
  '     Case Else
  '
  '         gcd.debuginfo("Error mas puntos"
  '
  ' End Select
  '
  For i = 0 To vertices.Max Step 2
    glColorRGB(colour)
    gl.Vertex2f(vertices[i], vertices[i + 1])
  Next

  If iClosed Then
    gl.Vertex2f(vertices[0], vertices[1])
  End If

  gl.end
  If dashes > 0 Then gl.Disable(GL.LINE_STIPPLE)

End

Fast Unsafe Public Function Triangles(vertices As Float[], Optional colour As Integer = 0, FillColor As Integer = 0, LineWidth As Float = 1, dashes As Integer)

  Dim i As Integer

  'glColorRGB(colour)
  gl.LineWidth(LineWidth) ' obsoleto en WebGL

  If dashes > 0 Then
    gl.LineStipple(LineStippleScales[dashes], LineStipples[dashes])
    gl.Enable(GL.LINE_STIPPLE)
  Else

    gl.Disable(GL.LINE_STIPPLE)

  Endif

  gl.Begin(gl.TRIANGLES)

  For i = 0 To vertices.Max Step 2
    glColorRGB(colour)
    gl.Vertex2f(vertices[i], vertices[i + 1])

  Next
  gl.end

End

'' Dibuja un circulo

Fast Unsafe Public Function Circle(center As Float[], radious As Float, Optional colour As Integer = 0, Filled As Boolean = False, LineWidth As Float = 1, dashes As Integer = 0)

  Dim x, y, theta, angle_increment As Float

  gl.LineWidth(LineWidth) ' obsoleto en WebGL
  If dashes > 0 Then
    gl.LineStipple(LineStippleScales[dashes], LineStipples[dashes])
    gl.Enable(GL.LINE_STIPPLE)
  Else

    gl.Disable(GL.LINE_STIPPLE)

  Endif

  If filled Then
    GL.Begin(gl.POLYGON)
  Else
    GL.Begin(gl.LINE_STRIP)
  End If

  angle_increment = Pi * 2 / 360
  For theta = 0 To 2 * Pi Step angle_increment
    ' el punto considerando 0,0 al centro
    x = center[0] + radious * Cos(theta)
    y = center[1] + radious * Sin(theta)
    Vertex2D(x, y, Colour)
  Next
  gl.End
  If dashes > 0 Then gl.Disable(GL.LINE_STIPPLE)

End

Fast Unsafe Public Sub glColorRGB(gbColor As Integer)
  ' set the color to GL

  Dim r, g, b, a As Float

  a = 1 - Color.GetAlpha(gbColor) / 255
  r = (Shr(gbColor, 16) And 255) / 255
  g = (Shr(gbColor, 8) And 255) / 255
  b = (gbColor And 255) / 255
  gl.Color4f(r, g, b, a)

End

Public Sub glMaterial(gbColor As Integer, Optional Alpha As Float = 0)
  ' set the color to GL

  Dim r As Float, g As Float, b As Float
  Dim MyColor As New Float[]

  'If gbcolor > 0 Then Stop
  r = (Shr(gbColor, 16) And 255) / 256
  g = (Shr(gbColor, 8) And 255) / 256
  b = (gbColor And 255) / 256
  MyColor = [r, g, b, Alpha]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.AMBIENT_AND_DIFFUSE, MyColor)
  gl.Materialf(gl.FRONT_AND_BACK, gl.SHININESS, 45)

End

Public Sub glMaterialHierro(Optional Alpha As Float = 0)
  ' set the color to GL

  Dim r As Float, g As Float, b As Float
  Dim MyColor As New Float[]

  MyColor = [0.05375, 0.05, 0.06625, 1.0]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.AMBIENT, MyColor)

  MyColor = [0.18275, 0.17, 0.22525]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.DIFFUSE, MyColor)

  MyColor = [0.332741, 0.328634, 0.346435]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.SPECULAR, MyColor)

  gl.Materialf(gl.FRONT_AND_BACK, gl.SHININESS, 0.3 * 128)

End

Public Sub glMaterialMadera(Optional Alpha As Float = 0)
  ' set the color to GL

  Dim r As Float, g As Float, b As Float
  Dim MyColor As New Float[]

  MyColor = [0.05, 0.05, 0.0, 1.0]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.AMBIENT, MyColor)

  MyColor = [0.5, 0.5, 0.4]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.DIFFUSE, MyColor)

  MyColor = [0.7, 0.7, 0.04]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.SPECULAR, MyColor)

  gl.Materialf(gl.FRONT_AND_BACK, gl.SHININESS, 0.07815 * 128)

End

Public Sub glMaterialConcreto(Optional Alpha As Float = 0)
  ' set the color to GL

  Dim r As Float, g As Float, b As Float
  Dim MyColor As New Float[]

  MyColor = [0.2, 0.2, 0.2, 1.0]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.AMBIENT, MyColor)

  MyColor = [0.4, 0.4, 0.4]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.DIFFUSE, MyColor)

  MyColor = [0.6, 0.6, 0.6]

  gl.Materialfv(gl.FRONT_AND_BACK, gl.SPECULAR, MyColor)

  gl.Materialf(gl.FRONT_AND_BACK, gl.SHININESS, 0.25 * 128)

End

Public Sub DibujarCargaPuntual3(punta As Punto3d, cola As Punto3d, colorflecha As Integer)

  ' esto podria llamarse dibujarFlecha

  Dim lw As Float, co As Integer, cola2 As New Punto3d

  ' linea pricipal

  ' 2020
  ' debido a limitaciones en WebGL voy a redibujar esto como una flecha hecha de lineas del mismo ancho

  ' la linea principal
  ' linea(cola, punta, colorflecha, 1)
  '
  ' lw = ((cola.x - punta.x) * 0.1 + (cola.y - punta.y) * 0.1 + (cola.z - punta.z) * 0.1) / 6
  '
  ' cola.x = punta.x + (cola.x - punta.x) * 0.1
  ' cola.y = punta.y + (cola.y - punta.y) * 0.1
  ' cola.z = punta.z + (cola.z - punta.z) * 0.1
  '
  ' cola2.x = cola.x + lw
  ' cola2.y = cola.y
  ' cola2.z = cola.z
  '
  ' linea(cola2, punta, colorflecha)
  '
  ' cola2.x = cola.x
  ' cola2.y = cola.y + lw
  ' cola2.z = cola.z
  '
  ' linea(cola2, punta, colorflecha)
  '
  ' cola2.x = cola.x
  ' cola2.y = cola.y
  ' cola2.z = cola.z + lw
  '
  ' linea(cola2, punta, colorflecha)
  '
  ' cola2.x = cola.x - lw
  ' cola2.y = cola.y
  ' cola2.z = cola.z
  '
  ' linea(cola2, punta, colorflecha)
  '
  ' cola2.x = cola.x
  ' cola2.y = cola.y - lw
  ' cola2.z = cola.z
  '
  ' linea(cola2, punta, colorflecha)
  '
  ' cola2.x = cola.x
  ' cola2.y = cola.y
  ' cola2.z = cola.z - lw
  '
  ' linea(cola2, punta, colorflecha)

End Sub

Fast Unsafe Public Sub Vertex2D(x2d As Float, y2d As Float, Optional colour As Integer = Color.Red)
  '
  '
  '     '2020 el color va primero
  ' '

  If colour Then
    Me.glColorRGB(colour)

  Endif

  gl.Vertex2f(x2d, y2d)
  '

End

Fast Unsafe Public Sub Vertex3D(p As Punto3d, Optional colour4F As GLColorSt)
  '
  '
  '     '2020 el color va primero
  '
  '     If colour4F Then
  '         gl.Color4f(colour4F.r, colour4F.g, colour4F.b, colour4F.Alpha)
  '
  '     Endif
  '     gl.Vertex3f(p.x, p.y, p.z)
  '

End
'

Public Sub Normal3D(p As Punto3d)
  '
  '     gl.Normal3f(p.x, p.y, p.z)
  ' '

End

Public Sub Get2DpointFrom3Dworld(p1 As Punto3d, ByRef x2 As Float, ByRef y2 As Float, Optional ByRef z2 As Float)

  Dim modelmatrix As New Float[16]
  Dim projMatrix As New Float[16]
  Dim miMatrix As New Float[16]

  Dim vp As New Integer[4]

  Dim p2 As New Float[3]

  modelMatrix = gl.GetFloatv(GL.MODELVIEW_MATRIX)
  projMatrix = gl.GetFloatv(GL.PROJECTION_MATRIX)
  vp = gl.GetIntegerv(GL.VIEWPORT_)
  ' Fixme: glu does not work anymore
  ' p2 = glu.Project(p1.x, p1.y, p1.z, modelMatrix, projMatrix, vp)

  If IsNull(p2) Then Return

  x2 = p2[0]
  y2 = p2[1]

  ' z<=1  --> el punto esta frente a la camara
  ' z> 1  ---> el punto es invisible
  z2 = p2[2]

End

'' Trnasforma un punto de la pantalla en un punto del espacio, que en realidad es un rayo en 3D
'' que en 2D es perpendicular a la pantalla
Public Sub Get3DpointFromScreen(Xscreen As Integer, Yscreen As Integer) As Float[]

  Dim modelmatrix As New Float[16]
  Dim projMatrix As New Float[16]
  Dim miMatrix As New Float[16]

  Dim vp As New Integer[4]

  Dim p2 As New Float[3]

  modelMatrix = gl.GetFloatv(GL.MODELVIEW_MATRIX)
  projMatrix = gl.GetFloatv(GL.PROJECTION_MATRIX)
  vp = gl.GetIntegerv(GL.VIEWPORT_)
  ' FIXME: glu dont work
  ' p2 = glu.UnProject(Xscreen, Yscreen, 0, modelMatrix, projMatrix, vp)

  If IsNull(p2) Then Return

  ' p2[2]
  ' z<=1  --> el punto esta frente a la camara
  ' z> 1  ---> el punto es invisible

  ' test
  'Debug "Screen", Xscreen, Yscreen, " -> Real ", p2[0], p2[1]

  Return p2

End

'' Establece la fuente con que se dibujaran los textos
Public Function SelectFont(FontName As String) As Boolean

  For Each f As LFFFonts In glFont
    If LCase(f.FontName) = LCase(FontName) Then
      ActualFont = f
      Return True ' fuente encontrada

    Endif
  Next
  Return False  ' fuente no encontrada

End

'' Lee todas las fuentes del directorio provisto y devuelve un listado con sus nombres
Public Function LoadFonts(DirPath As String) As String[]
  ' This class loads all fonts available at startup
  ' LibreCAD format fonts come in this fashion

  ' #Format: LibreCAD Font 1
  ' #Creator: LibreCAD
  ' #Version: master
  ' #Name: Roman Complex
  ' #Encoding: UTF - 8
  ' #LetterSpacing: 3
  ' #WordSpacing: 6.75
  ' #LineSpacingFactor: 1
  ' #Author: Hershey fonts
  ' #Author: Adam Radlowski < adamr@informatyka.gdansk.pl > (Polish)
  ' #License: Public domain
  '
  ' [0021]!
  ' 0.428572, 9; 0, 8.14286
  ' 0, 8.14286; 0.428572, 2.99999
  ' 0.428572, 2.99999; 0.857143, 8.14286
  ' 0.857143, 8.14286; 0.428572, 9
  ' 0.428572, 8.14286; 0.428572, 5.57144
  ' 0.428572, 0.857143; 0, 0.428572
  ' 0, 0.428572; 0.428572, 0
  ' 0.428572, 0; 0.857143, 0.428572
  ' 0.857143, 0.428572; 0.428572, 0.857143
  '
  ' [0022]""
  ' 0.428572, 6.00001; 0, 5.57144
  ' 0, 5.571

  ' - Is there any documentation about the LFF file format?
  ' I coped this from a mail:
  '
  ' Attached a proposal of new fonts, and below a explanation:
  '
  ' [0041] A
  ' 0.0000,0.0000;3.0000,9.0000;6.0000,9.000          <---CADA LINEA ES UNA POLY INDEPENDIENTE DE LA ANTERIOR
  ' 1.0800,2.5500;4.7300,2.5500
  '
  ' line 1 => utf-8 code + letter (same as QCAD)
  ' line 2 & 3 =>sequence like polyline vertex with ";" seperating vertex
  ' and "," separating x,y coords
  '
  ' [0066] f
  ' 1.2873,0;1.2873,7.2945;A0.5590,3.4327,9.0000
  ' 0.000000,6.0000,3.0000,6.0000
  '
  ' line 2  =>sequence like polyline vertex with ";" seperating vertex and
  ' "," separating x,y coords, if vertex is prefixed with "A"
  ' the first field is a bulge
  '
  ' [00C1] Á
  ' C0041
  ' 2.000000,9.0000,4.0000,10.0000

  Dim sFilename As String, fFile As File, sData, sCoord, aVert As String
  Dim sPuntos As String[], Lista As New String[]
  Dim p1 As Integer
  Dim BulgeAdded As Boolean
  Dim sVert As String[]
  Dim fltb As Single[]
  Dim flt1, flt3 As Single[]
  Dim flt2 As Single

  For Each sFilename In Dir(DirPath, "*.lff")

    Dim fntNuevas As New LFFFonts

    fntNuevas.FileName = sFilename
    fntNuevas.WordSpacing = 6.75
    fntNuevas.LetterSpacing = 3
    fntNuevas.LineSpacingFactor = 1
    fntNuevas.Letter = New Collection

    ffile = Open DirPath &/ sFilename For Input
    Do
      Line Input #fFile, sDAta
      If Left$(sData, 1) = "[" Then                           ' nueva letra
        Dim Letra As New Letters
        letra.Code = Val("&H0000" & Mid(sData, 2, 4))       ' [0021]!
        letra.FontGlyps = New Single[][]
        letra.FontBulges = New Single[][]

        While sdata <> ""
          Line Input #fFile, sDAta                        ' 0.428572, 0.857143; 0, 0.428572
          If Left(sData, 1) = "C" Then                       ' Copio datos de otra letra
            Dim CopyCode As Integer
            CopyCode = Val("&H0000" & Mid(sData, 2, 4))       ' C0021
            'CopyCode = GetCodeIndex(fntNuevas, CopyCode)
            flt1 = New Single[]
            flt3 = New Single[]

            For Each flt1 In fntNuevas.Letter[CopyCode].FontGlyps
              letra.FontGlyps.Add(flt3)
              For Each flt2 In flt1
                flt3.Add(flt2)
              Next
            Next
            flt3 = New Single[]
            For Each flt1 In fntNuevas.Letter[CopyCode].FontBulges
              letra.FontBulges.Add(flt3)
              For Each flt2 In flt1
                flt3.Add(flt2)
              Next
            Next

          Else
            flt1 = New Single[]
            fltb = New Single[]

            letra.FontGlyps.Add(flt1)
            letra.FontBulges.Add(fltb)

            sPuntos = Split(sDAta, ";")

            For Each sCoord In sPuntos
              sVert = Split(sCoord, ",")
              BulgeAdded = False
              For Each aVert In sVert
                p1 = InStr(avert, "A")
                If p1 > 0 Then

                  ' Try letra.FontBulges.Add(CFloat(Mid$(aVert, p1 + 1)))
                  Try fltb.Add(CSingle(Mid$(aVert, p1 + 1)))
                  BulgeAdded = True

                Else

                  ' Try letra.FontGlyps.Add(CFloat(aVert))
                  flt1.Add(CSingle(aVert))

                Endif
              Next
              If Not BulgeAdded Then fltb.Add(0)
            Next
          End If
        Wend                                                ' fin de la letra
        fntNuevas.Letter.Add(letra, letra.Code)

      Endif                                                   ' ignoro todos los comentarios

    Loop Until Eof(fFile)
    fntNuevas.FontName = Left$(sFilename, -4)
    glFont.Add(fntNuevas)
    ActualFont = fntNuevas
    If fntNuevas.FontName = "unicode" Then UnicodeFont = fntNuevas

    gcd.debugInfo("Leidas " & fntNuevas.Letter.Count & " letras en " & sFilename)
    lista.Add(fntNuevas.FontName)

  Next

  Return lista

End

' '' Busca el codigo UTF y devuelve la posicion en el indice de letras
' Public Function GetCodeIndex(LaFont As FontSt, UTFcode As Integer) As Integer
'
'   Dim i As Integer
'
'   If Not LaFont Then Return 0
'
'   For i = 0 To LaFont.Letter.Max
'     If LaFont.Letter[i].Code = UTFcode Then Return i
'   Next
'
'   ' si estamos aca es porque no lo encontramos, buscamos en unicode
'   For i = 0 To UnicodeFont.Letter.Max
'     If UnicodeFont.Letter[i].Code = UTFcode Then Return -i
'   Next
'
' End

'' Grafica un texto en el contexto actual de acuerdo a los parametros pasados
'' Debe estar definida la Font con nombre y altura
''
Fast Unsafe Public Function DrawText(UTFstring As String, posX As Float, posY As Float, Optional angle As Float = 0, textH As Float = 1, colour As Integer = -14, linewidth As Float = 1, rectW As Float = 0, rectH As Float = 0, alignHoriz As Integer = 0, alignVert As Integer = 0) As Boolean

  Dim i, iii, i2, UTFcode, LetterIndex As Integer, Xadvance As Float
  Dim fArcParams As New Single[]
  Dim Glyps, Bulges As New Single[]
  Dim TGlyps, TBulges As Single[][]
  Dim Ang, m1, m2, b, bx, by, mx, my, ang1, lt As Single
  Dim iBulge As Integer

  gl.PushMatrix                                                               ' para evitar peleas, guardo la matriz de trnasformacion
  gl.Translatef(posX, posY, 0)
  gl.Rotatef(angle, 0, 0, 1)                                                  ' en grados
  gl.Scalef(textH * FontScale, textH * FontScale, 1)
  If colour <> -14 Then Me.glColorRGB(colour)
  For i = 1 To String.Len(UTFstring)                                                 ' para cada letra
    UTFcode = String.Code(UTFstring, i)                                     ' obtengo el UTF code
    If UTFcode = 32 Then                                                    ' es un espacio
      gl.Translatef(ActualFont.LetterSpacing, 0, 0)                       ' muevo el puntero a la siguiente posicion
    Else
      ' DEPRE LetterIndex = GetCodeIndex(ActualFont, UTFcode)                     ' obtengo el indice de la letra
      If ActualFont.Letter.Exist(UTFcode) Then
        TGlyps = ActualFont.Letter[UTFcode].FontGlyps
        TBulges = ActualFont.Letter[UTFcode].FontBulges

      Else If UnicodeFont.Letter.Exist(UTFcode) Then ' is unicode
        TGlyps = UnicodeFont.Letter[UTFcode].FontGlyps
        TBulges = UnicodeFont.Letter[UTFcode].FontBulges

      Else
        ' descarto la letra
        Continue

      End If

      ' con bulges
      '============================================================================
      iBulge = 0

      For Each Glyps In TGlyps
        Bulges = TBulges[iBulge]

        For i2 = 0 To Glyps.Count / 2 - 2

          ' no todos los tramos pueden tener bulges
          If Abs(Bulges[i2 + 1]) > 0.001 Then
            ang1 = Ang(Glyps[(i2 + 1) * 2] - Glyps[i2 * 2], Glyps[(i2 + 1) * 2 + 1] - Glyps[i2 * 2 + 1])    ' angulo del tramo
            Lt = puntos.distancia(Glyps[i2 * 2], Glyps[i2 * 2 + 1], Glyps[(i2 + 1) * 2], Glyps[(i2 + 1) * 2 + 1])
            If Lt = 0 Then Continue
            mx = (Glyps[(i2 + 1) * 2] + Glyps[i2 * 2]) / 2          ' punto medio del tramo
            my = (Glyps[(i2 + 1) * 2 + 1] + Glyps[i2 * 2 + 1]) / 2
            B = Bulges[i2 + 1] * Lt / 2
            bx = mx + B * Sin(ang1)                             ' Tercer punto del Bulge
            by = my - B * Cos(ang1)

            ' aqui podria usar una rutina de arco entre 3 puntos
            fArcParams = puntos.Arc3Point(Glyps[i2 * 2], Glyps[i2 * 2 + 1], bx, by, Glyps[(i2 + 1) * 2], Glyps[(i2 + 1) * 2 + 1])
            ' traslado el centro

            gl.Translatef(fArcParams[0], fArcParams[1], 0)

            ' verifico Start_Angle y End_Angle (esta parte esta intimamente ligada a Arc3Point)
            ' las combinaciones de angulos son diversas, Arc3Point puede no funcionar bien en otra circunstancia

            If fArcParams[3] > 0 And fArcParams[4] > 0 Then

            Else If fArcParams[3] > 0 And fArcParams[4] < 0 Then

              Swap fArcParams[3], fArcParams[4]

            Else If fArcParams[3] < 0 And fArcParams[4] < 0 Then
              fArcParams[3] += 2 * Pi
              fArcParams[4] += 2 * Pi

            Else If fArcParams[3] < 0 And fArcParams[4] > 0 Then
              fArcParams[3] += 2 * Pi

            Endif

            If fArcParams[3] > fArcParams[4] Then Swap fArcParams[3], fArcParams[4]

            glPlus.Arc(fArcParams[2], fArcParams[3], fArcParams[4] - fArcParams[3], colour)
            gl.Translatef(-fArcParams[0], -fArcParams[1], 0)
            fArcParams = Null

          Else    ' dibujo la linea normalmente

            glPlus.Lines([Glyps[i2 * 2], Glyps[i2 * 2 + 1], Glyps[(i2 + 1) * 2], Glyps[(i2 + 1) * 2 + 1]], Colour)
          End If

        Next
        For iii = 0 To Glyps.Max Step 2  ' calculo cuanto tiene que avanzar el puntero
          If Glyps[iii] > Xadvance Then Xadvance = Glyps[iii]
        Next

        Inc iBulge
      Next
      gl.Translatef(Xadvance + ActualFont.LetterSpacing, 0, 0)                                       ' muevo el puntero a la siguiente posicion
      'Debug Xadvance
      Xadvance = 0
      '================================================================================

    End If
  Next
  gl.PopMatrix

End

'' devuelve un rectangulo que contiene al texto
'' [ancho,alto]
Fast Unsafe Public Function TextExtends(UTFstring As String, textH As Float) As Float[]

  Dim ibulge, i, iii, UTFcode, LetterIndex As Integer, Xadvance As Float
  Dim tRect As New Float[]
  Dim fArcParams As New Single[]
  Dim Glyps, Bulges As New Single[]
  Dim TGlyps, TBulges As New Single[][]

  tRect.Insert([0.0, 0.0])

  For i = 1 To String.Len(UTFstring)                                                 ' para cada letra
    UTFcode = String.Code(UTFstring, i)                                     ' obtengo el UTF code
    If UTFcode = 32 Then                                                    ' es un espacio
      tRect[0] += ActualFont.LetterSpacing * textH * FontScale
    Else
      ' DEPRE LetterIndex = GetCodeIndex(ActualFont, UTFcode)                     ' obtengo el indice de la letra

      If ActualFont.Letter.Exist(UTFcode) Then
        TGlyps = ActualFont.Letter[UTFcode].FontGlyps
        TBulges = ActualFont.Letter[UTFcode].FontBulges

      Else If UnicodeFont.Letter.Exist(UTFcode) Then ' is unicode
        TGlyps = UnicodeFont.Letter[UTFcode].FontGlyps
        TBulges = UnicodeFont.Letter[UTFcode].FontBulges
      End If

      iBulge = 0

      For Each Glyps In TGlyps
        Bulges = TBulges[iBulge]
        For iii = 0 To Glyps.Max Step 2  ' calculo cuanto tiene que avanzar el puntero
          If Glyps[iii] > Xadvance Then Xadvance = Glyps[iii]
          If Glyps[iii + 1] > tRect[1] Then tRect[1] = Glyps[iii + 1]
        Next

      Next
      Inc iBulge

    End If
    tRect[0] += (Xadvance + ActualFont.LetterSpacing) * textH * FontScale

    Xadvance = 0
  Next

  tRect[1] *= textH * FontScale * 1.2

  Return tRect

End

'' devuelve un rectangulo que contiene al texto
'' [x,y,ancho,alto]

'' Lee todas las texturas del directorio provisto y devuelve un listado con sus nombres
Public Function LoadTextures(DirPath As String) As String[]

  Dim sFilename As String, fFile As File, sData, sCoord As String
  Dim sPuntos As String[], Lista As New String[]
  Dim imgTexture As Image
  Dim picTexture As Picture
  Dim iTexture As Integer = 0
  Dim newTexture As TextureSt

  hText = Gl.GenTextures(1)

  For Each sFilename In Dir(DirPath, "*.png")

    newTexture = New TextureSt

    glTextures.Add(newTexture)

    newTexture.FileName = Left$(sFilename, -4)                          ' agrego el nombre de la textura a la lista que voy a retornar

    lista.Add(newTexture.FileName)

    newTexture.hImage = Image.Load(DirPath &/ sFilename)                                  ' cargo la imagen en memoria

    Gl.TexImage2D(newTexture.hImage)                                           ' genero un objeto OpenGL

    Gl.TexParameteri(Gl.TEXTURE_2D, Gl.TEXTURE_MIN_FILTER, Gl.NEAREST)  ' parametros basicos opengl

    Gl.TexParameteri(Gl.TEXTURE_2D, Gl.TEXTURE_MAG_FILTER, Gl.NEAREST)  ' parametros basicos opengl

    gl.BindTexture(gl.TEXTURE_2D, hText[iTexture])                      ' enlazo la textura a una handle

    newTexture.handle = hText[iTexture]

    Inc iTexture
    Break
  Next

  gcd.debugInfo("Leidas " & iTexture & " texturas en " & sFilename)

  Return lista

End

'' Dibuja un triangulo con una textura ya cargada

Public Sub TexturedTriangle2D(x1 As Float, y1 As Float, x2 As Float, y2 As Float, x3 As Float, y3 As Float, TextureHandle As Integer, Scale As Float)

  Gl.TexImage2D(glTextures[TextureHandle].hImage)                                           ' genero un objeto OpenGL
  gl.BindTexture(gl.TEXTURE_2D, hText[TextureHandle])                      ' enlazo la textura a una handle
  gl.begin(gl.TRIANGLES)

  gl.TexCoord2f(0, 0)

  gl.Vertex2f(x1, y1)

  gl.TexCoord2f((x2 - x1) / scale / 1000, (y2 - y1) / scale / 1000)

  gl.Vertex2f(x2, y2)

  gl.TexCoord2f((x3 - x1) / scale / 1000, (y3 - y1) / scale / 1000)

  gl.Vertex2f(x3, y3)

  gl.End

End
