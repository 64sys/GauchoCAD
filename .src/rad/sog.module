' Gambas module file

'
' RADG
' Rapid Application Development for Gambas
'
' Copyright (C) Martín Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

Export

Public Function Resume() As String

    Dim strResume As String

    strResume = "<b>So: </b>" & Distro()
    strResume &= " <b>Arquitectura.So: </b>" & ArqSO()
    strResume &= " <b>Arquitectura.Proc: </b>" & ArqMicro()
    strResume &= " <b>Procesador: </b>" & MicroType()
    strResume &= " <b>Ram: </b>" & Ram()
    strResume &= " <b>Nombre.PC: </b>" & ComputerName()
    strResume &= " <b>Usuario: </b>" & CurrentUser()
    strResume &= " <b>Usuarios: </b>" & AllUsers()
    strResume &= " <b>Grupo: </b>" & WGroup()
    strResume &= " <b>Gambas: </b>" & Vgambas()
    strResume &= " <b>Actualizado: </b>" & LastUpgrade()

    Return strResume

End

Public Function DeFiBro() As String ''Devuelve el administrador de archivos por defecto.

    Dim str As String

    Shell "xdg-mime query default inode/directory" To str

    Return str

End

Public Function DistroNoshell() As String ''Devuelve la distribución instalada xmi

    Dim str As String

    str = File.Load("/etc/issue.net")

    Return str

End

Public Function Distro() As String

    Dim strDistro As String
    Dim strDistroShort As String
    Dim stxDistros As New String[]
    Dim stxDistro As New String[]
    Dim intN As Integer

    strDistro = File.Load("/etc/issue")
    Replace(strDistro, gb.Tab, "")
    strDistro = Trim(strDistro)

    strDistro = strDistro
    strDistro = Replace(strDistro, "  ", " ")
    strDistro = Replace(strDistro, "  ", " ")
    strDistro = Replace(strDistro, gb.Tab, " ")
    strDistro = Replace(strDistro, gb.Tab, " ")
    strDistro = String.LCase(strDistro)

    stxDistros.clear
    stxDistro.clear

    stxDistros.Add("arch")
    stxDistros.Add("debian")
    stxDistros.Add("fedora")
    stxDistros.Add("redhat")
    stxDistros.Add("gentoo")
    stxDistros.Add("manjaro")
    stxDistros.Add("mint")
    stxDistros.Add("opensuse")
    stxDistros.Add("ubuntu")
    stxDistros.Add("peppermint")

    stxDistro = Split(strDistro, " ")

    strDistroShort = "Desconocida"

    For intN = 0 To stxDistro.Max

        If stxDistros.Find(stxDistro[intN]) <> -1 Then
            strDistroShort = stxDistro[intN]
            Break
        Endif

    Next

    Return strDistroShort

End

Public Function ArqSO() As String ''Devuelve la Arquitecura del Sistema Operativo

    Return System.Architecture

End

Public Function ArqMicro() As String ''Devuelve la Arquitecura del Procesador

    Dim sArqPro As String

    Exec ["uname", "-p"] To sArqPro 'Almacenamos la Arquitectura del Procesador
    Return Replace(sArqPro, "\n", "")

End

Public Function MicroType() As String ''Devuelve el tipo de Procesador

    Dim sPro As String

    Shell "cat /proc/cpuinfo | grep -i ghz | uniq | cut -f2 -d" & ":" To sPro
    Return LTrim(Replace(sPro, "\n", ""))

End

Public Function Ram() As String ''Devuelve cantidad de Ram en MB tambien con free -m

    Dim sRam As String

    Exec ["cat", "/proc/meminfo"] To sRam
    Try sRam = Scan(sRam, "*MemTotal:*\n*")[1] 'Ocultamos el Error si no encuentra MenTotal: * \n
    If Error Then
        sRam = ""
    Else
        While Not IsDigit(Right(sRam))
            sRam = Left(sRam, -1)
        Wend
        sRam = Trim(sRam)
    Endif

    If sRam Then
        Try sRam = Format(CInt(sRam) / 1024, "0") & " MB"
        If Not Error Then Return sRam
    Endif

End

Public Function ComputerName() As String ''Devuelve el nombre del pc

    Return System.Host

End

Public Function CurrentUser() As String[] ''Devuelve el usuario activo

    Return System.User.Name

End

Public Function GetProjectsDir(strPath As String) As String[] '' Lista los directorios de proyectos gambas recursivamente a partir del directorio que se le pasa como parametro.

    Dim stxRaw As New String[]
    Dim stx As New String[]
    Dim int As Integer

    stxRaw.Clear
    stxRaw = RDir(strPath, "*.project", gb.File, True)
    stx.Clear

    For int = 0 To stxRaw.Max
        If uty.DirGambas(strPath &/ File.Dir(stxRaw[int])) = True Then
            If stx.Exist(strPath &/ stxRaw[int]) = False Then
                stx.Add(strPath &/ stxRaw[int])
            Endif
        Endif
    Next

    Return stx

End

Public Function GetProjectInfo(strPath As String) As Collection ''Devuelve una matriz con los datos de un proyecto de gambas, como parametro de entrada requieres el direcotrio raíz del proyecto.

    Dim ctn As New Collection
    Dim strFile As String
    Dim stxPro As New String[]
    Dim int As Integer
    Dim strTag As String
    Dim strVal As String

    ' Informacion estándar de un proyecto
    ctn.Clear
    ctn.Add([""], "Address")                        'prmail:TEXT:Correo electrónico
    ctn.Add([""], "Arguments")                      '::
    ctn.Add([""], "Authors")                        'prdev:INTEGER:Desarrollador del programa
    ctn.Add([""], "Categories")                     'prpkct:TEXT:Categoría del paquete
    ctn.Add([""], "CompiledWithGambas")             '::
    ctn.Add([""], "Component")                      'prcomp:TEXT:Componentes empleados
    ctn.Add([""], "ControlPublic")                  '::
    ctn.Add([""], "CreateEachDirectory")            '::
    ctn.Add([""], "CreateMenu")                     '::
    ctn.Add([""], "CreateShortcut")                 '::
    ctn.Add([""], "CurrentArgument")                '::
    ctn.Add([""], "Dependencies")                   '::
    ctn.Add([""], "Description")                    'prdesc:TEXT:Descripción del programa
    ctn.Add([strPath], "Directory")                 '::
    ctn.Add([""], "DoNotTranslate")                 '::
    ctn.Add([""], "Environment")                    '::
    ctn.Add([""], "ExecPath")                       '::
    ctn.Add([""], "ExtraAutoconfTest")              '::
    ctn.Add([""], "ExtraDependencies")              '::
    ctn.Add([""], "ExtraDesktop")                   '::
    ctn.Add([""], "ExtraFiles")                     '::
    ctn.Add([""], "GambasProjectFile")              '::
    ctn.Add([""], "GambasVersion")                  'prgver:TEXT:Versión de Gambas
    ctn.Add([""], "Groups")                         'prpkgr:TEXT:Grupo del paquete
    ctn.Add([""], "Icon")                           'pricon:TEXT:Icono del programa
    ctn.Add([""], "KeepDebugInfo")                  '::
    ctn.Add([""], "Language")                       'prlan:INTEGER:Idioma del programa
    ctn.Add([""], "License")                        'prlic:INTEGER:Licencia del programa
    ctn.Add([""], "Maintainer")                     'prmaint:TEXT:Mantenedor del programa
    ctn.Add([""], "Menus")                          'prpkmu:TEXT:Menú del paquete
    ctn.Add([""], "MimeTypes")                      '::
    ctn.Add([""], "ModulePublic")                   '::
    ctn.Add([""], "PackageName")                    'prpkna:TEXT:Nombre del paquete
    ctn.Add([""], "Packager")                       'prpkge:TEXT:Empaquetador
    ctn.Add([""], "PackageSignature")               '::
    ctn.Add([""], "PackageVersion")                 '::
    ctn.Add([""], "Prefix")                         'prpfix:INTEGER:Prfijo del vendedor
    ctn.Add([""], "Profiling")                      '::
    ctn.Add([""], "RedirectStderr")                 '::
    ctn.Add([""], "RunAfter")                       '::
    ctn.Add([""], "SameDependencies")               '::
    ctn.Add([""], "SameFiles")                      '::
    ctn.Add([""], "Screenshot")                     '::
    ctn.Add([""], "SourcePath")                     '::
    ctn.Add([""], "Startup")                        'prstrt:TEXT:Clase de inicio
    ctn.Add([""], "Systems")                        'prsyst:TEXT:Sistemas para los que se empaqueto el programa
    ctn.Add([""], "TabSize")                        'prtabz:INTEGER:Tamaño del tabulador
    ctn.Add([""], "Tags")                           '::
    ctn.Add([""], "Title")                          'prname:TEXT:Nombre del programa
    ctn.Add([""], "Translate")                      'prtran:INTEGER:Cantidad de traducciones del prgrama
    ctn.Add([""], "Type")                           '::
    ctn.Add([""], "Url")                            'prurl:TEXT:Sitio web del programa
    ctn.Add([""], "UseHttpServer")                  '::
    ctn.Add([""], "UseRelease")                     '::
    ctn.Add([""], "UseTerminal")                    '::
    ctn.Add([""], "Vendor")                         'prvndr:TEXT:Vendedor del prgrama
    ctn.Add([""], "VendorPrefix")                   '::
    ctn.Add([""], "Version")                        'prver:TEXT:Versión del programa
    ctn.Add([""], "VersionFile")                    '::
    ctn.Add([""], "Warnings")                       '::
    ctn.Add([""], "WebSite")                        'prweb:TEXT:Página web

    strFile = strPath &/ ".project"

    If Stat(strFile).Type = gb.File Then
        ' Carga del archivo .proyect
        stxPro = fil.FileLoad(strFile)

        For int = 0 To stxPro.Max
            Print stxPro[int]
            Select InStr(stxPro[int], "=")
                Case 0
                    Select String.Mid(stxPro[int], 1, 16)
                        Case "# Gambas Project"
                            strTag = "GambasProjectFile"
                            strVal = Replace(stxPro[int], "# Gambas Project File ", "")
                            'Print strTag

                            If ctn.Exist("GambasProjectFile") Then
                                ctn["GambasProjectFile"] = [strVal]
                            Else
                                ctn.Add(strVal, "GambasProjectFile")
                            Endif

                        Case "# Compiled with "
                            strTag = "CompiledWithGambas"
                            strVal = Replace(stxPro[int], "# Compiled with Gambas ", "")

                            If ctn.Exist("CompiledWithGambas") Then
                                ctn["CompiledWithGambas"] = [strVal]
                            Else
                                ctn.Add([strVal], "CompiledWithGambas")
                            Endif
                    End Select

                Case Else
                    strTag = Split(stxPro[int], "=")[0]
                    strVal = Split(stxPro[int], "=")[1]

                    If ctn.Exist(strTag) Then
                        If ctn[strTag][0] = "" Then
                            ctn[strTag] = [strVal]
                        Else
                            ctn[strTag].Add(strVal)
                        Endif
                    Else
                        ctn.Add([strVal], strTag)
                    Endif

            End Select
        Next
    Endif
    Return ctn

End

Public Function GetFarmInfo(strPath As String) As Collection ''Devuelve una matriz con los datos de un proyecto de gambas alojado en la granja, como parametro de entrada requiere el identificador del proyecto.

    Dim ctn As New Collection
    Dim strFile As String
    Dim stxPro As New String[]
    Dim int As Integer
    Dim strTag As String
    Dim strVal As String

    ' Informacion esándar de un proyecto
    ctn.Clear
    ctn.Add([""], "Id")                             'gfidx:INTEGER PRIMARY KEY AUTOINCREMENT:Identificador
    ctn.Add([""], "Name")                           'gfname:TEXT UNIQUE:Nombre
    ctn.Add([""], "Version")                        'gfvers:TEXT:Versión
    ctn.Add([""], "LastVersion")                    'gflast:TEXT:Última versión
    ctn.Add([""], "Vendor")                         'gfvndr:TEXT:Vendedor
    ctn.Add([""], "Release")                        'gfrel:TEXT:Lanzamiento
    ctn.Add([""], "UploadDate")                     'gfupld:TEXT:Fecha de carga
    ctn.Add([""], "Description")                    'gfdesc:TEXT:Descripción
    ctn.Add([""], "URL")                            'gfurl:TEXT:URL
    ctn.Add([""], "Size")                           'gfsize:TEXT:tamaño
    ctn.Add([""], "RequiredGambasVersion")          'gfgver:TEXT:Versión requerida de Gambas
    ctn.Add([""], "Checksum")                       'gfchk:TEXT:Suma de comprobación
    ctn.Add([""], "DownloadCount")                  'gfdwlc:INTEGER:Cuenta de descargas
    ctn.Add([""], "FullDownloadCount")              'gfdwlf:INTEGER:Cuenta de descargas completa
    ctn.Add([""], "VoteCount")                      'gfvote:INTEGER:Recuento de votos
    ctn.Add([""], "Owner")                          'gfownr:TEXT:Propietario
    ctn.Add([""], "Size")                           'gfsize2:TEXT:tamaño
    ctn.Add([""], "Tags")                           'gftags:TEXT:Etiquetas

    strFile = strPath &/ ".farm"

    If Stat(strFile).Type = gb.File Then
        ' Carga del archivo .farm
        stxPro = fil.FileLoad(strFile)

        For int = 0 To stxPro.Max
            Print stxPro[int]
            Select InStr(stxPro[int], "=")
                Case 0
                    'skip
                Case Else
                    strTag = Split(stxPro[int], "=")[0]
                    strVal = Split(stxPro[int], "=")[1]
                    strVal = Replace(strVal, "\r", "")

                    If ctn.Exist(strTag) Then
                        If ctn[strTag][0] = "" Then
                            ctn[strTag] = [strVal]
                        Else
                            ctn[strTag].Add(strVal)
                        Endif
                    Else
                        ctn.Add([strVal], strTag)
                    Endif

            End Select
        Next
    Endif
    Return ctn

End

Public Function GetSystemUsers() As String[] ''Devuelve el una lista de usuarios del sistema Linux.

    Dim stxTUsr As New String[]
    Dim stxUsr As New String[]
    Dim strUser As String

    stxTUsr = uty.FileLoad("/etc/passwd")

    If stxTUsr.Count > 0 Then

        For Each strUser In stxTUsr
            If Split(strUser, ":")[5] = "/home" &/ Split(strUser, ":")[0] Then
                If InStr(Split(strUser, ":")[6], "false") = 0 Then
                    stxUsr.Add(Split(strUser, ":")[0])
                Endif
            Endif
        Next
    Endif

    Return stxUsr

End

Public Function AllUsers() As String ''Devuelve los usuarios que hemos creado

    Dim sUser As String

    Shell "cat /etc/passwd |grep -iw '100.' | cut -d ':' -f1" To sUser

    Return Replace(sUser, "\n", "")

End

Public Function WGroup() As String ''Devuelve el Grupo de trabajo del pc

    Return System.Domain

End

Public Function SysFile(ruta As String) As String ''Devuelve el sistema de ficheros

    Dim sSF As String

    Exec ["df", "-h", ruta] To sSF 'Almacenamos caracteristicas del Sistema de Ficheros pasado en ruta
    Try sSF = Scan(sSF, "*\n*")[1] 'Ocultamos el Error si no encuentra la cadena
    If Error Then sSF = ""
    Return Replace(sSF, "\n", "")

End

Public Function Vgambas() As String ''Devuelve la versión de gambas intalada en el pc

    Return System.FullVersion

End

Public Function ProjInfo(strPath As String) As Collection ''Devuelve una colección con la información del proyecto alojada en el archivo ".project" si no se le pasa el camino del archivo .project del que se desea extraer la información la funcion devolvera los datos del proyecto local. Luego, el orden de cada item es el siguiente:<ol start="0"><li>Title</li><li>Description</li><li>Authors</li><li>Vendor</li><li>Version</li><li>Component</li><li>Language</li><li>Startup</li><li>Icon</li></ol>

    Dim ctn As Collection = ["Title": "~", "Startup": "~", "Icon": "~", "Version": "~", "Component": [], "Description": "~", "Authors": [], "Language": "~", "Vendor": "~", "Iconart": "~", "Iconurl": "~", "Iconset": "~", "Iconlic": "~"]
    Dim str As String
    Dim stx As New String[]
    Dim i As Integer
    Dim tag As String
    Dim att As String

    If Exist(strPath) Then
        str = File.Load(strPath)
        stx = Split(str, "\n")

        If stx.Count > 0 Then
            For i = 0 To stx.Max
                If InStr(stx[i], "=") > 0 Then
                    tag = Split(stx[i], "=")[0]
                    att = Split(stx[i], "=")[1]
                    att = Replace(att, "\"", "")
                    If ctn.Exist(tag) Then
                        Select tag
                            Case "Component", "Authors"
                                ctn[tag].Add(att)
                            Case Else
                                ctn[tag] = att
                        End Select
                    Else
                        ctn.Add(att, tag)
                    Endif
                Endif
            Next
        Endif
    Endif
    Return ctn

End

Public Function AddressIP() As String ''Devuelve la IP del equipo, solo funciona bajo OS con Systemd, para ello usa shell y el comando "ip addr show".

    Dim strAddr As String
    Dim stxAddr As New String[]
    Dim strPart As String
    Dim strIP As String

    Shell "ip addr show" To strAddr
    If Len(strAddr) > 0 Then
        stxAddr = Split(strAddr, " ")
        For Each strPart In stxAddr
            If InStr(strPart, ".") > 0 Then
                If InStr(strPart, "/24") > 0 Then
                    strIP = Split(strPart, "/")[0]
                Endif
            Endif
        Next
    Endif
    Return strIP

End

Public Function LANIP(Optional strBase As String) As String[] ''Devuelve las IP v4 de la red local, como parametro de entrada requiere la direccion IP base, por ejemplo "192.168.1" pero si no se le pasa el parametro entonces usa la ip de la computadora donde se este ejecutando el programa quitandole el último número. El formato de salida de cada item de la matriz es host-name[tab]8.8.8.8

    Dim strAddr As String
    Dim stxTmp As New String[]
    Dim stxAddr As New String[]
    Dim strPart As String

    If InStr(strBase, ".") = 0 Then
        strBase = Split(AddressIP(), ".")[0] & "."
        strBase &= Split(AddressIP(), ".")[1] & "."
        strBase &= Split(AddressIP(), ".")[2]
    Endif

    Shell "nmap -sP " & strBase & ".1-254" To strAddr

    If Len(strAddr) > 0 Then
        stxTmp = Split(strAddr, "\n")
        For Each strPart In stxTmp
            If InStr(strPart, "Nmap scan report for ") > 0 Then
                strPart = Replace(strPart, "Nmap scan report for ", "")
                strPart = Replace(strPart, " ", "\t")
                strPart = Replace(strPart, "(", "")
                strPart = Replace(strPart, ")", "")
                stxAddr.Add(strPart)
            Endif
        Next
    Endif
    Return stxAddr

End

Public Function LastNIP() As String ''Devuelve el último digito de la Ip

    Dim sIPs As String

    Shell "ifconfig | grep inet: | grep Difus.|cut -d '.' -f5|cut  -d ' ' -f1" To sIPs
    Return RTrim(Replace(sIPs, "\n", " "))

End

Public Function Hdserial() As String ''Devuelve el número de serie del disco duro para utilizarlo como Pk en la BDD

    Dim sNS As String

    Shell "udevadm info --query=property --name=sda | grep SERIAL_ | awk -F '=' '{print $2}'" To sNS
    Return RTrim(Replace(sNS, "\n", " "))

End

Public Function UUIDswap() As String ''Devuelve UUID de la swap para utilizarlo como PK de la BDD
    'Requiere permisos de Administrador

    Dim sUID As String

    Shell "blkid | grep swap | cut -d ' ' -f2 |cut -d '=' -f2" To sUID
    Return Left(Right(sUID, -1), -2)

End

Public Function LastUpgrade() As String ''Devuelve la Fecha de la ultima vez que se actualizo el sistema

    Dim long_iso As String
    Dim strDistroShort As String
    Dim strLastUpgrade As String

    long_iso = "long-iso"

    strDistroShort = Distro()

    Select strDistroShort
        Case "debian"
            strLastUpgrade = Format$(Stat("/var/log/apt").Time, "yyyy/mm/dd hh:nn:ss")
            strLastUpgrade = RTrim(Replace(strLastUpgrade, "\n", " "))

        Case Else
            strLastUpgrade = ("Desconocido")
    End Select

    Return strLastUpgrade

End

Public Function GetLcNumeric() As String[] '' <p>Devuelve una matriz de texto con la configuracion de la nmeración del sistema.</p><ol><li>Decimales</li><li>Miles</li><li>??</li><li>??</li><li>??</li><li>Codificación</li></ol>

    Dim str As String
    Dim stx As New String[]

    Shell "locale LC_NUMERIC" To str

    If InStr(str, "\n") > 0 Then
        stx = Split(str, "\n")
    Endif

    Return stx

End

Public Function PkgStat(strPkg As String) As Boolean ''Devuelve el estado respecto a la instalacion de un paquete. Requiere como parametro de entrada el nombre exacto del paquete.

    Dim strDistroShort As String
    Dim strCommand As String
    Dim strPkgStatus As String
    Dim bolPkgStatus As Boolean

    strDistroShort = Distro()

    ' Obtencion de resultados
    Select strDistroShort
        Case "arch", "manjaro"
            strCommand = "pacman -Qs " & strPkg

            Shell strCommand & " 2>&1" To strPkgStatus

            If strPkgStatus <> "" Then
                strPkgStatus = Split(strPkgStatus, "\n")[0]
                strPkgStatus = Split(strPkgStatus, " ")[0]
            Endif

            Select strPkgStatus
                Case "local/" & strPkg
                    bolPkgStatus = True
                Case Else
                    bolPkgStatus = False
            End Select

        Case "debian", "ubuntu", "mint", "peppermint"

            strCommand = "dpkg-query -W -f='${Status}\n' " & strPkg

            Shell strCommand & " 2>&1" To strPkgStatus

            If strPkgStatus = "install ok installed\n" Then
                bolPkgStatus = True
            Else
                bolPkgStatus = False
            Endif

    End Select

    Return bolPkgStatus

End

Public Function XDGFolder() As String[] ''Devuelve una matriz de texto con las rutas de las carpetas de musica, imagenes, documentos etc. del directorio /home/user

    Dim strHome As String
    Dim stxXDGTmp As New String[]
    Dim stxXDGFolders As New String[]
    Dim strDirsFile As String
    Dim strFlux As String
    Dim intL As Integer
    Dim strTmp As String
    Dim strVar As String
    Dim strFolder As String

    strHome = User.Home

    strDirsFile = strHome &/ ".config/user-dirs.dirs"

    If Exist(strDirsFile) Then
        strFlux = File.Load(strDirsFile)

        stxXDGTmp = Split(strFlux, gb.NewLine)

        For intL = 0 To stxXDGTmp.Max
            strTmp = stxXDGTmp[intL]
            If strTmp <> "" Then
                If String.Mid(strTmp, 1, 4) = "XDG_" Then
                    If InStr(strTmp, "=")

                        strVar = ""
                        strFolder = ""

                        strVar = Split(strTmp, "=")[0]
                        strVar = Split(strVar, "_")[1]
                        strVar = String.LCase(strVar)

                        strFolder = Split(strTmp, "=")[1]
                        strFolder = Replace(strFolder, "$HOME/", "")
                        strFolder = Replace(strFolder, Chr(34), "")
                        strFolder = strHome &/ strFolder

                        stxXDGFolders.Add(strVar & ":" & strFolder)

                    Endif
                Endif
            Endif
        Next
    Endif

    Return stxXDGFolders

End

Public Function PkgDep(stxPackages As String[]) As String[] ''Verifica si los paqutes que se le pasan como parametros en una matriz, estan instalados en el sistema, devuelve una matriz con los paquetes que no estan instalados, si todo lo estuviera la matriz devuelta estara vacia.

    Dim intPkg As Integer
    Dim stxMissing As New String[] ' Lista de paquetes que falta instalar

    For intPkg = 0 To stxPackages.Max
        If PkgStat(stxPackages[intPkg]) = False Then
            stxMissing.Add(stxPackages[intPkg])
        Endif
    Next

    Return stxMissing

End

Public Sub Install_read()

    Dim StrInput As String

    Read #Last, StrInput, -80

End

Public Function MimeTypesList() As String[] ''Devuelve una lista de todos los tipos mime que estan contemplados en el sistema.

    Dim stxOut As New String[]
    Dim strDefaults As String

    strDefaults = "/usr/share/mime/types"

    If Exist(strDefaults) Then
        If Stat(strDefaults).Type = gb.File Then
            stxOut = Split(File.Load(strDefaults), "\n")
        Endif
    Endif

    Return stxOut

End

Public Function MimeDefaultApp(strMimeType As String) As String[] ''Devuelve una lista con el programa asociado por defecto y la ruta del icono si es que existe.

    Dim stx As New String[]
    Dim strOut As String
    Dim stxOut As New String[]
    Dim strDefaults As String
    Dim strLine As String
    Dim strMim As String
    Dim strApp As String

    If Exist("/usr/share/applications/defaults.list") Then
        strDefaults = "/usr/share/applications/defaults.list"
    Else
        If Exist(User.Home &/ ".config/mimeapps.list") Then
            strDefaults = User.Home &/ ".config/mimeapps.list"
        Endif
    Endif

    If Exist(strDefaults) Then
        Select Stat(strDefaults).Type
            Case gb.File, gb.Link
                stx = Split(File.Load(strDefaults), "\n")
                If stx.Count > 0 Then
                    For Each strLine In stx
                        If InStr(strLine, "=") > 0 Then
                            strLine = CleanDestop(strLine)
                            strMim = Split(strLine, "=")[0]
                            strApp = Split(strLine, "=")[1]
                            If strMim = strMimeType Then
                                'If Exist("/usr/share/applications/" & strApp)
                                If InStr(strApp, ".") > 0 Then
                                    strOut = Split(strApp, ".")[0]
                                Else
                                    strOut = strApp
                                Endif
                                'Break
                                stxOut.Add(strOut)
                            Endif
                        Endif

                    Next
                Endif
        End Select
    Endif

    Return stxOut

End

Private Function CleanDestop(s As String) As String

    Dim stx As New String[]
    Dim r As String

    stx = ["org.gnome.", ".Desktop"]
    For Each r In stx
        s = Replace(s, r, "")
    Next

    Return s

End

Public Function UUIDHandle(i As Integer) As String ''Devuelve un Identificador de largo N generado mediante la combinación aleatoria de caracteres y números. Es para listas de objetos que se desean nombrar con nombres de 4 o 6 caracteres por ejemplo.

    Dim s As String
    Dim x As Integer
    Dim stx As New String[]
    Dim o As String
    Dim c As Integer
    Dim r As Integer

    o = ""

    If i > 0 Then

        s = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"

        For x = 1 To String.Len(s)
            stx.Add(String.Mid(s, x, 1))
        Next

        For c = 0 To i - 1
            r = Rand(0, stx.Count - 1)
            o &= stx[r]
        Next

    Endif

    Return o

End

Public Function UUIDGen() As String ''Devuelve un Identificador único universal generado mediante la orden <b>uuidgen -t</b>. Solo cambia el octeto de la marca de tiempo. Recuerda que esta generado en base al tiempo "-t"

    Dim str As String

    Shell "uuidgen -t" To str

    If String.Len(str) > 36 Then
        str = String.Mid(str, 1, 36)
    Endif

    Return str

End

Public Function UUIDProc() As String ''Devuelve un Identificador único universal generado la carga del archivo /proc/sys/kernel/random/uuid. Siempre da todos los octetos diferentes para cada vez que se corre la funcion.

    Dim str As String

    str = File.Load("/proc/sys/kernel/random/uuid")
    str = RTrim(str)

    Return str

End
