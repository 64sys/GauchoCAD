' Gambas module file

Export

Public Function info(f As String) As Collection

  Dim cOut As New Collection
  Dim str As String
  Dim vrt As Variant[]
  Dim j As String
  Dim vrx As New Variant[]
  Dim item As Variant
  Dim tag1 As String
  Dim val1 As Variant
  Dim tag2 As String
  Dim etx As New String[]           '' Entities type list
  Dim i As Integer
  Dim prp As Variant
  Dim cFile As New Collection
  Dim cVariables As New Collection
  Dim cUnkn As New Collection
  Dim cClas As New Collection
  Dim cObjs As New Collection
  Dim cLayers As New Collection     ''LAYER
  Dim cLineTypes As New Collection  ''LTYPE (Line types)
  Dim cBlocks As New Collection     ''BLOCK_HEADER (Atention, are blocks (objects) not inserts (entities))
  Dim cDimStyles As New Collection  ''DIMSTYLE (Dimmension styles)
  Dim cTextStyles As New Collection ''STYLE (Text styles)
  Dim cEntities As New Collection
  Dim cStat As Collection
  Dim tag As String

  Shell "/usr/local/bin/dwgread --format JSON '" & f & "'" To str

  str = Replace(str, "\t", " ")

  cStat = fil.Stat(f)

  If cStat.Count > 0 Then
    For Each tag In ["Path", "Ino", "Size", "LastChange"]
      If cFile.Exist(Lower(tag)) = False Then
        cFile.Add(cStat[tag], Lower(tag))
      Endif
    Next
  Endif

  File.Save(User.Home &/ File.BaseName(f) & ".json", str)

  vrt = Json2Gbas(str)
  i = 0
  For Each item In vrt
    Select TypeOf(item)
      Case gb.Object '16
        If item Is Collection Or item Is JSONCollection Then
          If item.Count > 0 Then
            j = 0
            For Each prp In item
              If j = 0 Then
                tag1 = item.Key
                val1 = prp
              Endif
              If j = 1 Then
                tag2 = item.Key
              Endif
              Inc j
            Next

            Select tag1
                ' Case "version"
                '   For Each prp In item
                '     cFile.Add(prp, item.Key)
                '     ' injection of some extra file data
                '     cStat = fil.Stat(f)
                '     If cStat.Count > 0 Then
                '       For Each tag In ["Path", "Ino", "Size", "LastChange"]
                '         If cFile.Exist(Lower(tag)) = False Then
                '           cFile.Add(cStat[tag], Lower(tag))
                '         Endif
                '       Next
                '     Endif
                '   Next

              Case "unknown_0"
                For Each prp In item
                  cVariables.Add(prp, item.Key)
                Next

                ' Case "number"
                '   If tag2 = "dxfname" Then
                '     For Each prp In item
                '       cClas.Add(prp, item.Key)
                '     Next
                '   Else
                '     Print "number no dxf name"
                '   Endif

              Case "object"

                Select val1
                    'Case "APPID"
                    'Case "APPID_CONTROL"
                    'Case "ASSOCACTION"
                    'Case "ASSOCDEPENDENCY"
                    'Case "ASSOCGEOMDEPENDENCY"
                    'Case "ASSOCNETWORK"
                    'Case "BLOCK_CONTROL"
                  Case "BLOCK_HEADER"
                    'Print val1
                    cBlocks.Add(item.Copy(), item["handle"][1])

                    'Case "CELLSTYLEMAP"
                    'Case "DETAILVIEWSTYLE"
                    'Case "DICTIONARY"
                    'Case "DICTIONARYVAR"
                    'Case "DICTIONARYWDFLT"
                  Case "DIMSTYLE"
                    cDimStyles.Add(item.Copy(), item["handle"][1])

                    'Case "DIMSTYLE_CONTROL"
                    'Case "GROUP"
                  Case "LAYER"
                    cLayers.Add(item.Copy(), item["handle"][1])

                    'Case "LAYER_CONTROL"
                    'Case "LAYOUT"
                  Case "LTYPE"
                    cLineTypes.Add(item.Copy(), item["handle"][1])

                    'Case "LTYPE_CONTROL"
                    'Case "MATERIAL"
                    'Case "MLEADERSTYLE"
                    'Case "MLINESTYLE"
                    'Case "PLACEHOLDER"
                    'Case "SCALE"
                    'Case "SECTIONVIEWSTYLE"
                  Case "STYLE"
                    cTextStyles.Add(item.Copy(), item["handle"][1])
                    'Case "STYLE_CONTROL"
                    'Case "SUN"
                    'Case "TABLEGEOMETRY"
                    'Case "TABLESTYLE"
                    'Case "UCS_CONTROL"
                    'Case "UNKNOWN_OBJ"
                    'Case "VIEW"
                    'Case "VIEW_CONTROL"
                    'Case "VISUALSTYLE"
                    'Case "VPORT"
                    'Case "VPORT_CONTROL"
                    'Case "VX_CONTROL"
                    'Case "VX_TABLE_RECORD"
                    'Case "WIPEOUTVARIABLES"
                    'Case "XRECORD"
                  Case Else
                    cObjs.Add(item.Copy(), item["handle"][1])
                    'cObjs.Add(prp, item.Key)
                End Select

              Case "entity"
                'Select item["entity"]
                '  item["entity"]
                'End Select

                etx.Add(item["entity"])

                cEntities.Add(item.Copy(), item["handle"][1])

              Case Else
                cUnkn.Add(tag1, CStr(i))

            End Select
          Endif
        Else
          If item Is Variant[] Then
            vrx.Insert(item)
          Endif
        Endif
    End Select
    Inc i
  Next

  'Objects
  cOut.Add(cFile.Copy(), "File")
  cOut.Add(cVariables.Copy(), "Variables")
  cOut.Add(cLayers.Copy(), "Layers")
  cOut.Add(cBlocks.Copy(), "Blocks")
  cOut.Add(cLineTypes.Copy(), "LineTypes")
  cOut.Add(cDimStyles.Copy(), "DimStyles")
  cOut.Add(cTextStyles.Copy(), "TextStyles")
  cOut.Add(cad.GauchoEntitiesSort(cObjs), "Objects")

  'Entities
  File.Save(User.Home &/ "entities.txt", etx.Join("\n"))
  'cOut.Add(cad.GauchoEntitiesSort(cEntities), "Entities")
  cOut.Add(cEntities.Copy(), "Entities")
  cOut.Add(cUnkn.Copy(), "Unknown")

  Return cOut

End

'' Convert a dwg to dxf
Public Function Todxf(sFile As String) As String

  Dim dwg As String
  Dim FileOutput As String

  dwg = "/tmp/tmp.dwg"

  If Exist(sFile) Then
    If Exist(dwg) Then
      Shell "rm " & dwg Wait
    Endif

    If Lower(File.Ext(sFile)) = "dxf" Then
      Shell "/usr/local/bin/dxf2dwg -y -o '" & dwg & "' '" & sFile & "'" Wait
      If Exist(dwg) Then
        FileOutput = dwg
      Else
        FileOutput = ""
      Endif
    Endif
  Endif

  Return FileOutput

End

'' Convert a json file to gambas collection

Private Function Json2Gbas(sRaw As String) As Variant[]

  Dim vrt As Variant
  Dim item As Variant
  Dim vrx As New Variant[]
  Dim stx As New String[]
  Dim etx As New String[]           '' Filtred arrar. It only includes entities that can be handled in the decoder without errors.
  Dim otx As New String[]           '' Filtred arrar. It only includes objects that can be handled in the decoder without errors.
  Dim i As Integer                  '' General index for line of text flow
  Dim IniCut As String              '' Text string that marks the start of the object or entity
  Dim EndCut As String              '' Text string that marks the end of the object or entity
  Dim c As Integer                  '' Sub index for line of text flow inside the entity of the object
  Dim hdx As New Variant[]          '' Header (dwg variables) listed as json text
  Dim obx As New Variant[]          '' Objects listed as json text
  Dim enx As New Variant[]          '' Entitites listed as json text
  Dim e As Integer                  '' Index for entities list
  Dim str As String
  Dim enty As Variant
  Dim k As Integer
  Dim sType As String
  Dim EndCut2 As String
  Dim r As Integer
  Dim obz As Variant
  Dim Qkey As Integer
  Dim uglyx As New String[]
  Dim u As String
  Dim BadObjects As New String[]
  Dim Skiped As String

  stx = Split(sRaw, gb.Lf, Chr(140), True)
  File.Save("/tmp/tmp.json", stx.Join("\n"))

  i = 0
  While i < stx.Max
    If RegExp.Match(stx[i], "\"HEADER\": {") Then
      Qkey = 0
      Repeat
        If RegExp.Match(stx[i], "{") Then
          Inc Qkey
        Endif

        If RegExp.Match(stx[i], "}") Then
          Dec Qkey
        Endif

        If RegExp.Match(stx[i], "\"HEADER\": {") Then
          etx.Add(Replace(stx[i], "\"HEADER\": {", " {"))
        Else
          etx.Add(stx[i])
        Endif

        Inc i
      Until Qkey = 0

      hdx.Add(etx.Copy(), 0)
      etx.Clear
      Break
    Else
      Inc i
    Endif
  Wend

  i = 0
  While i < stx.Max
    If RegExp.Match(stx[i], "\"entity\": \"") Or RegExp.Match(stx[i], "\"object\": \"") Then
      If RegExp.Match(stx[i], "\"entity\": \"") Then
        sType = "entity"
      Else
        sType = "object"
      Endif
      'IniCut = stx[i - 1]
      'EndCut = Replace(IniCut, "{", "}")
      etx.Add("  {")
      Print CStr(i)
      ' While Mid(stx[i], 1, Len(EndCut)) <> EndCut Or i >= stx.Max
      '   etx.Add(stx[i])
      '   Inc i
      ' Wend

      '---------------------
      Qkey = 1
      Repeat

        If RegExp.Match(stx[i], "{") Then
          Inc Qkey
        Endif

        If RegExp.Match(stx[i], "}") Then
          Dec Qkey
        Endif

        etx.Add(stx[i])

        Inc i
      Until Qkey = 0

      'etx.Add("  }")
      '---------------------
      'etx.Add(EndCut)
      Select sType
        Case "entity"
          enx.Add(etx.Copy(), e)
        Case "object"
          obx.Add(etx.Copy(), e)
      End Select
      etx.Clear
      Inc e
    Else
      Inc i
    Endif
  Wend

  uglyx = Ugly()

  k = 0
  For Each obz In [hdx, obx, enx]
    For Each enty In obz
      'Print enty[1] & enty[3]
      Skiped = ""
      For Each u In uglyx
        If RegExp.Match(enty[1] & enty[2] & enty[3], u) Then
          Skiped = u
          Break
        Endif
      Next

      If Skiped = "" Then
        For r = 1 To enty.Max
          If RegExp.Match(enty[r], " \"\": ") Then
            enty[r] = Replace(enty[r], " \"\": ", " \"" & "empty[" & CStr(r) & "]" & "\": ")
          Endif
        Next
        Try vrt = JSON.Decode(enty.Join("\n"), True)
        If Error Then
          BadObjects.Add(enty.Join("\n"))
        Endif
        If vrt Then
          vrx.Add(vrt, k)
          Inc k
        Else
          'Print enty
        Endif

      Else
        Print "Skiped" & " " & Skiped

      Endif
    Next
  Next

  If BadObjects.Count > 0 Then
    File.Save("/tmp/tmp.err", BadObjects.Join("\n\n"))
    If Exist("/tmp/tmp.err") Then
      Shell "gedit /tmp/tmp.err"
    Endif
  Endif

  Return vrx

End

'' Convert the Entities collection to an csv structure, later it could be save as file

Private Function ObjetsCSV(ctn As Collection) As String

  Dim out As String
  Dim tmp As New Variant[]
  Dim p As Variant
  Dim e As Variant
  Dim r As Variant
  Dim sHnd As String
  Dim sEnt As String
  Dim sLay As String
  Dim sLwt As String
  Dim sLty As String
  Dim sCor As String

  If ctn.Exist("Entities") Then
    For Each p In ctn["Entities"]
      If TypeOf(p) = gb.Object Then
        For Each e In p
          If TypeOf(e) = gb.Object Then
            sLay = CStr(e["layer"][2])
            If ctn.Exist("Layers") Then
              If ctn["Layers"].Exist(sLay) Then
                sLay = ctn["Layers"][sLay]["name"]
              Endif
            Endif

            sHnd = e["handle"][1]
            sEnt = e["entity"]
            If e.Exist("ltype") Then
              sLty = e["ltype"][2]
              If ctn.Exist("Ltypes") Then
                If ctn["Ltypes"].Exist(sLty) Then
                  sLty = ctn["Ltypes"][sLty]["name"]
                Endif
              Endif
            Else
              sLty = "<>"
            Endif
            sLwt = e["linewt"]
            Select TypeOf(e["color"])
              Case gb.Object
                If e["color"].Exist("index") Then
                  sCor = e["color"]["index"]
                Else
                  sCor = "7"
                Endif

              Case Else
                sCor = e["color"]
            End Select

            tmp.add([sHnd, sEnt, sLay, sLty, sLwt, sCor])
          Endif
        Next
      Endif
    Next
  Endif

  out = "Handle\tEntity\tLayer\tStyle\tWidth\tColor\n"
  For Each r In tmp
    out &= r.Join("\t") & "\n"
  Next

  Return out

End

'' Objects or entities bad for import

Public Function Ugly(Optional sType As String) As String[]

  Dim stx As New String[]

  stx.Add("MENTALRAYRENDERSETTINGS")
  stx.Add("FIELD")
  stx.Add("BLOCKROTATIONPARAMETER")

  Return stx

End

' Public Function Var2Json(vrt As Variant) As String '' Convierte una coleccion en texto en formato JSON.
'
'   Dim strOut As String
'   Dim item As Variant
'
'   For Each item In vrt
'     strOut &= JSON.Encode(item) & "\n"
'   Next
'   Return strOut
'
' End
