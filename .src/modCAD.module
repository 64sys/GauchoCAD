' Gambas module file

' Tool maintained by Terco
' PlantDesigner
' Software para dise√±o de plantas tipo de hormigon
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
' Gambas class file

' Credits
' --------
' Icon design por Trinh Ho ,Good Ware, freepik get them at https://www.flaticon.es
' Based on an example called MuchosCirculos by JGuardon y MrShell
' XML Load/Save by Tincho

' Filtros del dibujo
Public DrawOriginals As Boolean = False
Public DrawMarcados As Boolean = True
Public DrawSoloColumnas As Boolean = False
Public DrawBounds As Boolean = False

Public ScaleLines As Float = 1              ' la uso en Inserts para evitar lineas gordas
Public FormatoCotas As String = "0.00"

Public ColorForSelected As Integer = &H70E000
Public ToolActive As Boolean

Public Ortogonal As Boolean = False              ' idem Ortho F8 del CAD
Public OrtogonalForzado As Boolean = False
Public OrtogonalIgnorado As Boolean = False

Public clsJob As Object                             ' what I am doing now, thats either selecting or something else
Public clsJobPrevious As Object                     ' what was doing before
Public clsJobPreviousParam As Integer               ' a param to pass to clsJob.Start( param )
'------vars for layers, lines, colors etc.
' This collections will be loaded when the file if loaded
' Public cLayers As New Collection   '' Lyayers list
' Public cColors As New Collection   '' Colors list
' Public cStyles As New Collection   '' Line types list
' Public cWeights As New Collection  '' Line weights list

Public gColor As New Integer[]

Public drwDrawingClass As Integer = 0 ' 0 = Paint, 1 = OpenGL
Public Const drwPaintClass As Integer = 2
Public Const drwOpenGLClass As Integer = 4

Public LoadingFinished As Boolean = False
Public FontList As New String[]                     ' esto deberia estar en otro lado
Public FileName As String                           ' current work filename

'---------------------------------------------------------------
'Tincho
'Vars direct or derivated from config xml
Public WindowBackColor As Integer   '' Window backgrount color
Public WindowTextColor As Integer   '' Window helper text color
Public WindowCursorColor As Integer '' Window cursor color
'---------------------------------------------------------------

Public Sub Main()
    ' tests

    Dim lay As New Collection       '' Layer properties

 
    ' armo el array de colores
    gcolor = DecodeColor()
 
    ' this is what we are doing now
    clsJob = clsDefaultJob
    clsJobPrevious = clsDefaultJob
    clsJobPreviousParam = 0

    FileName = User.Home &/ "autosaveV5.xml"

    FontList = glPlus.LoadFonts(Application.Path &/ "Fonts/LFF")
    glPlus.SelectFont("romanc")
    
    
End

' importing

Public Function AddLine(Points As Float[], Optional _color As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadline")             ' create the new entity of proper class
    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2
    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End

Public Function AddPolyLine(Points As Float[], Optional _color As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    ' points are in x,y,x,y,x,y....
    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadPLine")             ' create the new entity of proper class

    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2

    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End
Public Function AddDim(Points As Float[], bloque As String, medida As Float, texto As String, alineacion As Integer, angulo As Float, tipo As Integer, _Color As Integer, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean
    
    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada
    oEntity = Object.New("cadDim")              ' create the new entity of proper class
    
    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2
    oEntity.fParam.Add(tipo)
    oEntity.fParam.Add(MEDIDA)
    oEntity.fParam.Add(alineacion)
    oEntity.fParam.Add(angulo)
    oEntity.stringdata = texto
    oEntity.stringdata2 = bloque
    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object
    
    
  
  
End  

Public Function AddSolid(Points As Float[], Optional _color As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    ' points are in x,y,x,y,x,y....
    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadSolid")             ' create the new entity of proper class

    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2

    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End

Public Function AddSPLine(Points As Float[], Optional _color As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadSPLine")             ' create the new entity of proper class

    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2

    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End

Public Function AddCircle(Points As Float[], radious As Float, Optional _color As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadCircle")             ' create the new entity of proper class
    oEntity.P.insert(points)                    ' centro x1,y1
    oEntity.fParam.Add(radious)                 ' radio
    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End

Public Function AddArc(Points As Float[], r As Float, angle1 As Float, angle2 As Float, Optional _color As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As Object                      ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadArc")           ' create the new entity of proper class
    oEntity.P.insert(points)                    ' centro x1,y1
    oEntity.fParam.Add(r)                      ' radio
    oEntity.fParam.Add(angle1)                   ' angulo
    oEntity.fParam.Add(angle2)                   ' angulo
    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End

Public Function AddEllipse(Points As Float[], r As Float, angle1 As Float, angle2 As Float, Optional _color As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As Object                      ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadEllipse")           ' create the new entity of proper class
    oEntity.P.insert(points)                    ' centro x1,y1
    oEntity.fParam.Add(r)                      ' radio
    oEntity.fParam.Add(angle1)                 ' radio
    oEntity.fParam.Add(angle2)                   ' angulo
    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End

Public Function AddText(Points As Float[], angle As Float, height As Float, _Text As String, Optional _color As Integer = Color.Blue, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadText")             ' create the new entity of proper class
    oEntity.P.insert(points)                    ' recibimos position x1,y1
    oEntity.fParam.Add(angle)                   ' grados
    oEntity.fParam.Add(height)                  ' alto letras
    oEntity.stringdata = _text                  ' el texto
    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End

Public Function AddMText(Points As Float[], angle As Float, height As Float, _Text As String, Optional _color As Integer = Color.Blue, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadMText")             ' create the new entity of proper class
    oEntity.P.insert(points)                    ' recibimos position x1,y1
    oEntity.fParam.Add(angle)                  ' GRADOS
    oEntity.fParam.Add(height)                  ' alto letras
    oEntity.stringdata = _text                  ' el texto
    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End

Public Function AddCurve(Points As Float[], Optional _color As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim o As Object

End

Public Function AddInsert(Points As Float[], scaleX As Float, scaleY As Float, angulo As Float, Optional _color As Integer = Color.Blue, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadInsert")             ' create the new entity of proper class
    oEntity.P.insert(points)                    ' recibimos position x1,y1
    oEntity.fParam.Add(scaleX)
    oEntity.fParam.Add(scaleY)
    oEntity.fParam.Add(angulo)                  ' GRADOS
    oEntity.layer = Layer
    oEntity._color = _color
    oEntity.Block = Block
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)

    oEntity = Null                  ' free object

End

Public Function AddBlock(Points As Float[], Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As Object                       ' creamos la entidad de la clase apropiada

    oEntity = Object.New("cadBlock")             ' create the new entity of proper class
    oEntity.P.insert(points)                    ' basepoint , , siempre es 0,0 los objetos agregados a este bloque se refieren a este punto
    oEntity.layer = Layer
    oEntity.Block = Block
    APPMain.hFCAD.arrEntities.Add(oEntity)
    oEntity.finish(-1)
    oEntity = Null                  ' free object

End


'' Aplica los cambios en los Layers a las entidades
'' Si mode = 1, primero recontruye el layerID (para ser usado luego de abrir un archivo)
Public Function ApplyLayerProperties(Optional mode As Integer = 0)

    Dim e As Object, cLayer As Collection
    Dim LayerName As String
    
    Print "Aplicando propiedades del Layers"
   
        For Each e In APPMain.hFCAD.arrEntities
            
            If mode = 1 Then
                ' reconstruyo el ID del layer en la entidad, para ello busco en la lista cual coincide con su nombre
                For Each cLayer In APPMain.hFCAD.cModel["Layers"]
                    If e.layer = cLayer["name"] Then
                        e.layerID = cLayer["id"]
                        Break
                    Endif
                Next
                
            Endif
            
            
            ' nombre, el que pudo haber cambiado (exepto el "0")
            e.layer = APPMain.hFCAD.cModel["Layers"][e.layerID]["name"]
              
            ' visibiliad
            If APPMain.hFCAD.cModel["Layers"][e.layerID]["show"] Then e.visible = True Else e.visible = False
            
            
            ' color
            If e._color = 256 Then          ' buscar color del layer
                e.ColorToPaint = gColor[APPMain.hFCAD.cModel["Layers"][e.layerID]["colour"]]
            Else If e._color = 257 Then     ' buscar color del objeto
    
            Else If e._color = 0 Then       ' buscar color del bloque
    
            Else
    
                e.ColorToPaint = gColor[e._color]
    
            Endif
    
        Next
   
End

'' Input a dxf color return a rgb color

Public Function DecodeColor() As Integer[]

    Dim rgb As New Integer[]
    Dim rgbx As New String[]

    Dim r As String
    Dim g As String
    Dim b As String
    Dim s As String

    rgbx.Add("0:0:0")
    rgbx.Add("255:0:0")
    rgbx.Add("255:255:0")
    rgbx.Add("0:255:0")
    rgbx.Add("0:255:255")
    rgbx.Add("0:0:255")
    rgbx.Add("255:0:255")
    rgbx.Add("255:255:255")
    rgbx.Add("128:128:128")
    rgbx.Add("192:192:192")
    rgbx.Add("255:0:0")
    rgbx.Add("255:127:127")
    rgbx.Add("165:0:0")
    rgbx.Add("165:82:82")
    rgbx.Add("127:0:0")
    rgbx.Add("127:63:63")
    rgbx.Add("76:0:0")
    rgbx.Add("76:38:38")
    rgbx.Add("38:0:0")
    rgbx.Add("38:19:19")
    rgbx.Add("255:63:0")
    rgbx.Add("255:159:127")
    rgbx.Add("165:41:0")
    rgbx.Add("165:103:82")
    rgbx.Add("127:31:0")
    rgbx.Add("127:79:63")
    rgbx.Add("76:19:0")
    rgbx.Add("76:47:38")
    rgbx.Add("38:9:0")
    rgbx.Add("38:23:19")
    rgbx.Add("255:127:0")
    rgbx.Add("255:191:127")
    rgbx.Add("165:82:0")
    rgbx.Add("165:124:82")
    rgbx.Add("127:63:0")
    rgbx.Add("127:95:63")
    rgbx.Add("76:38:0")
    rgbx.Add("76:57:38")
    rgbx.Add("38:19:0")
    rgbx.Add("38:28:19")
    rgbx.Add("255:191:0")
    rgbx.Add("255:223:127")
    rgbx.Add("165:124:0")
    rgbx.Add("165:145:82")
    rgbx.Add("127:95:0")
    rgbx.Add("127:111:63")
    rgbx.Add("76:57:0")
    rgbx.Add("76:66:38")
    rgbx.Add("38:28:0")
    rgbx.Add("38:33:19")
    rgbx.Add("255:255:0")
    rgbx.Add("255:255:127")
    rgbx.Add("165:165:0")
    rgbx.Add("165:165:82")
    rgbx.Add("127:127:0")
    rgbx.Add("127:127:63")
    rgbx.Add("76:76:0")
    rgbx.Add("76:76:38")
    rgbx.Add("38:38:0")
    rgbx.Add("38:38:19")
    rgbx.Add("191:255:0")
    rgbx.Add("223:255:127")
    rgbx.Add("124:165:0")
    rgbx.Add("145:165:82")
    rgbx.Add("95:127:0")
    rgbx.Add("111:127:63")
    rgbx.Add("57:76:0")
    rgbx.Add("66:76:38")
    rgbx.Add("28:38:0")
    rgbx.Add("33:38:19")
    rgbx.Add("127:255:0")
    rgbx.Add("191:255:127")
    rgbx.Add("82:165:0")
    rgbx.Add("124:165:82")
    rgbx.Add("63:127:0")
    rgbx.Add("95:127:63")
    rgbx.Add("38:76:0")
    rgbx.Add("57:76:38")
    rgbx.Add("19:38:0")
    rgbx.Add("28:38:19")
    rgbx.Add("63:255:0")
    rgbx.Add("159:255:127")
    rgbx.Add("41:165:0")
    rgbx.Add("103:165:82")
    rgbx.Add("31:127:0")
    rgbx.Add("79:127:63")
    rgbx.Add("19:76:0")
    rgbx.Add("47:76:38")
    rgbx.Add("9:38:0")
    rgbx.Add("23:38:19")
    rgbx.Add("0:255:0")
    rgbx.Add("127:255:127")
    rgbx.Add("0:165:0")
    rgbx.Add("82:165:82")
    rgbx.Add("0:127:0")
    rgbx.Add("63:127:63")
    rgbx.Add("0:76:0")
    rgbx.Add("38:76:38")
    rgbx.Add("0:38:0")
    rgbx.Add("19:38:19")
    rgbx.Add("0:255:63")
    rgbx.Add("127:255:159")
    rgbx.Add("0:165:41")
    rgbx.Add("82:165:103")
    rgbx.Add("0:127:31")
    rgbx.Add("63:127:79")
    rgbx.Add("0:76:19")
    rgbx.Add("38:76:47")
    rgbx.Add("0:38:9")
    rgbx.Add("19:38:23")
    rgbx.Add("0:255:127")
    rgbx.Add("127:255:191")
    rgbx.Add("0:165:82")
    rgbx.Add("82:165:124")
    rgbx.Add("0:127:63")
    rgbx.Add("63:127:95")
    rgbx.Add("0:76:38")
    rgbx.Add("38:76:57")
    rgbx.Add("0:38:19")
    rgbx.Add("19:38:28")
    rgbx.Add("0:255:191")
    rgbx.Add("127:255:223")
    rgbx.Add("0:165:124")
    rgbx.Add("82:165:145")
    rgbx.Add("0:127:95")
    rgbx.Add("63:127:111")
    rgbx.Add("0:76:57")
    rgbx.Add("38:76:66")
    rgbx.Add("0:38:28")
    rgbx.Add("19:38:33")
    rgbx.Add("0:255:255")
    rgbx.Add("127:255:255")
    rgbx.Add("0:165:165")
    rgbx.Add("82:165:165")
    rgbx.Add("0:127:127")
    rgbx.Add("63:127:127")
    rgbx.Add("0:76:76")
    rgbx.Add("38:76:76")
    rgbx.Add("0:38:38")
    rgbx.Add("19:38:38")
    rgbx.Add("0:191:255")
    rgbx.Add("127:223:255")
    rgbx.Add("0:124:165")
    rgbx.Add("82:145:165")
    rgbx.Add("0:95:127")
    rgbx.Add("63:111:127")
    rgbx.Add("0:57:76")
    rgbx.Add("38:66:76")
    rgbx.Add("0:28:38")
    rgbx.Add("19:33:38")
    rgbx.Add("0:127:255")
    rgbx.Add("127:191:255")
    rgbx.Add("0:82:165")
    rgbx.Add("82:124:165")
    rgbx.Add("0:63:127")
    rgbx.Add("63:95:127")
    rgbx.Add("0:38:76")
    rgbx.Add("38:57:76")
    rgbx.Add("0:19:38")
    rgbx.Add("19:28:38")
    rgbx.Add("0:63:255")
    rgbx.Add("127:159:255")
    rgbx.Add("0:41:165")
    rgbx.Add("82:103:165")
    rgbx.Add("0:31:127")
    rgbx.Add("63:79:127")
    rgbx.Add("0:19:76")
    rgbx.Add("38:47:76")
    rgbx.Add("0:9:38")
    rgbx.Add("19:23:38")
    rgbx.Add("0:0:255")
    rgbx.Add("127:127:255")
    rgbx.Add("0:0:165")
    rgbx.Add("82:82:165")
    rgbx.Add("0:0:127")
    rgbx.Add("63:63:127")
    rgbx.Add("0:0:76")
    rgbx.Add("38:38:76")
    rgbx.Add("0:0:38")
    rgbx.Add("19:19:38")
    rgbx.Add("63:0:255")
    rgbx.Add("159:127:255")
    rgbx.Add("41:0:165")
    rgbx.Add("103:82:165")
    rgbx.Add("31:0:127")
    rgbx.Add("79:63:127")
    rgbx.Add("19:0:76")
    rgbx.Add("47:38:76")
    rgbx.Add("9:0:38")
    rgbx.Add("23:19:38")
    rgbx.Add("127:0:255")
    rgbx.Add("191:127:255")
    rgbx.Add("82:0:165")
    rgbx.Add("124:82:165")
    rgbx.Add("63:0:127")
    rgbx.Add("95:63:127")
    rgbx.Add("38:0:76")
    rgbx.Add("57:38:76")
    rgbx.Add("19:0:38")
    rgbx.Add("28:19:38")
    rgbx.Add("191:0:255")
    rgbx.Add("223:127:255")
    rgbx.Add("124:0:165")
    rgbx.Add("145:82:165")
    rgbx.Add("95:0:127")
    rgbx.Add("111:63:127")
    rgbx.Add("57:0:76")
    rgbx.Add("66:38:76")
    rgbx.Add("28:0:38")
    rgbx.Add("33:19:38")
    rgbx.Add("255:0:255")
    rgbx.Add("255:127:255")
    rgbx.Add("165:0:165")
    rgbx.Add("165:82:165")
    rgbx.Add("127:0:127")
    rgbx.Add("127:63:127")
    rgbx.Add("76:0:76")
    rgbx.Add("76:38:76")
    rgbx.Add("38:0:38")
    rgbx.Add("38:19:38")
    rgbx.Add("255:0:191")
    rgbx.Add("255:127:223")
    rgbx.Add("165:0:124")
    rgbx.Add("165:82:145")
    rgbx.Add("127:0:95")
    rgbx.Add("127:63:111")
    rgbx.Add("76:0:57")
    rgbx.Add("76:38:66")
    rgbx.Add("38:0:28")
    rgbx.Add("38:19:33")
    rgbx.Add("255:0:127")
    rgbx.Add("255:127:191")
    rgbx.Add("165:0:82")
    rgbx.Add("165:82:124")
    rgbx.Add("127:0:63")
    rgbx.Add("127:63:95")
    rgbx.Add("76:0:38")
    rgbx.Add("76:38:57")
    rgbx.Add("38:0:19")
    rgbx.Add("38:19:28")
    rgbx.Add("255:0:63")
    rgbx.Add("255:127:159")
    rgbx.Add("165:0:41")
    rgbx.Add("165:82:103")
    rgbx.Add("127:0:31")
    rgbx.Add("127:63:79")
    rgbx.Add("76:0:19")
    rgbx.Add("76:38:47")
    rgbx.Add("38:0:9")
    rgbx.Add("38:19:23")
    rgbx.Add("0:0:0")
    rgbx.Add("51:51:51")
    rgbx.Add("102:102:102")
    rgbx.Add("153:153:153")
    rgbx.Add("204:204:204")
    rgbx.Add("255:255:255")

    For Each s In rgbx
        r = Split(s, ":")[0]
        g = Split(s, ":")[1]
        b = Split(s, ":")[2]

        rgb.Add(Color.RGB(CInt(r), CInt(g), CInt(b)))

    Next

    Return rgb

End
