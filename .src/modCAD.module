' Gambas module file

' Tool maintained by Terco
' PlantDesigner
' Software para dise√±o de plantas tipo de hormigon
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
' Gambas class file

' Credits
' --------
' Icon design por Trinh Ho ,Good Ware, freepik get them at https://www.flaticon.es
' Based on an example called MuchosCirculos by JGuardon y MrShell
' XML Load/Save by Tincho

Public ScreenDensity As Float = 1080 / 29.5  ' pixele by cm wich gives a 1:100 scale in my monitor

' Filtros del dibujo
Public DrawOriginals As Boolean = False
Public DrawMarcados As Boolean = True
Public DrawSoloColumnas As Boolean = False
Public DrawBounds As Boolean = False

Public ScaleLines As Float = 1              ' la uso en Inserts para evitar lineas gordas
Public FormatoCotas As String = "0.00"

Public ColorForSelected As Integer = &H70E000
Public ToolActive As Boolean

Public HookSize As Integer = 16                       ' for use with poi
Public Ortogonal As Boolean = False              ' idem Ortho F8 del CAD
Public OrtogonalForzado As Boolean = False
Public OrtogonalIgnorado As Boolean = False
Public SnapMode As Integer                      ' Bitwise: -1 Off ; 0 = Nearest; 1 = Endpoint; 2 = midpoint

Public clsJob As Object                             ' what I am doing now, thats either selecting or something else
Public clsJobPrevious As Object                     ' what was doing before
Public clsJobPreviousParam As Integer               ' a param to pass to clsJob.Start( param )

Public Struct arrBlockSt
    name As String
    x As Float
    y As Float
    layer As String
    entities As Entity[]
End Struct

'Public gColor As New Integer[]

Public drwDrawingClass As Integer = 0 ' 0 = Paint, 1 = OpenGL
Public Const drwPaintClass As Integer = 2
Public Const drwOpenGLClass As Integer = 4

Public LoadingFinished As Boolean = False
Public FontList As New String[]                     ' esto deberia estar en otro lado
Public TextureList As New String[]                     ' esto deberia estar en otro lado
Public FileName As String                           ' current work filename

'---------------------------------------------------------------
' 'Tincho
' 'Vars direct or derivated from config xml
Public WindowBackColor As Integer '= Color.Blac  '' Window backgrount color
Public WindowTextColor As Integer   '' Window helper text color
Public WindowCursorColor As Integer '' Window cursor color
Public WhiteAndBlack As Integer     '' El color blanco/negro siempre sera distinto al

Public ShowInspector As Boolean = False ' TODO: Tincho, agregar a la configuracion y a un Toggle button
'---------------------------------------------------------------

Public Sub Main()
    ' tests

    Dim lay As New Collection       '' Layer properties

    ' WindowBackColor = Starter.flgWindowBackColor
    ' WindowTextColor = Starter.flgWindowTextColor
    ' WindowCursorColor = Starter.flgWindowCursorColor

    'WindowBackColor = Color.Black
    'WindowBackColor = &1B2224

    Select Starter.flgWindowBackColor
        Case Color.Black
            'Case &1B2224
            Starter.flgWhiteAndBlack = Color.White

        Case Else
            Starter.flgWhiteAndBlack = Color.Black

    End Select

    WindowBackColor = Starter.flgWindowBackColor
    WindowTextColor = Starter.flgWindowTextColor
    WindowCursorColor = Starter.flgWindowCursorColor
    WhiteAndBlack = Starter.flgWhiteAndBlack

    'If WindowBackColor = 0 Then WhiteAndBlack = Color.White Else WhiteAndBlack = Color.Black
    ' ' armo el array de colores
    ' gcolor = DecodeColor()
    '
    ' ' corrijo los colores que no se ven contra el fondo
    ' gcolor[0] = WhiteAndBlack
    ' gcolor[7] = WhiteAndBlack
    ' gcolor[255] = WhiteAndBlack

    ' this is what we are doing now
    clsJob = clsDefaultJob
    clsJob.start()
    clsJobPrevious = clsDefaultJob
    clsJobPreviousParam = 0

    'FileName = User.Home &/ "autosaveV5.xml"

    'FontList = glPlus.LoadFonts(Application.Path &/ "Fonts/LFF")
    FontList = glPlus.LoadFonts(Starter.sFonts)
    glPlus.SelectFont("romanc")

    'texturelist = glPlus.LoadTextures(Application.Path &/ "Textures")
    texturelist = glPlus.LoadTextures(Starter.sTextures)

End

Public Function ImportBlocks(colData As Collection) ', obxEntities As Entity[]) As Integer

    Dim iTotalEntities As Integer, colent, colBlk As Collection, flxPoints As New Float[], P As Float[]

    If Not colData.Exist("Blocks") Then Return
    For Each colBlk In colData["Blocks"]
        Dim newBlock As New ArrBlockSt
        newBlock.entities = New Entity[]
        newBlock.name = colBlk["block"]
        APPMain.hFCAD.arrBlocks.Add(newBlock)
        ImportEntities2(colBlk["Entities"], newBlock.entities, newBlock.name)

    Next

End

Public Function ImportModel(colData As Collection, obxEntities As Entity[], Optional BlockName As String) As Integer

    Dim i, iTotalEntities As Integer
    Dim colGrp As Collection

    Dim flxPoints As New Float[]
    Dim P As Float[]
    Dim ratio As Float

    For Each colGrp In colData

        ImportEntities2(colGrp, obxEntities, BlockName)

    Next

End
'' Importa la clave entidades de la coleccion y las coloca en el array de objetos

Public Function ImportEntities2(colGrp As Collection, obxEntities As Entity[], Optional BlockName As String) As Integer

    Dim i, iTotalEntities As Integer
    Dim flxPoints As New Float[]
    Dim P As Float[]
    Dim ratio As Float
    Dim colEnt As Collection

    For Each colEnt In colGrp
        flxPoints.Clear
        Select LCase$(colEnt["entity"]) 'colData.Key

            Case "line"
                GoSub GetPoints
                AddLine(obxEntities, flxPoints, colEnt["colour"], colEnt["width"], colEnt["style"], colEnt["layer"], BlockName)
                Inc iTotalEntities

            Case "lwpolyline", "polyline", "solid"
                GoSub GetPoints
                AddPolyLine(obxEntities, flxPoints, colEnt["colour"], colEnt["width"], colEnt["style"], colEnt["layer"], BlockName)
                Inc iTotalEntities

            Case "ellipse"
                GoSub GetPoints

                AddEllipse(obxEntities, flxPoints, colEnt["ratio"], colEnt["start_angle"], colEnt["end_angle"], colEnt["colour"], colEnt["width"], colEnt["style"], colEnt["layer"], BlockName)
                Inc iTotalEntities

            Case "circle"
                GoSub GetPoints
                AddCircle(obxEntities, flxPoints, colEnt["radius"], colEnt["colour"], colEnt["width"], colEnt["style"], colEnt["layer"], BlockName)
                Inc iTotalEntities

            Case "arc"
                GoSub GetPoints
                AddArc(obxEntities, flxPoints, colEnt["radius"], colEnt["start_angle"], colEnt["end_angle"], colEnt["colour"], colEnt["width"], colEnt["style"], colEnt["layer"], BlockName)
                Inc iTotalEntities

            Case "insert"
                GoSub GetPoints
                ' Insert viene con el punto de insercion XYZ, no puedo usar la rutina lectora de puntos
                'flxPoints.Add(colEnt["p"]["p0"][0])
                'flxPoints.Add(colEnt["p"]["p0"][1])
                AddInsert(obxEntities, flxPoints, colEnt["scalex"], colEnt["scaley"], colEnt["angle"], colEnt["colour"], colEnt["style"], colEnt["layer"], colEnt["block"])
                Inc iTotalEntities

            Case "text"
                GoSub GetPoints
                'flxPoints.Add(colEnt["p"]["p0"][0])
                'flxPoints.Add(colEnt["p"]["p0"][1])
                AddText(obxEntities, flxPoints, colEnt["angle"], colEnt["text_height"], colEnt["text"], colEnt["colour"], colEnt["width"], colEnt["style"], colEnt["layer"], BlockName)
                Inc iTotalEntities

            Case "mtext"
                GoSub GetPoints
                'flxPoints.Add(colEnt["p"]["p0"][0])
                'flxPoints.Add(colEnt["p"]["p0"][1])
                AddMText(obxEntities, flxPoints, colEnt["angle"], colEnt["text_height"], colEnt["text"], colEnt["colour"], colEnt["width"], colEnt["style"], colEnt["layer"], BlockName)
                Inc iTotalEntities

            Case "dimmension"
                GoSub GetPoints
                AddDim(obxEntities, flxPoints, colEnt["angle"], colEnt["text_height"], colEnt["text"], colEnt["colour"], colEnt["width"], colEnt["style"], colEnt["layer"], BlockName)
                Inc iTotalEntities

        End Select

    Next

    Return iTotalEntities

GetPoints:              ' Leo los puntos que estan separados y los meto en un unico array de Float[]
    flxPoints.Clear
    For Each p In colEnt["p"]
        For i = 0 To p.max Step 3
            flxPoints.Add(p[i])                 'X
            flxPoints.Add(p[i + 1])             'Y
            'flxPoints.Add(p[i + 2])            'Z para uso futuro
        Next
    Next

    Return

End

' importing

Public Function AddLine(obxContainer As Entity[], Points As Float[], Optional colour As Integer = 0, Optional LineWidth As Float = 1, Optional Linetype As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As New Entity

    oEntity.ClassHandler = cadLine
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2
    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = 1 'LineWidth               ' datos CAD
    oEntity.linetypename = linetype
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    'cadLine.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddPolyLine(obxContainer As Entity[], Points As Float[], Optional colour As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....

    Dim oEntity As New Entity

    oEntity.ClassHandler = cadPLine
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2

    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = 1 ' LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddDim(obxContainer As Entity[], Points As Float[], bloque As String, medida As Float, texto As String, alineacion As Integer, angulo As Float, tipo As Integer, colour As Integer, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As New Entity

    oEntity.ClassHandler = cadDim              ' create the new entity of proper class
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2
    oEntity.fParam.Add(tipo)
    oEntity.fParam.Add(MEDIDA)
    oEntity.fParam.Add(alineacion)
    oEntity.fParam.Add(angulo)
    oEntity.stringdata = texto
    oEntity.stringdata2 = bloque
    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddSolid(obxContainer As Entity[], Points As Float[], Optional colour As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    ' points are in x,y,x,y,x,y....
    Dim oEntity As New Entity

    oEntity.ClassHandler = cadSolid             ' create the new entity of proper class
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2

    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddSPLine(obxContainer As Entity[], Points As Float[], Optional colour As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As New Entity

    oEntity.ClassHandler = cadSPLine
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' recibimos los dos vertices de la linea x1,y1,x2,y2

    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddCircle(obxContainer As Entity[], Points As Float[], radious As Float, Optional colour As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As New Entity

    oEntity.ClassHandler = cadCircle
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' centro x1,y1
    oEntity.fParam.Add(radious)                 ' radio
    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddArc(obxContainer As Entity[], Points As Float[], r As Float, angle1 As Float, angle2 As Float, Optional colour As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As New Entity

    oEntity.ClassHandler = cadArc
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' centro x1,y1
    oEntity.fParam.Add(r)                      ' radio
    oEntity.fParam.Add(angle1)                   ' angulo
    oEntity.fParam.Add(angle2)                   ' angulo
    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddEllipse(obxContainer As Entity[], Points As Float[], r As Float, angle1 As Float, angle2 As Float, Optional colour As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As New Entity

    oEntity.ClassHandler = cadEllipse
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' centro x1,y1
    oEntity.p[2] += oEntity.p[0]                ' un peque√±o truco porque gaucho usa los puntos de manera diferente a DXF
    oEntity.p[3] += oEntity.p[1]
    oEntity.fParam.Add(r)                      ' ratio minor/major
    oEntity.fParam.Add(angle1 * 180 / Pi)     ' start angle
    oEntity.fParam.Add(angle2 * 180 / Pi)      ' end angle
    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddText(obxContainer As Entity[], Points As Float[], angle As Float, height As Float, _Text As String, Optional colour As Integer = Color.Blue, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As New Entity

    oEntity.ClassHandler = cadText
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' recibimos position x1,y1
    oEntity.fParam.Add(angle)                   ' grados
    oEntity.fParam.Add(height)                  ' alto letras
    oEntity.stringdata = _text                  ' el texto
    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddMText(obxContainer As Entity[], Points As Float[], angle As Float, height As Float, _Text As String, Optional colour As Integer = Color.Blue, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As New Entity

    oEntity.ClassHandler = cadMText
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' recibimos position x1,y1
    oEntity.fParam.Add(angle)                  ' GRADOS
    oEntity.fParam.Add(height)                  ' alto letras
    oEntity.stringdata = _text                  ' el texto
    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.LineWidth = LineWidth               ' datos CAD
    oEntity.Block = Block
    If oEntity.Block <> "" Then oEntity.visible = False
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

Public Function AddCurve(obxContainer As Entity[], Points As Float[], Optional colour As Integer = 0, Optional LineWidth As Float = 1, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    ' points are in x,y,x,y,x,y....
    Dim oEntity As New Entity

    oEntity.Gender = oEntity.ClassHandler.gender

End

Public Function AddInsert(obxContainer As Entity[], Points As Float[], scaleX As Float, scaleY As Float, angulo As Float, Optional colour As Integer = Color.Blue, Optional Linetye As String, Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As New Entity

    oEntity.ClassHandler = cadInsert
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' recibimos position x1,y1
    oEntity.fParam.Add(scaleX)
    oEntity.fParam.Add(scaleY)
    oEntity.fParam.Add(angulo)                  ' GRADOS
    oEntity.layer = Layer
    oEntity.colour = colour
    oEntity.Block = Block
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)

    oEntity = Null                  ' free entity

End

Public Function AddBlock(obxContainer As Entity[], Points As Float[], Optional Layer As String, Optional Block As String) As Boolean

    Dim oEntity As New Entity

    oEntity.ClassHandler = cadBlock
    oEntity.Gender = oEntity.ClassHandler.gender
    oEntity.P.insert(points)                    ' basepoint , , siempre es 0,0 los objetos agregados a este bloque se refieren a este punto
    oEntity.layer = Layer
    oEntity.Block = Block
    obxContainer.Add(oEntity)
    oEntity.ClassHandler.finish(oEntity, -1)
    oEntity = Null                  ' free entity

End

'' Aplica los cambios en los Layers a las entidades
'' Si mode = 1, primero recontruye el layerID (para ser usado luego de abrir un archivo)
Public Function ApplyLayerProperties(Optional mode As Integer = 0)

    Dim e As Entity, cLayer As Collection
    Dim LayerName As String

    Print "Aplicando propiedades del Layers"

    For Each e In APPMain.hFCAD.arrEntities

        If mode = 1 Then
            ' reconstruyo el ID del layer en la entidad, para ello busco en la lista cual coincide con su nombre
            For Each cLayer In APPMain.hFCAD.cModel["Layers"]
                If e.layer = cLayer["name"] Then
                    e.layerID = cLayer["id"]
                    Break
                Endif
            Next

        Endif

        ' nombre, el que pudo haber cambiado (exepto el "0")
        e.layer = APPMain.hFCAD.cModel["Layers"][e.layerID]["name"]

        ' visibiliad
        If APPMain.hFCAD.cModel["Layers"][e.layerID]["show"] Then e.visible = True Else e.visible = False

    Next

End

Public Function GetLayerID(LayerName As String) As String

    Dim cLayer As Collection

    For Each cLayer In APPMain.hFCAD.cModel["Layers"]
        If cLayer["name"] = LayerName Then Return cLayer["id"]
    Next

End

Public Function GetGBColor(CADcolor As Integer, layerID As String) As Integer

    ' color
    If CADcolor = 256 Then          ' buscar color del layer

        Return Starter.gColor[APPMain.hFCAD.cModel["Layers"][layerID]["colour"]]

    Else If CADcolor = 257 Then     ' buscar color del objeto

        Return Starter.gColor[APPMain.hFCAD.cModel["Layers"][layerID]["colour"]]     ' FIXME: cambiar esto

    Else If CADcolor = 0 Then       ' buscar color del bloque

        Return Starter.gColor[APPMain.hFCAD.cModel["Layers"][layerID]["colour"]]     ' FIXME: cambiar esto

    Else

        Return Starter.gColor[CADcolor]

    Endif

End

'' Input a dxf color return a rgb color
'
' Public Function DecodeColor() As Integer[]
'
'     Dim rgb As New Integer[]
'     Dim rgbx As New String[]
'
'     Dim r As String
'     Dim g As String
'     Dim b As String
'     Dim s As String
'     Dim i As Integer
'
'     rgbx.Add("0:0:0")
'     rgbx.Add("255:0:0")
'     rgbx.Add("255:255:0")
'     rgbx.Add("0:255:0")
'     rgbx.Add("0:255:255")
'     rgbx.Add("0:0:255")
'     rgbx.Add("255:0:255")
'     rgbx.Add("255:255:255")
'     rgbx.Add("128:128:128")
'     rgbx.Add("192:192:192")
'     rgbx.Add("255:0:0")
'     rgbx.Add("255:127:127")
'     rgbx.Add("165:0:0")
'     rgbx.Add("165:82:82")
'     rgbx.Add("127:0:0")
'     rgbx.Add("127:63:63")
'     rgbx.Add("76:0:0")
'     rgbx.Add("76:38:38")
'     rgbx.Add("38:0:0")
'     rgbx.Add("38:19:19")
'     rgbx.Add("255:63:0")
'     rgbx.Add("255:159:127")
'     rgbx.Add("165:41:0")
'     rgbx.Add("165:103:82")
'     rgbx.Add("127:31:0")
'     rgbx.Add("127:79:63")
'     rgbx.Add("76:19:0")
'     rgbx.Add("76:47:38")
'     rgbx.Add("38:9:0")
'     rgbx.Add("38:23:19")
'     rgbx.Add("255:127:0")
'     rgbx.Add("255:191:127")
'     rgbx.Add("165:82:0")
'     rgbx.Add("165:124:82")
'     rgbx.Add("127:63:0")
'     rgbx.Add("127:95:63")
'     rgbx.Add("76:38:0")
'     rgbx.Add("76:57:38")
'     rgbx.Add("38:19:0")
'     rgbx.Add("38:28:19")
'     rgbx.Add("255:191:0")
'     rgbx.Add("255:223:127")
'     rgbx.Add("165:124:0")
'     rgbx.Add("165:145:82")
'     rgbx.Add("127:95:0")
'     rgbx.Add("127:111:63")
'     rgbx.Add("76:57:0")
'     rgbx.Add("76:66:38")
'     rgbx.Add("38:28:0")
'     rgbx.Add("38:33:19")
'     rgbx.Add("255:255:0")
'     rgbx.Add("255:255:127")
'     rgbx.Add("165:165:0")
'     rgbx.Add("165:165:82")
'     rgbx.Add("127:127:0")
'     rgbx.Add("127:127:63")
'     rgbx.Add("76:76:0")
'     rgbx.Add("76:76:38")
'     rgbx.Add("38:38:0")
'     rgbx.Add("38:38:19")
'     rgbx.Add("191:255:0")
'     rgbx.Add("223:255:127")
'     rgbx.Add("124:165:0")
'     rgbx.Add("145:165:82")
'     rgbx.Add("95:127:0")
'     rgbx.Add("111:127:63")
'     rgbx.Add("57:76:0")
'     rgbx.Add("66:76:38")
'     rgbx.Add("28:38:0")
'     rgbx.Add("33:38:19")
'     rgbx.Add("127:255:0")
'     rgbx.Add("191:255:127")
'     rgbx.Add("82:165:0")
'     rgbx.Add("124:165:82")
'     rgbx.Add("63:127:0")
'     rgbx.Add("95:127:63")
'     rgbx.Add("38:76:0")
'     rgbx.Add("57:76:38")
'     rgbx.Add("19:38:0")
'     rgbx.Add("28:38:19")
'     rgbx.Add("63:255:0")
'     rgbx.Add("159:255:127")
'     rgbx.Add("41:165:0")
'     rgbx.Add("103:165:82")
'     rgbx.Add("31:127:0")
'     rgbx.Add("79:127:63")
'     rgbx.Add("19:76:0")
'     rgbx.Add("47:76:38")
'     rgbx.Add("9:38:0")
'     rgbx.Add("23:38:19")
'     rgbx.Add("0:255:0")
'     rgbx.Add("127:255:127")
'     rgbx.Add("0:165:0")
'     rgbx.Add("82:165:82")
'     rgbx.Add("0:127:0")
'     rgbx.Add("63:127:63")
'     rgbx.Add("0:76:0")
'     rgbx.Add("38:76:38")
'     rgbx.Add("0:38:0")
'     rgbx.Add("19:38:19")
'     rgbx.Add("0:255:63")
'     rgbx.Add("127:255:159")
'     rgbx.Add("0:165:41")
'     rgbx.Add("82:165:103")
'     rgbx.Add("0:127:31")
'     rgbx.Add("63:127:79")
'     rgbx.Add("0:76:19")
'     rgbx.Add("38:76:47")
'     rgbx.Add("0:38:9")
'     rgbx.Add("19:38:23")
'     rgbx.Add("0:255:127")
'     rgbx.Add("127:255:191")
'     rgbx.Add("0:165:82")
'     rgbx.Add("82:165:124")
'     rgbx.Add("0:127:63")
'     rgbx.Add("63:127:95")
'     rgbx.Add("0:76:38")
'     rgbx.Add("38:76:57")
'     rgbx.Add("0:38:19")
'     rgbx.Add("19:38:28")
'     rgbx.Add("0:255:191")
'     rgbx.Add("127:255:223")
'     rgbx.Add("0:165:124")
'     rgbx.Add("82:165:145")
'     rgbx.Add("0:127:95")
'     rgbx.Add("63:127:111")
'     rgbx.Add("0:76:57")
'     rgbx.Add("38:76:66")
'     rgbx.Add("0:38:28")
'     rgbx.Add("19:38:33")
'     rgbx.Add("0:255:255")
'     rgbx.Add("127:255:255")
'     rgbx.Add("0:165:165")
'     rgbx.Add("82:165:165")
'     rgbx.Add("0:127:127")
'     rgbx.Add("63:127:127")
'     rgbx.Add("0:76:76")
'     rgbx.Add("38:76:76")
'     rgbx.Add("0:38:38")
'     rgbx.Add("19:38:38")
'     rgbx.Add("0:191:255")
'     rgbx.Add("127:223:255")
'     rgbx.Add("0:124:165")
'     rgbx.Add("82:145:165")
'     rgbx.Add("0:95:127")
'     rgbx.Add("63:111:127")
'     rgbx.Add("0:57:76")
'     rgbx.Add("38:66:76")
'     rgbx.Add("0:28:38")
'     rgbx.Add("19:33:38")
'     rgbx.Add("0:127:255")
'     rgbx.Add("127:191:255")
'     rgbx.Add("0:82:165")
'     rgbx.Add("82:124:165")
'     rgbx.Add("0:63:127")
'     rgbx.Add("63:95:127")
'     rgbx.Add("0:38:76")
'     rgbx.Add("38:57:76")
'     rgbx.Add("0:19:38")
'     rgbx.Add("19:28:38")
'     rgbx.Add("0:63:255")
'     rgbx.Add("127:159:255")
'     rgbx.Add("0:41:165")
'     rgbx.Add("82:103:165")
'     rgbx.Add("0:31:127")
'     rgbx.Add("63:79:127")
'     rgbx.Add("0:19:76")
'     rgbx.Add("38:47:76")
'     rgbx.Add("0:9:38")
'     rgbx.Add("19:23:38")
'     rgbx.Add("0:0:255")
'     rgbx.Add("127:127:255")
'     rgbx.Add("0:0:165")
'     rgbx.Add("82:82:165")
'     rgbx.Add("0:0:127")
'     rgbx.Add("63:63:127")
'     rgbx.Add("0:0:76")
'     rgbx.Add("38:38:76")
'     rgbx.Add("0:0:38")
'     rgbx.Add("19:19:38")
'     rgbx.Add("63:0:255")
'     rgbx.Add("159:127:255")
'     rgbx.Add("41:0:165")
'     rgbx.Add("103:82:165")
'     rgbx.Add("31:0:127")
'     rgbx.Add("79:63:127")
'     rgbx.Add("19:0:76")
'     rgbx.Add("47:38:76")
'     rgbx.Add("9:0:38")
'     rgbx.Add("23:19:38")
'     rgbx.Add("127:0:255")
'     rgbx.Add("191:127:255")
'     rgbx.Add("82:0:165")
'     rgbx.Add("124:82:165")
'     rgbx.Add("63:0:127")
'     rgbx.Add("95:63:127")
'     rgbx.Add("38:0:76")
'     rgbx.Add("57:38:76")
'     rgbx.Add("19:0:38")
'     rgbx.Add("28:19:38")
'     rgbx.Add("191:0:255")
'     rgbx.Add("223:127:255")
'     rgbx.Add("124:0:165")
'     rgbx.Add("145:82:165")
'     rgbx.Add("95:0:127")
'     rgbx.Add("111:63:127")
'     rgbx.Add("57:0:76")
'     rgbx.Add("66:38:76")
'     rgbx.Add("28:0:38")
'     rgbx.Add("33:19:38")
'     rgbx.Add("255:0:255")
'     rgbx.Add("255:127:255")
'     rgbx.Add("165:0:165")
'     rgbx.Add("165:82:165")
'     rgbx.Add("127:0:127")
'     rgbx.Add("127:63:127")
'     rgbx.Add("76:0:76")
'     rgbx.Add("76:38:76")
'     rgbx.Add("38:0:38")
'     rgbx.Add("38:19:38")
'     rgbx.Add("255:0:191")
'     rgbx.Add("255:127:223")
'     rgbx.Add("165:0:124")
'     rgbx.Add("165:82:145")
'     rgbx.Add("127:0:95")
'     rgbx.Add("127:63:111")
'     rgbx.Add("76:0:57")
'     rgbx.Add("76:38:66")
'     rgbx.Add("38:0:28")
'     rgbx.Add("38:19:33")
'     rgbx.Add("255:0:127")
'     rgbx.Add("255:127:191")
'     rgbx.Add("165:0:82")
'     rgbx.Add("165:82:124")
'     rgbx.Add("127:0:63")
'     rgbx.Add("127:63:95")
'     rgbx.Add("76:0:38")
'     rgbx.Add("76:38:57")
'     rgbx.Add("38:0:19")
'     rgbx.Add("38:19:28")
'     rgbx.Add("255:0:63")
'     rgbx.Add("255:127:159")
'     rgbx.Add("165:0:41")
'     rgbx.Add("165:82:103")
'     rgbx.Add("127:0:31")
'     rgbx.Add("127:63:79")
'     rgbx.Add("76:0:19")
'     rgbx.Add("76:38:47")
'     rgbx.Add("38:0:9")
'     rgbx.Add("38:19:23")
'     rgbx.Add("0:0:0")
'     rgbx.Add("51:51:51")
'     rgbx.Add("102:102:102")
'     rgbx.Add("153:153:153")
'     rgbx.Add("204:204:204")
'     rgbx.Add("255:255:255")
'     rgbx.Add("255:255:255") '256
'     rgbx.Add("255:255:255") '257
'     For i = 0 To rgbx.Max
'         s = rgbx[i]
'         If i = 0 Or i = 8 Or i = rgbx.Max Then
'             rgb.Add(WhiteAndBlack)
'         Else
'             r = Split(s, ":")[0]
'             g = Split(s, ":")[1]
'             b = Split(s, ":")[2]
'
'             rgb.Add(Color.RGB(CInt(r), CInt(g), CInt(b)))
'         Endif
'     Next
'
'     Return rgb
'
' End

Public Sub Benchmarks()
    ' 1

    ' Recorro la coleccion de entidades, leo y cambio propiedades
    Dim cEntity As Collection, cTipos As Collection, oEntity As Entity, c, i As Integer

    Dim t As Float = Timer
    Dim veces As Integer
    '
    ' For Each cTipos In APPMain.hFCAD.cModel["Entities"]
    '     For Each cEntity In cTipos
    '         cEntity["layer"] = "test"
    '         c = cEntity["colour"]
    '         Inc i
    '     Next
    ' Next
    ' Debug "Recorrida de ", i, " objetos de la coleccion t=", Timer - t
    ' i = 0

    ' recorro los objetos, leo y cambio propiedades
    t = Timer
    For Each oEntity In APPMain.hFCAD.arrEntities
        oEntity.layer = "test"
        c = oEntity.colour
        Inc i
    Next
    Debug "Recorrida de FOR EACH ", i, " objetos del array t=", Timer - t

    ' recorro los objetos, leo y cambio propiedades
    t = Timer
    For i = 0 To APPMain.hFCAD.arrEntities.max
        APPMain.hFCAD.arrEntities[i].layer = "test"
        c = APPMain.hFCAD.arrEntities[i].colour
        Inc i
    Next
    Debug "Recorrida de ", i, " objetos del array t=", Timer - t

    ' 2

    ' Referecio 3 entidades especifias, leo y cambio propiedades
    ' t = Timer

    ' For veces = 0 To 1e6
    '
    '     APPMain.hFCAD.cModel["Entities"]["line"]["20BB"]["layer"] = "test"
    '     c = APPMain.hFCAD.cModel["Entities"]["line"]["20BB"]["colour"]
    '
    '     APPMain.hFCAD.cModel["Entities"]["line"]["16F4"]["layer"] = "test"
    '     c = APPMain.hFCAD.cModel["Entities"]["line"]["16F4"]["colour"]
    '
    '     APPMain.hFCAD.cModel["Entities"]["line"]["1C57"]["layer"] = "test"
    '     c = APPMain.hFCAD.cModel["Entities"]["line"]["1C57"]["colour"]
    '
    '     Inc i
    '
    ' Next
    ' Debug "Referecio objetos de la coleccion t=", Timer - t
    ' i = 0
    '
    ' ' idem para el array
    ' t = Timer
    ' For veces = 0 To 1e6
    '     APPMain.hFCAD.arrEntities[3500].layer = "test"
    '     c = APPMain.hFCAD.arrEntities[3500].colour
    '
    '     APPMain.hFCAD.arrEntities[2500].layer = "test"
    '     c = APPMain.hFCAD.arrEntities[2500].colour
    '
    '     APPMain.hFCAD.arrEntities[1500].layer = "test"
    '     c = APPMain.hFCAD.arrEntities[1500].colour
    '
    '     Inc i
    ' Next
    ' Debug "Referencio objetos del array t=", Timer - t

    ' 3 benchmark para POI

    ' Dim flxPOI As New Float[], enco As New Float[]
    ' t = Timer
    ' For veces = 0 To 2e6 - 1
    '     flxPOI.Add(Rnd(-1000, 1000))
    '     flxPOI.Add(Rnd(-1000, 1000))
    ' Next
    ' Debug "Creo array t=", Timer - t
    '
    ' t = Timer
    ' enco = puntos.FindPOI(2000, 2000, flxPOI, 20)
    ' Debug "Poi encontrado", enco[2], Timer - t

End
